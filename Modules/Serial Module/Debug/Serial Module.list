
Serial Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000980  08000980  00010980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000988  08000988  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08000988  08000988  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000988  08000988  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000988  08000988  00010988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800098c  0800098c  0001098c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08000990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          0000016c  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000204  20000204  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001203  00000000  00000000  0002010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000617  00000000  00000000  0002130e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000110  00000000  00000000  00021928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000b5  00000000  00000000  00021a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00015f46  00000000  00000000  00021aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001c53  00000000  00000000  00037a33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000762c4  00000000  00000000  00039686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000061c  00000000  00000000  000af94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000aff68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000098 	.word	0x20000098
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000968 	.word	0x08000968

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000009c 	.word	0x2000009c
 80001d0:	08000968 	.word	0x08000968

080001d4 <checkStop>:
void (*stopGame)();

char green[] = "green";
char red[] = "red";

void checkStop(volatile uint8_t* string_buffer, uint32_t size) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	if (strncmp("stop", (char*)string_buffer, 4) == 0) {
 80001de:	2204      	movs	r2, #4
 80001e0:	6879      	ldr	r1, [r7, #4]
 80001e2:	4806      	ldr	r0, [pc, #24]	; (80001fc <checkStop+0x28>)
 80001e4:	f000 fb72 	bl	80008cc <strncmp>
 80001e8:	4603      	mov	r3, r0
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d102      	bne.n	80001f4 <checkStop+0x20>
		stopGame();
 80001ee:	4b04      	ldr	r3, [pc, #16]	; (8000200 <checkStop+0x2c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4798      	blx	r3
	}
}
 80001f4:	bf00      	nop
 80001f6:	3708      	adds	r7, #8
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	08000980 	.word	0x08000980
 8000200:	200000b4 	.word	0x200000b4

08000204 <laptopInterfaceInitialise>:

void laptopInterfaceInitialise(void (*stopGameFunction)()) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	stopGame = stopGameFunction;
 800020c:	4a06      	ldr	r2, [pc, #24]	; (8000228 <laptopInterfaceInitialise+0x24>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	6013      	str	r3, [r2, #0]
	serialInitialise(10, BAUD_115200, &USART1_PORT, &checkStop);
 8000212:	4b06      	ldr	r3, [pc, #24]	; (800022c <laptopInterfaceInitialise+0x28>)
 8000214:	4a06      	ldr	r2, [pc, #24]	; (8000230 <laptopInterfaceInitialise+0x2c>)
 8000216:	2104      	movs	r1, #4
 8000218:	200a      	movs	r0, #10
 800021a:	f000 f879 	bl	8000310 <serialInitialise>
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	200000b4 	.word	0x200000b4
 800022c:	080001d5 	.word	0x080001d5
 8000230:	20000008 	.word	0x20000008

08000234 <setLaptopGreen>:

void setLaptopGreen() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	 volatile uint8_t* ptr = (volatile uint8_t*) green;
 800023a:	4b05      	ldr	r3, [pc, #20]	; (8000250 <setLaptopGreen+0x1c>)
 800023c:	607b      	str	r3, [r7, #4]
	 serialTransmitString(ptr, &USART1_PORT);
 800023e:	4905      	ldr	r1, [pc, #20]	; (8000254 <setLaptopGreen+0x20>)
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 f9dc 	bl	80005fe <serialTransmitString>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000000 	.word	0x20000000
 8000254:	20000008 	.word	0x20000008

08000258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	db0b      	blt.n	8000282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 021f 	and.w	r2, r3, #31
 8000270:	4907      	ldr	r1, [pc, #28]	; (8000290 <__NVIC_EnableIRQ+0x38>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	2001      	movs	r0, #1
 800027a:	fa00 f202 	lsl.w	r2, r0, r2
 800027e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000282:	bf00      	nop
 8000284:	370c      	adds	r7, #12
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	e000e100 	.word	0xe000e100

08000294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	6039      	str	r1, [r7, #0]
 800029e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	db0a      	blt.n	80002be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	490c      	ldr	r1, [pc, #48]	; (80002e0 <__NVIC_SetPriority+0x4c>)
 80002ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b2:	0112      	lsls	r2, r2, #4
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	440b      	add	r3, r1
 80002b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002bc:	e00a      	b.n	80002d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	4908      	ldr	r1, [pc, #32]	; (80002e4 <__NVIC_SetPriority+0x50>)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	f003 030f 	and.w	r3, r3, #15
 80002ca:	3b04      	subs	r3, #4
 80002cc:	0112      	lsls	r2, r2, #4
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	440b      	add	r3, r1
 80002d2:	761a      	strb	r2, [r3, #24]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	e000e100 	.word	0xe000e100
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <USART1_EXTI25_IRQHandler>:
		0x00, // default transmit pointer is NULL
		USART1_IRQn, // the specific IRQn for the given USART
		0x00, // default RxCompletedStringFunction is NULL
		};

void USART1_EXTI25_IRQHandler(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	// Catch the interrupt and call the handler with the appropriate USART port
	serialReceiveCharacter(&USART1_PORT);
 80002ec:	4806      	ldr	r0, [pc, #24]	; (8000308 <USART1_EXTI25_IRQHandler+0x20>)
 80002ee:	f000 f8e9 	bl	80004c4 <serialReceiveCharacter>
	// Only transmit if transmit interupt is enabled
	if ((USART1->CR1 & USART_CR1_TXEIE) != 0) {
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <USART1_EXTI25_IRQHandler+0x24>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d002      	beq.n	8000304 <USART1_EXTI25_IRQHandler+0x1c>
		serialTransmitCharacter(&USART1_PORT);
 80002fe:	4802      	ldr	r0, [pc, #8]	; (8000308 <USART1_EXTI25_IRQHandler+0x20>)
 8000300:	f000 f948 	bl	8000594 <serialTransmitCharacter>
	}
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	20000008 	.word	0x20000008
 800030c:	40013800 	.word	0x40013800

08000310 <serialInitialise>:

// Initialise a serial port with interrupts
void serialInitialise(uint32_t buffer_size,
					  uint32_t baudRate,
					  SerialPort *serial_port,
					  void (*rxCompletedStringFunction)(volatile uint8_t*, uint32_t)) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	607a      	str	r2, [r7, #4]
 800031c:	603b      	str	r3, [r7, #0]
	// function - pointer to function with inputs pointer to buffer and string length


	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800031e:	4b56      	ldr	r3, [pc, #344]	; (8000478 <serialInitialise+0x168>)
 8000320:	69db      	ldr	r3, [r3, #28]
 8000322:	4a55      	ldr	r2, [pc, #340]	; (8000478 <serialInitialise+0x168>)
 8000324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000328:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800032a:	4b53      	ldr	r3, [pc, #332]	; (8000478 <serialInitialise+0x168>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a52      	ldr	r2, [pc, #328]	; (8000478 <serialInitialise+0x168>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	691a      	ldr	r2, [r3, #16]
 800033a:	4b4f      	ldr	r3, [pc, #316]	; (8000478 <serialInitialise+0x168>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	494e      	ldr	r1, [pc, #312]	; (8000478 <serialInitialise+0x168>)
 8000340:	4313      	orrs	r3, r2
 8000342:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function and speed to high for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	6952      	ldr	r2, [r2, #20]
 800034c:	601a      	str	r2, [r3, #0]
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	6992      	ldr	r2, [r2, #24]
 8000356:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	69d9      	ldr	r1, [r3, #28]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	6a1a      	ldr	r2, [r3, #32]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	430a      	orrs	r2, r1
 8000368:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	6a19      	ldr	r1, [r3, #32]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	430a      	orrs	r2, r1
 800037a:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	68da      	ldr	r2, [r3, #12]
 8000380:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <serialInitialise+0x168>)
 8000382:	69db      	ldr	r3, [r3, #28]
 8000384:	493c      	ldr	r1, [pc, #240]	; (8000478 <serialInitialise+0x168>)
 8000386:	4313      	orrs	r3, r2
 8000388:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	689a      	ldr	r2, [r3, #8]
 800038e:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <serialInitialise+0x168>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4939      	ldr	r1, [pc, #228]	; (8000478 <serialInitialise+0x168>)
 8000394:	4313      	orrs	r3, r2
 8000396:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	330c      	adds	r3, #12
 800039e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d822      	bhi.n	80003ec <serialInitialise+0xdc>
 80003a6:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <serialInitialise+0x9c>)
 80003a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ac:	080003c1 	.word	0x080003c1
 80003b0:	080003cb 	.word	0x080003cb
 80003b4:	080003d5 	.word	0x080003d5
 80003b8:	080003dd 	.word	0x080003dd
 80003bc:	080003e5 	.word	0x080003e5
	case BAUD_9600:
		*baud_rate_config = 0x341;  // 9600 at 8MHz
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	f240 3241 	movw	r2, #833	; 0x341
 80003c6:	801a      	strh	r2, [r3, #0]
		break;
 80003c8:	e010      	b.n	80003ec <serialInitialise+0xdc>
	case BAUD_19200:
		*baud_rate_config = 0x1A1;  // 19200 at 8MHz
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	f240 12a1 	movw	r2, #417	; 0x1a1
 80003d0:	801a      	strh	r2, [r3, #0]
		break;
 80003d2:	e00b      	b.n	80003ec <serialInitialise+0xdc>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	22d0      	movs	r2, #208	; 0xd0
 80003d8:	801a      	strh	r2, [r3, #0]
		break;
 80003da:	e007      	b.n	80003ec <serialInitialise+0xdc>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	228b      	movs	r2, #139	; 0x8b
 80003e0:	801a      	strh	r2, [r3, #0]
		break;
 80003e2:	e003      	b.n	80003ec <serialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	2246      	movs	r2, #70	; 0x46
 80003e8:	801a      	strh	r2, [r3, #0]
		break;
 80003ea:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f042 020d 	orr.w	r2, r2, #13
 80003fa:	601a      	str	r2, [r3, #0]

	// initialise the double buffer
	serial_port->BufferSize = buffer_size;
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	68fa      	ldr	r2, [r7, #12]
 8000400:	631a      	str	r2, [r3, #48]	; 0x30
	serial_port->StringBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f9ac 	bl	8000764 <malloc>
 800040c:	4603      	mov	r3, r0
 800040e:	461a      	mov	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	625a      	str	r2, [r3, #36]	; 0x24
	serial_port->AlternateStringBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4618      	mov	r0, r3
 800041a:	f000 f9a3 	bl	8000764 <malloc>
 800041e:	4603      	mov	r3, r0
 8000420:	461a      	mov	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	629a      	str	r2, [r3, #40]	; 0x28

	// set the completion function
	serial_port->RxCompletedStringFunction = rxCompletedStringFunction;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	683a      	ldr	r2, [r7, #0]
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop

	__disable_irq();

	// enable the rx interrupts, tx interrupts enabled when a string is being tranmitted
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f042 0220 	orr.w	r2, r2, #32
 800043e:	601a      	str	r2, [r3, #0]
	serial_port->UART->CR3 |= USART_CR3_EIE;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	689a      	ldr	r2, [r3, #8]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f042 0201 	orr.w	r2, r2, #1
 800044e:	609a      	str	r2, [r3, #8]

	// Tell the NVIC module to enable interrupt and set priority
	NVIC_SetPriority(serial_port->UART_IRQn, 1);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000454:	b25b      	sxtb	r3, r3
 8000456:	2101      	movs	r1, #1
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff1b 	bl	8000294 <__NVIC_SetPriority>
	NVIC_EnableIRQ(serial_port->UART_IRQn);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000462:	b25b      	sxtb	r3, r3
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff fef7 	bl	8000258 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800046a:	b662      	cpsie	i
}
 800046c:	bf00      	nop
	__enable_irq();
}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <setTransmitInterrupt>:

void setTransmitInterrupt(bool set, SerialPort *serial_port) {
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	6039      	str	r1, [r7, #0]
 8000486:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
	// Function to enable/disable the transmit interrupt
	__disable_irq();
	if (set) {
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d008      	beq.n	80004a4 <setTransmitInterrupt+0x28>
		serial_port->UART->CR1 |= USART_CR1_TXEIE;
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	e007      	b.n	80004b4 <setTransmitInterrupt+0x38>
	} else {
		serial_port->UART->CR1 &= ~USART_CR1_TXEIE;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80004b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004b4:	b662      	cpsie	i
}
 80004b6:	bf00      	nop
	}
	__enable_irq();
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <serialReceiveCharacter>:

void serialReceiveCharacter(SerialPort *serial_port) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	// Called when interrupt is activated to receive a character into the buffer
	// When the buffer is full, call the callback function and switch the buffers

	// If byte is received properly
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 0320 	and.w	r3, r3, #32
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d04f      	beq.n	800057a <serialReceiveCharacter+0xb6>
		(serial_port->UART->ISR & USART_ISR_FE) == 0 &&
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	69db      	ldr	r3, [r3, #28]
 80004e0:	f003 0302 	and.w	r3, r3, #2
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d148      	bne.n	800057a <serialReceiveCharacter+0xb6>
		(serial_port->UART->ISR & USART_ISR_ORE) == 0) {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	f003 0308 	and.w	r3, r3, #8
		(serial_port->UART->ISR & USART_ISR_FE) == 0 &&
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d141      	bne.n	800057a <serialReceiveCharacter+0xb6>

		// Add the new character to the string buffer
		serial_port->StringBuffer[serial_port->BufferCount] = serial_port->UART->RDR & 0xFF;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80004fc:	b299      	uxth	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000506:	4413      	add	r3, r2
 8000508:	b2ca      	uxtb	r2, r1
 800050a:	701a      	strb	r2, [r3, #0]
		serial_port->BufferCount++;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000510:	1c5a      	adds	r2, r3, #1
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	62da      	str	r2, [r3, #44]	; 0x2c

		// if exceeding size limit append 0x00 NULL terminating character
		if (serial_port->BufferCount + 1 == serial_port->BufferSize) {
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800051a:	1c5a      	adds	r2, r3, #1
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	429a      	cmp	r2, r3
 8000522:	d10b      	bne.n	800053c <serialReceiveCharacter+0x78>
			serial_port->StringBuffer[serial_port->BufferCount] = 0x00;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800052c:	4413      	add	r3, r2
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
			serial_port-> BufferCount++;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		// If terminating character found -> flip the buffers and call the callback function
		if (serial_port->StringBuffer[serial_port->BufferCount - 1] == 0x00){
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000544:	3b01      	subs	r3, #1
 8000546:	4413      	add	r3, r2
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d11d      	bne.n	800058c <serialReceiveCharacter+0xc8>
			// Swap the buffers
			volatile uint8_t* temporary_buffer_pointer = serial_port->StringBuffer;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000554:	60fb      	str	r3, [r7, #12]
			serial_port->StringBuffer = serial_port->AlternateStringBuffer;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	625a      	str	r2, [r3, #36]	; 0x24
			serial_port->AlternateStringBuffer = temporary_buffer_pointer;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	629a      	str	r2, [r3, #40]	; 0x28

			// Callback function
			serial_port->RxCompletedStringFunction(temporary_buffer_pointer, serial_port->BufferCount);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800056c:	4611      	mov	r1, r2
 800056e:	68f8      	ldr	r0, [r7, #12]
 8000570:	4798      	blx	r3
			serial_port-> BufferCount = 0;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
		if (serial_port->StringBuffer[serial_port->BufferCount - 1] == 0x00){
 8000578:	e008      	b.n	800058c <serialReceiveCharacter+0xc8>
		}
	} else {
		// Clear errors if frame is not received properly
		serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6a1a      	ldr	r2, [r3, #32]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f042 020a 	orr.w	r2, r2, #10
 8000588:	621a      	str	r2, [r3, #32]

	}
}
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <serialTransmitCharacter>:

void serialTransmitCharacter(SerialPort *serial_port) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	// Called when the interrupt is activated and transmit interrupt is enabled

	// Check whether tx interrupt called the function, do nothing if tx interrupt didn't call
	if ((serial_port->UART->ISR & USART_ISR_TXE) == 0) {return;}
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d023      	beq.n	80005f2 <serialTransmitCharacter+0x5e>

	// If we are at the end of the transmit buffer (null character),
	// send \r then \0 on the next interrupt then disable interrupt (no more characters to transmit)
	if (serial_port->TransmitPointer == 0x00) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d021      	beq.n	80005f6 <serialTransmitCharacter+0x62>
		return;
	}

	// If nothing left to send set pointer to null
	if (*serial_port->TransmitPointer == 0x00) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d10b      	bne.n	80005d6 <serialTransmitCharacter+0x42>
		serial_port->UART->TDR = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2200      	movs	r2, #0
 80005c4:	851a      	strh	r2, [r3, #40]	; 0x28
		serial_port->TransmitPointer = 0;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34
		setTransmitInterrupt(false, serial_port);
 80005cc:	6879      	ldr	r1, [r7, #4]
 80005ce:	2000      	movs	r0, #0
 80005d0:	f7ff ff54 	bl	800047c <setTransmitInterrupt>
		return;
 80005d4:	e010      	b.n	80005f8 <serialTransmitCharacter+0x64>
	}

	// All other cases, transmit the character normally
	serial_port->UART->TDR = *serial_port->TransmitPointer;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	b292      	uxth	r2, r2
 80005e4:	851a      	strh	r2, [r3, #40]	; 0x28
	serial_port->TransmitPointer++;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	635a      	str	r2, [r3, #52]	; 0x34
 80005f0:	e002      	b.n	80005f8 <serialTransmitCharacter+0x64>
	if ((serial_port->UART->ISR & USART_ISR_TXE) == 0) {return;}
 80005f2:	bf00      	nop
 80005f4:	e000      	b.n	80005f8 <serialTransmitCharacter+0x64>
		return;
 80005f6:	bf00      	nop
}
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <serialTransmitString>:

void serialTransmitString(volatile uint8_t* pt, SerialPort *serial_port) {
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
	// Set the pointer to the start of the string to transmit then enable the tx interrupt
	serial_port->TransmitPointer = pt;
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
	setTransmitInterrupt(true, serial_port);
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	2001      	movs	r0, #1
 8000612:	f7ff ff33 	bl	800047c <setTransmitInterrupt>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <enableLEDs>:
#include <stdlib.h>
#include "stm32f303xc.h"
#include "LaptopInterface.h"

void enableLEDs()
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <enableLEDs+0x2c>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <enableLEDs+0x2c>)
 800062c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000630:	6153      	str	r3, [r2, #20]

	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <enableLEDs+0x30>)
 8000634:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f245 5255 	movw	r2, #21845	; 0x5555
 800063c:	801a      	strh	r2, [r3, #0]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	48001002 	.word	0x48001002

08000654 <toggleLEDs>:

void toggleLEDs(uint8_t bitmap) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	*(((uint8_t*)&(GPIOE->ODR)) + 1) = (*(((uint8_t*)&(GPIOE->ODR)) + 1)) ^ bitmap;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <toggleLEDs+0x24>)
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	4905      	ldr	r1, [pc, #20]	; (8000678 <toggleLEDs+0x24>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4053      	eors	r3, r2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	700b      	strb	r3, [r1, #0]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	48001015 	.word	0x48001015

0800067c <stopGameTest>:


void stopGameTest() {
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	toggleLEDs(0b11111111);
 8000680:	20ff      	movs	r0, #255	; 0xff
 8000682:	f7ff ffe7 	bl	8000654 <toggleLEDs>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <main>:

int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	enableLEDs();
 8000690:	f7ff ffc6 	bl	8000620 <enableLEDs>
	laptopInterfaceInitialise(&stopGameTest);
 8000694:	4802      	ldr	r0, [pc, #8]	; (80006a0 <main+0x14>)
 8000696:	f7ff fdb5 	bl	8000204 <laptopInterfaceInitialise>
	setLaptopGreen();
 800069a:	f7ff fdcb 	bl	8000234 <setLaptopGreen>
	for(;;);
 800069e:	e7fe      	b.n	800069e <main+0x12>
 80006a0:	0800067d 	.word	0x0800067d

080006a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006ac:	4a14      	ldr	r2, [pc, #80]	; (8000700 <_sbrk+0x5c>)
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <_sbrk+0x60>)
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <_sbrk+0x64>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d102      	bne.n	80006c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <_sbrk+0x64>)
 80006c2:	4a12      	ldr	r2, [pc, #72]	; (800070c <_sbrk+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	693a      	ldr	r2, [r7, #16]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d207      	bcs.n	80006e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d4:	f000 f91c 	bl	8000910 <__errno>
 80006d8:	4603      	mov	r3, r0
 80006da:	220c      	movs	r2, #12
 80006dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	e009      	b.n	80006f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <_sbrk+0x64>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	4a05      	ldr	r2, [pc, #20]	; (8000708 <_sbrk+0x64>)
 80006f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f6:	68fb      	ldr	r3, [r7, #12]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000a000 	.word	0x2000a000
 8000704:	00000400 	.word	0x00000400
 8000708:	200000b8 	.word	0x200000b8
 800070c:	20000208 	.word	0x20000208

08000710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000712:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000714:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073e:	f000 f8ed 	bl	800091c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff ffa3 	bl	800068c <main>

08000746 <LoopForever>:

LoopForever:
  b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   r0, =_estack
 8000748:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000754:	08000990 	.word	0x08000990
  ldr r2, =_sbss
 8000758:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800075c:	20000204 	.word	0x20000204

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <malloc>:
 8000764:	4b02      	ldr	r3, [pc, #8]	; (8000770 <malloc+0xc>)
 8000766:	4601      	mov	r1, r0
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f000 b823 	b.w	80007b4 <_malloc_r>
 800076e:	bf00      	nop
 8000770:	20000094 	.word	0x20000094

08000774 <sbrk_aligned>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	4e0e      	ldr	r6, [pc, #56]	; (80007b0 <sbrk_aligned+0x3c>)
 8000778:	460c      	mov	r4, r1
 800077a:	6831      	ldr	r1, [r6, #0]
 800077c:	4605      	mov	r5, r0
 800077e:	b911      	cbnz	r1, 8000786 <sbrk_aligned+0x12>
 8000780:	f000 f8b6 	bl	80008f0 <_sbrk_r>
 8000784:	6030      	str	r0, [r6, #0]
 8000786:	4621      	mov	r1, r4
 8000788:	4628      	mov	r0, r5
 800078a:	f000 f8b1 	bl	80008f0 <_sbrk_r>
 800078e:	1c43      	adds	r3, r0, #1
 8000790:	d00a      	beq.n	80007a8 <sbrk_aligned+0x34>
 8000792:	1cc4      	adds	r4, r0, #3
 8000794:	f024 0403 	bic.w	r4, r4, #3
 8000798:	42a0      	cmp	r0, r4
 800079a:	d007      	beq.n	80007ac <sbrk_aligned+0x38>
 800079c:	1a21      	subs	r1, r4, r0
 800079e:	4628      	mov	r0, r5
 80007a0:	f000 f8a6 	bl	80008f0 <_sbrk_r>
 80007a4:	3001      	adds	r0, #1
 80007a6:	d101      	bne.n	80007ac <sbrk_aligned+0x38>
 80007a8:	f04f 34ff 	mov.w	r4, #4294967295
 80007ac:	4620      	mov	r0, r4
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	200000c0 	.word	0x200000c0

080007b4 <_malloc_r>:
 80007b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007b8:	1ccd      	adds	r5, r1, #3
 80007ba:	f025 0503 	bic.w	r5, r5, #3
 80007be:	3508      	adds	r5, #8
 80007c0:	2d0c      	cmp	r5, #12
 80007c2:	bf38      	it	cc
 80007c4:	250c      	movcc	r5, #12
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	4607      	mov	r7, r0
 80007ca:	db01      	blt.n	80007d0 <_malloc_r+0x1c>
 80007cc:	42a9      	cmp	r1, r5
 80007ce:	d905      	bls.n	80007dc <_malloc_r+0x28>
 80007d0:	230c      	movs	r3, #12
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	2600      	movs	r6, #0
 80007d6:	4630      	mov	r0, r6
 80007d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80008b0 <_malloc_r+0xfc>
 80007e0:	f000 f868 	bl	80008b4 <__malloc_lock>
 80007e4:	f8d8 3000 	ldr.w	r3, [r8]
 80007e8:	461c      	mov	r4, r3
 80007ea:	bb5c      	cbnz	r4, 8000844 <_malloc_r+0x90>
 80007ec:	4629      	mov	r1, r5
 80007ee:	4638      	mov	r0, r7
 80007f0:	f7ff ffc0 	bl	8000774 <sbrk_aligned>
 80007f4:	1c43      	adds	r3, r0, #1
 80007f6:	4604      	mov	r4, r0
 80007f8:	d155      	bne.n	80008a6 <_malloc_r+0xf2>
 80007fa:	f8d8 4000 	ldr.w	r4, [r8]
 80007fe:	4626      	mov	r6, r4
 8000800:	2e00      	cmp	r6, #0
 8000802:	d145      	bne.n	8000890 <_malloc_r+0xdc>
 8000804:	2c00      	cmp	r4, #0
 8000806:	d048      	beq.n	800089a <_malloc_r+0xe6>
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	4631      	mov	r1, r6
 800080c:	4638      	mov	r0, r7
 800080e:	eb04 0903 	add.w	r9, r4, r3
 8000812:	f000 f86d 	bl	80008f0 <_sbrk_r>
 8000816:	4581      	cmp	r9, r0
 8000818:	d13f      	bne.n	800089a <_malloc_r+0xe6>
 800081a:	6821      	ldr	r1, [r4, #0]
 800081c:	1a6d      	subs	r5, r5, r1
 800081e:	4629      	mov	r1, r5
 8000820:	4638      	mov	r0, r7
 8000822:	f7ff ffa7 	bl	8000774 <sbrk_aligned>
 8000826:	3001      	adds	r0, #1
 8000828:	d037      	beq.n	800089a <_malloc_r+0xe6>
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	442b      	add	r3, r5
 800082e:	6023      	str	r3, [r4, #0]
 8000830:	f8d8 3000 	ldr.w	r3, [r8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d038      	beq.n	80008aa <_malloc_r+0xf6>
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	42a2      	cmp	r2, r4
 800083c:	d12b      	bne.n	8000896 <_malloc_r+0xe2>
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	e00f      	b.n	8000864 <_malloc_r+0xb0>
 8000844:	6822      	ldr	r2, [r4, #0]
 8000846:	1b52      	subs	r2, r2, r5
 8000848:	d41f      	bmi.n	800088a <_malloc_r+0xd6>
 800084a:	2a0b      	cmp	r2, #11
 800084c:	d917      	bls.n	800087e <_malloc_r+0xca>
 800084e:	1961      	adds	r1, r4, r5
 8000850:	42a3      	cmp	r3, r4
 8000852:	6025      	str	r5, [r4, #0]
 8000854:	bf18      	it	ne
 8000856:	6059      	strne	r1, [r3, #4]
 8000858:	6863      	ldr	r3, [r4, #4]
 800085a:	bf08      	it	eq
 800085c:	f8c8 1000 	streq.w	r1, [r8]
 8000860:	5162      	str	r2, [r4, r5]
 8000862:	604b      	str	r3, [r1, #4]
 8000864:	4638      	mov	r0, r7
 8000866:	f104 060b 	add.w	r6, r4, #11
 800086a:	f000 f829 	bl	80008c0 <__malloc_unlock>
 800086e:	f026 0607 	bic.w	r6, r6, #7
 8000872:	1d23      	adds	r3, r4, #4
 8000874:	1af2      	subs	r2, r6, r3
 8000876:	d0ae      	beq.n	80007d6 <_malloc_r+0x22>
 8000878:	1b9b      	subs	r3, r3, r6
 800087a:	50a3      	str	r3, [r4, r2]
 800087c:	e7ab      	b.n	80007d6 <_malloc_r+0x22>
 800087e:	42a3      	cmp	r3, r4
 8000880:	6862      	ldr	r2, [r4, #4]
 8000882:	d1dd      	bne.n	8000840 <_malloc_r+0x8c>
 8000884:	f8c8 2000 	str.w	r2, [r8]
 8000888:	e7ec      	b.n	8000864 <_malloc_r+0xb0>
 800088a:	4623      	mov	r3, r4
 800088c:	6864      	ldr	r4, [r4, #4]
 800088e:	e7ac      	b.n	80007ea <_malloc_r+0x36>
 8000890:	4634      	mov	r4, r6
 8000892:	6876      	ldr	r6, [r6, #4]
 8000894:	e7b4      	b.n	8000800 <_malloc_r+0x4c>
 8000896:	4613      	mov	r3, r2
 8000898:	e7cc      	b.n	8000834 <_malloc_r+0x80>
 800089a:	230c      	movs	r3, #12
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4638      	mov	r0, r7
 80008a0:	f000 f80e 	bl	80008c0 <__malloc_unlock>
 80008a4:	e797      	b.n	80007d6 <_malloc_r+0x22>
 80008a6:	6025      	str	r5, [r4, #0]
 80008a8:	e7dc      	b.n	8000864 <_malloc_r+0xb0>
 80008aa:	605b      	str	r3, [r3, #4]
 80008ac:	deff      	udf	#255	; 0xff
 80008ae:	bf00      	nop
 80008b0:	200000bc 	.word	0x200000bc

080008b4 <__malloc_lock>:
 80008b4:	4801      	ldr	r0, [pc, #4]	; (80008bc <__malloc_lock+0x8>)
 80008b6:	f000 b855 	b.w	8000964 <__retarget_lock_acquire_recursive>
 80008ba:	bf00      	nop
 80008bc:	20000200 	.word	0x20000200

080008c0 <__malloc_unlock>:
 80008c0:	4801      	ldr	r0, [pc, #4]	; (80008c8 <__malloc_unlock+0x8>)
 80008c2:	f000 b850 	b.w	8000966 <__retarget_lock_release_recursive>
 80008c6:	bf00      	nop
 80008c8:	20000200 	.word	0x20000200

080008cc <strncmp>:
 80008cc:	b510      	push	{r4, lr}
 80008ce:	b16a      	cbz	r2, 80008ec <strncmp+0x20>
 80008d0:	3901      	subs	r1, #1
 80008d2:	1884      	adds	r4, r0, r2
 80008d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80008d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80008dc:	429a      	cmp	r2, r3
 80008de:	d103      	bne.n	80008e8 <strncmp+0x1c>
 80008e0:	42a0      	cmp	r0, r4
 80008e2:	d001      	beq.n	80008e8 <strncmp+0x1c>
 80008e4:	2a00      	cmp	r2, #0
 80008e6:	d1f5      	bne.n	80008d4 <strncmp+0x8>
 80008e8:	1ad0      	subs	r0, r2, r3
 80008ea:	bd10      	pop	{r4, pc}
 80008ec:	4610      	mov	r0, r2
 80008ee:	e7fc      	b.n	80008ea <strncmp+0x1e>

080008f0 <_sbrk_r>:
 80008f0:	b538      	push	{r3, r4, r5, lr}
 80008f2:	4d06      	ldr	r5, [pc, #24]	; (800090c <_sbrk_r+0x1c>)
 80008f4:	2300      	movs	r3, #0
 80008f6:	4604      	mov	r4, r0
 80008f8:	4608      	mov	r0, r1
 80008fa:	602b      	str	r3, [r5, #0]
 80008fc:	f7ff fed2 	bl	80006a4 <_sbrk>
 8000900:	1c43      	adds	r3, r0, #1
 8000902:	d102      	bne.n	800090a <_sbrk_r+0x1a>
 8000904:	682b      	ldr	r3, [r5, #0]
 8000906:	b103      	cbz	r3, 800090a <_sbrk_r+0x1a>
 8000908:	6023      	str	r3, [r4, #0]
 800090a:	bd38      	pop	{r3, r4, r5, pc}
 800090c:	200001fc 	.word	0x200001fc

08000910 <__errno>:
 8000910:	4b01      	ldr	r3, [pc, #4]	; (8000918 <__errno+0x8>)
 8000912:	6818      	ldr	r0, [r3, #0]
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	20000094 	.word	0x20000094

0800091c <__libc_init_array>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	4d0d      	ldr	r5, [pc, #52]	; (8000954 <__libc_init_array+0x38>)
 8000920:	4c0d      	ldr	r4, [pc, #52]	; (8000958 <__libc_init_array+0x3c>)
 8000922:	1b64      	subs	r4, r4, r5
 8000924:	10a4      	asrs	r4, r4, #2
 8000926:	2600      	movs	r6, #0
 8000928:	42a6      	cmp	r6, r4
 800092a:	d109      	bne.n	8000940 <__libc_init_array+0x24>
 800092c:	4d0b      	ldr	r5, [pc, #44]	; (800095c <__libc_init_array+0x40>)
 800092e:	4c0c      	ldr	r4, [pc, #48]	; (8000960 <__libc_init_array+0x44>)
 8000930:	f000 f81a 	bl	8000968 <_init>
 8000934:	1b64      	subs	r4, r4, r5
 8000936:	10a4      	asrs	r4, r4, #2
 8000938:	2600      	movs	r6, #0
 800093a:	42a6      	cmp	r6, r4
 800093c:	d105      	bne.n	800094a <__libc_init_array+0x2e>
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f855 3b04 	ldr.w	r3, [r5], #4
 8000944:	4798      	blx	r3
 8000946:	3601      	adds	r6, #1
 8000948:	e7ee      	b.n	8000928 <__libc_init_array+0xc>
 800094a:	f855 3b04 	ldr.w	r3, [r5], #4
 800094e:	4798      	blx	r3
 8000950:	3601      	adds	r6, #1
 8000952:	e7f2      	b.n	800093a <__libc_init_array+0x1e>
 8000954:	08000988 	.word	0x08000988
 8000958:	08000988 	.word	0x08000988
 800095c:	08000988 	.word	0x08000988
 8000960:	0800098c 	.word	0x0800098c

08000964 <__retarget_lock_acquire_recursive>:
 8000964:	4770      	bx	lr

08000966 <__retarget_lock_release_recursive>:
 8000966:	4770      	bx	lr

08000968 <_init>:
 8000968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096a:	bf00      	nop
 800096c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800096e:	bc08      	pop	{r3}
 8000970:	469e      	mov	lr, r3
 8000972:	4770      	bx	lr

08000974 <_fini>:
 8000974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000976:	bf00      	nop
 8000978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800097a:	bc08      	pop	{r3}
 800097c:	469e      	mov	lr, r3
 800097e:	4770      	bx	lr
