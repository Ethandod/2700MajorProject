
Timer Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000554  0800055c  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000554  08000554  0001055c  2**0
                  CONTENTS
  4 .ARM          00000000  08000554  08000554  0001055c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000554  0800055c  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000554  08000554  00010554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000558  08000558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001055c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001055c  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001055c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001058c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c3c  00000000  00000000  000105cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000036f  00000000  00000000  0001120b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000e0  00000000  00000000  00011580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000099  00000000  00000000  00011660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014f0d  00000000  00000000  000116f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000c7e  00000000  00000000  00026606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000729c2  00000000  00000000  00027284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000274  00000000  00000000  00099c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00099ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800053c 	.word	0x0800053c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800053c 	.word	0x0800053c

080001d4 <enableLEDs>:
#include <stddef.h>
#include "stm32f303xc.h"
#include "timer.h"

void enableLEDs()
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 80001da:	4b09      	ldr	r3, [pc, #36]	; (8000200 <enableLEDs+0x2c>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	4a08      	ldr	r2, [pc, #32]	; (8000200 <enableLEDs+0x2c>)
 80001e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e4:	6153      	str	r3, [r2, #20]

	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80001e6:	4b07      	ldr	r3, [pc, #28]	; (8000204 <enableLEDs+0x30>)
 80001e8:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f245 5255 	movw	r2, #21845	; 0x5555
 80001f0:	801a      	strh	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40021000 	.word	0x40021000
 8000204:	48001002 	.word	0x48001002

08000208 <toggleLEDs>:

void toggleLEDs() {
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
	*(((uint8_t*)&(GPIOE->ODR)) + 1) = ~(*(((uint8_t*)&(GPIOE->ODR)) + 1));
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <toggleLEDs+0x1c>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <toggleLEDs+0x1c>)
 8000212:	43db      	mvns	r3, r3
 8000214:	b2db      	uxtb	r3, r3
 8000216:	7013      	strb	r3, [r2, #0]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	48001015 	.word	0x48001015

08000228 <timer_callback>:

void timer_callback(void){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	toggleLEDs();
 800022c:	f7ff ffec 	bl	8000208 <toggleLEDs>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}

08000234 <main>:


int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	timerInitialise();
 8000238:	f000 f854 	bl	80002e4 <timerInitialise>
	enableLEDs();
 800023c:	f7ff ffca 	bl	80001d4 <enableLEDs>
	toggleLEDs();
 8000240:	f7ff ffe2 	bl	8000208 <toggleLEDs>
 
	//setDelayLoop(5000, &timer_callback);
	setDelay(5000, &timer_callback);
 8000244:	4902      	ldr	r1, [pc, #8]	; (8000250 <main+0x1c>)
 8000246:	f241 3088 	movw	r0, #5000	; 0x1388
 800024a:	f000 f913 	bl	8000474 <setDelay>
	while(1)
 800024e:	e7fe      	b.n	800024e <main+0x1a>
 8000250:	08000229 	.word	0x08000229

08000254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	2b00      	cmp	r3, #0
 8000264:	db0b      	blt.n	800027e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	f003 021f 	and.w	r2, r3, #31
 800026c:	4907      	ldr	r1, [pc, #28]	; (800028c <__NVIC_EnableIRQ+0x38>)
 800026e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000272:	095b      	lsrs	r3, r3, #5
 8000274:	2001      	movs	r0, #1
 8000276:	fa00 f202 	lsl.w	r2, r0, r2
 800027a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e100 	.word	0xe000e100

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	db0a      	blt.n	80002ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <__NVIC_SetPriority+0x4c>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	440b      	add	r3, r1
 80002b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b8:	e00a      	b.n	80002d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <__NVIC_SetPriority+0x50>)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	3b04      	subs	r3, #4
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	440b      	add	r3, r1
 80002ce:	761a      	strb	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <timerInitialise>:
//  Variable definitions
void (*callback_ptr)(void) = NULL;
bool is_loop = NULL;

void timerInitialise()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	// Enable appropriate functions
	enableTimer();
 80002e8:	f000 f804 	bl	80002f4 <enableTimer>
	enableInterrupts();
 80002ec:	f000 f838 	bl	8000360 <enableInterrupts>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <enableTimer>:

void enableTimer()
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	// Enable the clock for Timer 2
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <enableTimer+0x40>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <enableTimer+0x40>)
 80002fe:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000302:	6153      	str	r3, [r2, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <enableTimer+0x40>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <enableTimer+0x40>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = 0x1F3F; // 7999
 8000310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000314:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000318:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->CR1 |= TIM_CR1_CEN;
 800031a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]
	triggerPrescaler();
 800032a:	f000 f805 	bl	8000338 <triggerPrescaler>
}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000

08000338 <triggerPrescaler>:

// Pre-scaler updates only upon "events" so this triggers an overflow
void triggerPrescaler()
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	TIM2->ARR = 0x01;
 800033c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000340:	2201      	movs	r2, #1
 8000342:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT = 0x00;
 8000344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000348:	2200      	movs	r2, #0
 800034a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = 0xFFFFFFFF;
 800034c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000350:	f04f 32ff 	mov.w	r2, #4294967295
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <enableInterrupts>:

void enableInterrupts()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000364:	b672      	cpsid	i
}
 8000366:	bf00      	nop
	__disable_irq();

    // Enable the update interrupt
	TIM2->CR1 |=
    TIM2->DIER |= TIM_DIER_UIE;
 8000368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |=
 8000378:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800037c:	6812      	ldr	r2, [r2, #0]
 800037e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000382:	4313      	orrs	r3, r2
 8000384:	600b      	str	r3, [r1, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(TIM2_IRQn, 1);
 8000386:	2101      	movs	r1, #1
 8000388:	201c      	movs	r0, #28
 800038a:	f7ff ff81 	bl	8000290 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800038e:	201c      	movs	r0, #28
 8000390:	f7ff ff60 	bl	8000254 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000394:	b662      	cpsie	i
}
 8000396:	bf00      	nop

	__enable_irq();
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <TIM2_IRQHandler>:

void TIM2_IRQHandler()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	if ((TIM2->SR & TIM_SR_UIF) != 0) {
 80003a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	f003 0301 	and.w	r3, r3, #1
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <TIM2_IRQHandler+0x16>
		timerHandler();
 80003ae:	f000 f803 	bl	80003b8 <timerHandler>
	}
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <timerHandler>:

void timerHandler() {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
    TIM2->SR &= ~TIM_SR_UIF;
 80003bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003c6:	f023 0301 	bic.w	r3, r3, #1
 80003ca:	6113      	str	r3, [r2, #16]
	if (callback_ptr == NULL) {
 80003cc:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <timerHandler+0x50>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d102      	bne.n	80003da <timerHandler+0x22>
		stopTimer();
 80003d4:	f000 f83a 	bl	800044c <stopTimer>
		return;
 80003d8:	e014      	b.n	8000404 <timerHandler+0x4c>
	}
	if (is_loop) {
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <timerHandler+0x54>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <timerHandler+0x32>
		callback_ptr();
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <timerHandler+0x50>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4798      	blx	r3
		return;
 80003e8:	e00c      	b.n	8000404 <timerHandler+0x4c>
	}
	if (!is_loop){
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <timerHandler+0x54>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	f083 0301 	eor.w	r3, r3, #1
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d005      	beq.n	8000404 <timerHandler+0x4c>
		stopTimer();
 80003f8:	f000 f828 	bl	800044c <stopTimer>
		callback_ptr();
 80003fc:	4b02      	ldr	r3, [pc, #8]	; (8000408 <timerHandler+0x50>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4798      	blx	r3
		return;
 8000402:	bf00      	nop
	}
}
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	2000001c 	.word	0x2000001c
 800040c:	20000020 	.word	0x20000020

08000410 <resetTimer>:
uint32_t get_delay()
{
    return TIM2->ARR;
}

void resetTimer(uint32_t delay_ms) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	stopTimer();
 8000418:	f000 f818 	bl	800044c <stopTimer>
    TIM2->ARR = delay_ms;
 800041c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;
 8000424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~TIM_SR_UIF;
 8000434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000438:	691b      	ldr	r3, [r3, #16]
 800043a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043e:	f023 0301 	bic.w	r3, r3, #1
 8000442:	6113      	str	r3, [r2, #16]
}
 8000444:	bf00      	nop
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <stopTimer>:

void stopTimer() {
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045a:	f023 0301 	bic.w	r3, r3, #1
 800045e:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0x00;
 8000460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000464:	2200      	movs	r2, #0
 8000466:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
	...

08000474 <setDelay>:
	callback_ptr = callback;
	is_loop = true;
	resetTimer(delay_ms);
}

void setDelay(uint32_t delay_ms, void (*callback)(void)) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	callback_ptr = callback;
 800047e:	4a06      	ldr	r2, [pc, #24]	; (8000498 <setDelay+0x24>)
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	6013      	str	r3, [r2, #0]
	is_loop = false;
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <setDelay+0x28>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
	resetTimer(delay_ms);
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f7ff ffc0 	bl	8000410 <resetTimer>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000001c 	.word	0x2000001c
 800049c:	20000020 	.word	0x20000020

080004a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a8:	480c      	ldr	r0, [pc, #48]	; (80004dc <LoopForever+0x6>)
  ldr r1, =_edata
 80004aa:	490d      	ldr	r1, [pc, #52]	; (80004e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <LoopForever+0xe>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b0:	e002      	b.n	80004b8 <LoopCopyDataInit>

080004b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b6:	3304      	adds	r3, #4

080004b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004bc:	d3f9      	bcc.n	80004b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004be:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c0:	4c0a      	ldr	r4, [pc, #40]	; (80004ec <LoopForever+0x16>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c4:	e001      	b.n	80004ca <LoopFillZerobss>

080004c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c8:	3204      	adds	r2, #4

080004ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004cc:	d3fb      	bcc.n	80004c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ce:	f000 f811 	bl	80004f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d2:	f7ff feaf 	bl	8000234 <main>

080004d6 <LoopForever>:

LoopForever:
  b LoopForever
 80004d6:	e7fe      	b.n	80004d6 <LoopForever>
  ldr   r0, =_estack
 80004d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004e4:	0800055c 	.word	0x0800055c
  ldr r2, =_sbss
 80004e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004ec:	20000024 	.word	0x20000024

080004f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC1_2_IRQHandler>
	...

080004f4 <__libc_init_array>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	4d0d      	ldr	r5, [pc, #52]	; (800052c <__libc_init_array+0x38>)
 80004f8:	4c0d      	ldr	r4, [pc, #52]	; (8000530 <__libc_init_array+0x3c>)
 80004fa:	1b64      	subs	r4, r4, r5
 80004fc:	10a4      	asrs	r4, r4, #2
 80004fe:	2600      	movs	r6, #0
 8000500:	42a6      	cmp	r6, r4
 8000502:	d109      	bne.n	8000518 <__libc_init_array+0x24>
 8000504:	4d0b      	ldr	r5, [pc, #44]	; (8000534 <__libc_init_array+0x40>)
 8000506:	4c0c      	ldr	r4, [pc, #48]	; (8000538 <__libc_init_array+0x44>)
 8000508:	f000 f818 	bl	800053c <_init>
 800050c:	1b64      	subs	r4, r4, r5
 800050e:	10a4      	asrs	r4, r4, #2
 8000510:	2600      	movs	r6, #0
 8000512:	42a6      	cmp	r6, r4
 8000514:	d105      	bne.n	8000522 <__libc_init_array+0x2e>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	f855 3b04 	ldr.w	r3, [r5], #4
 800051c:	4798      	blx	r3
 800051e:	3601      	adds	r6, #1
 8000520:	e7ee      	b.n	8000500 <__libc_init_array+0xc>
 8000522:	f855 3b04 	ldr.w	r3, [r5], #4
 8000526:	4798      	blx	r3
 8000528:	3601      	adds	r6, #1
 800052a:	e7f2      	b.n	8000512 <__libc_init_array+0x1e>
 800052c:	08000554 	.word	0x08000554
 8000530:	08000554 	.word	0x08000554
 8000534:	08000554 	.word	0x08000554
 8000538:	08000558 	.word	0x08000558

0800053c <_init>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr

08000548 <_fini>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr
