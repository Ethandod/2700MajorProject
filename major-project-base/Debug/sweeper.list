
sweeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a080  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800a210  0800a210  0001a210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c0  0800a4c0  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a4c0  0800a4c0  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a4c0  0800a4c0  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4c0  0800a4c0  0001a4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4c4  0800a4c4  0001a4c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800a4c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          00000854  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000092c  2000092c  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001af24  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004055  00000000  00000000  0003b06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001738  00000000  00000000  0003f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011e2  00000000  00000000  00040800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021ac5  00000000  00000000  000419e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 19 .debug_line   0001f15e  00000000  00000000  000634a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4c16  00000000  00000000  00082605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a28  00000000  00000000  0014721c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0014dc44  2**0
=======
 19 .debug_line   0001e4ec  00000000  00000000  000634a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4c28  00000000  00000000  00081993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006a28  00000000  00000000  001465bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  0014cfe4  2**0
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1f8 	.word	0x0800a1f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800a1f8 	.word	0x0800a1f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <checkStop>:
void (*stopGame)();

char green[] = "green";
char red[] = "red";

void checkStop(volatile uint8_t* string_buffer, uint32_t size) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
	if (strncmp("stop", (char*)string_buffer, 4) == 0) {
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <checkStop+0x28>)
<<<<<<< HEAD
 8000bbc:	f007 fefa 	bl	80089b4 <strncmp>
=======
 8000bbc:	f007 fef2 	bl	80089a4 <strncmp>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <checkStop+0x20>
		stopGame();
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <checkStop+0x2c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4798      	blx	r3
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	0800a210 	.word	0x0800a210
 8000bd8:	200000f4 	.word	0x200000f4

08000bdc <laptopInterfaceInitialise>:

void laptopInterfaceInitialise(void (*stopGameFunction)()) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	stopGame = stopGameFunction;
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <laptopInterfaceInitialise+0x24>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
	serialInitialise(10, BAUD_115200, &USART1_PORT, &checkStop);
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <laptopInterfaceInitialise+0x28>)
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <laptopInterfaceInitialise+0x2c>)
 8000bee:	2104      	movs	r1, #4
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f001 f879 	bl	8001ce8 <serialInitialise>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000f4 	.word	0x200000f4
 8000c04:	08000bad 	.word	0x08000bad
 8000c08:	2000000c 	.word	0x2000000c

08000c0c <setLaptopGreen>:

void setLaptopGreen() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	 volatile uint8_t* ptr = (volatile uint8_t*) green;
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <setLaptopGreen+0x1c>)
 8000c14:	607b      	str	r3, [r7, #4]
	 serialTransmitString(ptr, &USART1_PORT);
 8000c16:	4905      	ldr	r1, [pc, #20]	; (8000c2c <setLaptopGreen+0x20>)
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f001 f9de 	bl	8001fda <serialTransmitString>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	2000000c 	.word	0x2000000c

08000c30 <setLaptopRed>:

void setLaptopRed() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	 volatile uint8_t* ptr = (volatile uint8_t*) red;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <setLaptopRed+0x1c>)
 8000c38:	607b      	str	r3, [r7, #4]
	 serialTransmitString(ptr, &USART1_PORT);
 8000c3a:	4905      	ldr	r1, [pc, #20]	; (8000c50 <setLaptopRed+0x20>)
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f001 f9cc 	bl	8001fda <serialTransmitString>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	2000000c 	.word	0x2000000c

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <enable_interrupt>:
// set a default value of NULL so that it won't be called until the
// function pointer is defined
static void (*on_button_press)() = 0x00;

void enable_interrupt()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce8:	b672      	cpsid	i
}
 8000cea:	bf00      	nop
    __disable_irq();

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <enable_interrupt+0x4c>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <enable_interrupt+0x4c>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6193      	str	r3, [r2, #24]

    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <enable_interrupt+0x50>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]

    EXTI->RTSR |= EXTI_RTSR_TR0;
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <enable_interrupt+0x54>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <enable_interrupt+0x54>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <enable_interrupt+0x54>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <enable_interrupt+0x54>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(EXTI0_IRQn, -1);
 8000d16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1a:	2006      	movs	r0, #6
 8000d1c:	f7ff ffb8 	bl	8000c90 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000d20:	2006      	movs	r0, #6
 8000d22:	f7ff ff97 	bl	8000c54 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d26:	b662      	cpsie	i
}
 8000d28:	bf00      	nop

    __enable_irq();
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010400 	.word	0x40010400

08000d3c <initButtonHandler>:

void initButtonHandler(ButtonPressCallback callback)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    on_button_press = callback;
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <initButtonHandler+0x1c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000f8 	.word	0x200000f8

08000d5c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
    // run the button press handler (make sure it is not null first !)
    if (on_button_press != 0x00)
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <EXTI0_IRQHandler+0x24>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d002      	beq.n	8000d6e <EXTI0_IRQHandler+0x12>
    {
        on_button_press();
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <EXTI0_IRQHandler+0x24>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4798      	blx	r3
    }

    // reset the interrupt (so it doesn't keep firing until the next trigger)
    EXTI->PR |= EXTI_PR_PR0;
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <EXTI0_IRQHandler+0x28>)
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <EXTI0_IRQHandler+0x28>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6153      	str	r3, [r2, #20]
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000f8 	.word	0x200000f8
 8000d84:	40010400 	.word	0x40010400

08000d88 <calcsin>:

#define PI 3.1415926


void calcsin (int val)
{
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<100; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	e045      	b.n	8000e22 <calcsin+0x9a>
	{
		sine_val[i] = val * ((sin(i*2*PI/100) + 1)*(4096/2));
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff fbbc 	bl	8000514 <__aeabi_i2d>
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	460d      	mov	r5, r1
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fbb5 	bl	8000514 <__aeabi_i2d>
 8000daa:	a327      	add	r3, pc, #156	; (adr r3, 8000e48 <calcsin+0xc0>)
 8000dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db0:	f7ff fc1a 	bl	80005e8 <__aeabi_dmul>
 8000db4:	4602      	mov	r2, r0
 8000db6:	460b      	mov	r3, r1
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <calcsin+0xb0>)
 8000dc2:	f7ff fd3b 	bl	800083c <__aeabi_ddiv>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	ec43 2b17 	vmov	d7, r2, r3
 8000dce:	eeb0 0a47 	vmov.f32	s0, s14
 8000dd2:	eef0 0a67 	vmov.f32	s1, s15
 8000dd6:	f008 f9cf 	bl	8009178 <sin>
 8000dda:	ec51 0b10 	vmov	r0, r1, d0
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <calcsin+0xb4>)
 8000de4:	f7ff fa4a 	bl	800027c <__adddf3>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <calcsin+0xb8>)
 8000df6:	f7ff fbf7 	bl	80005e8 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4620      	mov	r0, r4
 8000e00:	4629      	mov	r1, r5
 8000e02:	f7ff fbf1 	bl	80005e8 <__aeabi_dmul>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff fead 	bl	8000b6c <__aeabi_d2uiz>
 8000e12:	4602      	mov	r2, r0
 8000e14:	490b      	ldr	r1, [pc, #44]	; (8000e44 <calcsin+0xbc>)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2b63      	cmp	r3, #99	; 0x63
 8000e26:	ddb6      	ble.n	8000d96 <calcsin+0xe>
	}
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	f3af 8000 	nop.w
 8000e38:	40590000 	.word	0x40590000
 8000e3c:	3ff00000 	.word	0x3ff00000
 8000e40:	40a00000 	.word	0x40a00000
 8000e44:	20000100 	.word	0x20000100
 8000e48:	4d12d84a 	.word	0x4d12d84a
 8000e4c:	400921fb 	.word	0x400921fb

08000e50 <get_buzzer>:

uint32_t get_buzzer()
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	return val;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <get_buzzer+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200000fc 	.word	0x200000fc

08000e68 <toggleBuzzer>:

void toggleBuzzer(DAC_HandleTypeDef hdac1){
 8000e68:	b084      	sub	sp, #16
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af02      	add	r7, sp, #8
 8000e70:	f107 0c08 	add.w	ip, r7, #8
 8000e74:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (!val)
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <toggleBuzzer+0x50>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d103      	bne.n	8000e88 <toggleBuzzer+0x20>
	{
		val = 1;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <toggleBuzzer+0x50>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	e002      	b.n	8000e8e <toggleBuzzer+0x26>
	}
	else
	{
		val = 0;
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <toggleBuzzer+0x50>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
	}

	calcsin(val);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <toggleBuzzer+0x50>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff78 	bl	8000d88 <calcsin>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2364      	movs	r3, #100	; 0x64
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <toggleBuzzer+0x54>)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	f002 ffef 	bl	8003e88 <HAL_DAC_Start_DMA>
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eb2:	b004      	add	sp, #16
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	200000fc 	.word	0x200000fc
 8000ebc:	20000100 	.word	0x20000100

08000ec0 <set_pan>:
{
	return pan.position;
}

uint8_t set_pan(uint16_t pwmVal)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
	if (pwmVal < 0 || pwmVal > 2000)
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000ed0:	d901      	bls.n	8000ed6 <set_pan+0x16>
	{
		return 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e008      	b.n	8000ee8 <set_pan+0x28>
	}

	pan.position = pwmVal;
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <set_pan+0x34>)
 8000ed8:	88fb      	ldrh	r3, [r7, #6]
 8000eda:	8093      	strh	r3, [r2, #4]
	pan.controlTimer->Instance->CCR2 = pwmVal;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <set_pan+0x34>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	88fa      	ldrh	r2, [r7, #6]
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38
	return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	20000290 	.word	0x20000290

08000ef8 <set_tilt>:

uint8_t set_tilt(uint16_t pwmVal)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	80fb      	strh	r3, [r7, #6]
	if (pwmVal < 0 || pwmVal > 2000)
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f08:	d901      	bls.n	8000f0e <set_tilt+0x16>
	{
		return 1;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e008      	b.n	8000f20 <set_tilt+0x28>
	}

	tilt.position = pwmVal;
 8000f0e:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <set_tilt+0x34>)
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	8093      	strh	r3, [r2, #4]
	tilt.controlTimer->Instance->CCR1 = pwmVal;
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <set_tilt+0x34>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	88fa      	ldrh	r2, [r7, #6]
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34
	return 0;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	20000298 	.word	0x20000298

08000f30 <transfer_array_data>:

void transfer_array_data(uint16_t *sourceArray, uint16_t *targetArray, uint16_t elements)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	80fb      	strh	r3, [r7, #6]
	for(int c = 0; c < elements;c++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	e00c      	b.n	8000f5e <transfer_array_data+0x2e>
	{
		targetArray[c] = sourceArray[c];
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	441a      	add	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	440b      	add	r3, r1
 8000f54:	8812      	ldrh	r2, [r2, #0]
 8000f56:	801a      	strh	r2, [r3, #0]
	for(int c = 0; c < elements;c++)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	dbee      	blt.n	8000f44 <transfer_array_data+0x14>
	}
	return;
 8000f66:	bf00      	nop
}
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <setup_sweeper>:

void setup_sweeper(I2C_HandleTypeDef *hi2c1, SPI_HandleTypeDef *hspi1, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, PCD_HandleTypeDef *hpcd_USB_FS)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
	// enable clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <setup_sweeper+0x7c>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a1a      	ldr	r2, [pc, #104]	; (8000ff0 <setup_sweeper+0x7c>)
 8000f88:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000f8c:	6153      	str	r3, [r2, #20]

	//SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);

	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	6838      	ldr	r0, [r7, #0]
 8000f92:	f005 ff6b 	bl	8006e6c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8000f96:	2104      	movs	r1, #4
 8000f98:	6838      	ldr	r0, [r7, #0]
 8000f9a:	f005 ff67 	bl	8006e6c <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(htim1, TIM_CHANNEL_1);
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f006 f8c5 	bl	8007130 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000fa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000faa:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fbe:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(hi2c1);
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 fde9 	bl	8001b98 <initialise_ptu_i2c>
//	uint8_t reset_value = 0x00;
//	return_value = HAL_I2C_Mem_Write(hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);


	// set the servos to their starting positions
	pan.controlTimer = htim2;
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <setup_sweeper+0x80>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6013      	str	r3, [r2, #0]
	tilt.controlTimer = htim2;
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <setup_sweeper+0x84>)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	6013      	str	r3, [r2, #0]

	set_pan(STARTING_OFFSET_HORI);
 8000fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd6:	f7ff ff73 	bl	8000ec0 <set_pan>
	set_tilt(STARTING_OFFSET_VERT);
 8000fda:	f240 50aa 	movw	r0, #1450	; 0x5aa
 8000fde:	f7ff ff8b 	bl	8000ef8 <set_tilt>

	HAL_Delay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f001 fd2e 	bl	8002a44 <HAL_Delay>


}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	20000290 	.word	0x20000290
 8000ff8:	20000298 	.word	0x20000298

08000ffc <sweep>:

void sweep(uint16_t *previousReadings, uint16_t *output, void (*callback)())
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b09c      	sub	sp, #112	; 0x70
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
	uint16_t step_increment = DEGREES_PER_STEP * PWM_PER_DEGREE;
 8001008:	230b      	movs	r3, #11
 800100a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t starting_pwm = STARTING_OFFSET_HORI - (step_increment * READINGS_PER_SWEEP) / 2;
 800100e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001012:	461a      	mov	r2, r3
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001020:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t finishing_pwm = STARTING_OFFSET_HORI + (step_increment * READINGS_PER_SWEEP) / 2;
 8001024:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001028:	461a      	mov	r2, r3
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	b29b      	uxth	r3, r3
 8001032:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001036:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

	// OPERATIONAL
	uint16_t current_pwm;
	uint8_t string_to_send[64];
	uint16_t delta;
	uint8_t thresholdBreachCount = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	// set the servos to the starting position
	//SerialOutputString("############\r\n", &USART1_PORT);
	set_tilt(STARTING_OFFSET_VERT);
 8001040:	f240 50aa 	movw	r0, #1450	; 0x5aa
 8001044:	f7ff ff58 	bl	8000ef8 <set_tilt>
	set_pan(starting_pwm);
 8001048:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff37 	bl	8000ec0 <set_pan>
	HAL_Delay(DEGREE_TRAVERSE_MS * DEGREES_OF_SWEEP * RESET_DELAY_FACTOR);
 8001052:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8001056:	f001 fcf5 	bl	8002a44 <HAL_Delay>

//	sprintf(string_to_send, "---{%hu}---\r\n", previousReadings[READINGS_PER_SWEEP - 1]);
//	SerialOutputString(string_to_send, &USART1_PORT);


	for(int i = 1; i < READINGS_PER_SWEEP; i++) // DO NOT CHANGE i TO 0, ITS A COCONUT.png situation
 800105a:	2301      	movs	r3, #1
 800105c:	663b      	str	r3, [r7, #96]	; 0x60
 800105e:	e069      	b.n	8001134 <sweep+0x138>
	{
		current_pwm = starting_pwm + step_increment * i;
 8001060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001062:	b29b      	uxth	r3, r3
 8001064:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001068:	fb12 f303 	smulbb	r3, r2, r3
 800106c:	b29a      	uxth	r2, r3
 800106e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001072:	4413      	add	r3, r2
 8001074:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

		set_pan(current_pwm);
 8001078:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff1f 	bl	8000ec0 <set_pan>

		HAL_Delay(DEGREE_TRAVERSE_MS * DEGREES_PER_STEP * SWEEP_DELAY_FACTOR);
 8001082:	200f      	movs	r0, #15
 8001084:	f001 fcde 	bl	8002a44 <HAL_Delay>
		output[i] = last_period;
 8001088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	4413      	add	r3, r2
 8001090:	4a2b      	ldr	r2, [pc, #172]	; (8001140 <sweep+0x144>)
 8001092:	8812      	ldrh	r2, [r2, #0]
 8001094:	801a      	strh	r2, [r3, #0]

		if (previousReadings != NULL)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d035      	beq.n	8001108 <sweep+0x10c>
		{
			delta = abs(output[i]-previousReadings[i]);
 800109c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	4413      	add	r3, r2
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	1acb      	subs	r3, r1, r3
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	bfb8      	it	lt
 80010b8:	425b      	neglt	r3, r3
 80010ba:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

			sprintf(string_to_send, "[%hu] : {%hu vs %hu} --> [%hu]\r\n",i, output[i], previousReadings[i], delta);
 80010be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	4413      	add	r3, r2
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80010da:	f107 0014 	add.w	r0, r7, #20
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	460b      	mov	r3, r1
 80010e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010e6:	4917      	ldr	r1, [pc, #92]	; (8001144 <sweep+0x148>)
 80010e8:	f007 fc3c 	bl	8008964 <siprintf>
			//SerialOutputString(string_to_send, &USART1_PORT);

			if (delta > THRESHOLD_VALUE)
 80010ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80010f0:	2b64      	cmp	r3, #100	; 0x64
 80010f2:	d905      	bls.n	8001100 <sweep+0x104>
			{
				thresholdBreachCount++;
 80010f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010f8:	3301      	adds	r3, #1
 80010fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80010fe:	e00f      	b.n	8001120 <sweep+0x124>
			}
			else
			{
				thresholdBreachCount = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001106:	e00b      	b.n	8001120 <sweep+0x124>
			}
		}
		else
		{
			sprintf(string_to_send, "{%hu}\r\n", output[i]);
 8001108:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	68ba      	ldr	r2, [r7, #8]
 800110e:	4413      	add	r3, r2
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	490b      	ldr	r1, [pc, #44]	; (8001148 <sweep+0x14c>)
 800111a:	4618      	mov	r0, r3
 800111c:	f007 fc22 	bl	8008964 <siprintf>
			//SerialOutputString(string_to_send, &USART1_PORT);
		}
		if (thresholdBreachCount >= BREACHES)
 8001120:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001124:	2b04      	cmp	r3, #4
 8001126:	d902      	bls.n	800112e <sweep+0x132>
		{
			//SerialOutputString("Breach Limit Reached!!!\r\n", &USART1_PORT);

			callback();
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4798      	blx	r3
 800112c:	e005      	b.n	800113a <sweep+0x13e>
	for(int i = 1; i < READINGS_PER_SWEEP; i++) // DO NOT CHANGE i TO 0, ITS A COCONUT.png situation
 800112e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001130:	3301      	adds	r3, #1
 8001132:	663b      	str	r3, [r7, #96]	; 0x60
 8001134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001136:	2b3b      	cmp	r3, #59	; 0x3b
 8001138:	dd92      	ble.n	8001060 <sweep+0x64>
			return;
		}
	}
}
 800113a:	3768      	adds	r7, #104	; 0x68
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200002a6 	.word	0x200002a6
 8001144:	0800a218 	.word	0x0800a218
 8001148:	0800a23c 	.word	0x0800a23c

0800114c <sweep_routine>:
	}

}

void sweep_routine(void (*callback)())
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0be      	sub	sp, #248	; 0xf8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	uint16_t previousSet[READINGS_PER_SWEEP];
	previousSet[0] = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
//		memcpy(previousSet, currentSet, sizeof(previousSet));
////		omni_sweep(LR, &previousSet, &currentSet);
////		*previousSet = &currentSet;
//	}

	sweep(NULL, &previousSet, callback);
 800115a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4619      	mov	r1, r3
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff ff4a 	bl	8000ffc <sweep>


	while (get_status() == RED)
 8001168:	e00f      	b.n	800118a <sweep_routine+0x3e>
	{
		sweep(&previousSet, &currentSet, callback);
 800116a:	f107 0108 	add.w	r1, r7, #8
 800116e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ff41 	bl	8000ffc <sweep>
		transfer_array_data(&currentSet, &previousSet, READINGS_PER_SWEEP);
 800117a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800117e:	f107 0308 	add.w	r3, r7, #8
 8001182:	223c      	movs	r2, #60	; 0x3c
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fed3 	bl	8000f30 <transfer_array_data>
	while (get_status() == RED)
 800118a:	f001 f9f1 	bl	8002570 <get_status>
 800118e:	4603      	mov	r3, r0
 8001190:	2b02      	cmp	r3, #2
 8001192:	d0ea      	beq.n	800116a <sweep_routine+0x1e>
	}

}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	37f8      	adds	r7, #248	; 0xf8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_TIM_IC_CaptureCallback+0x6c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d127      	bne.n	8001202 <HAL_TIM_IC_CaptureCallback+0x62>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7f1b      	ldrb	r3, [r3, #28]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d123      	bne.n	8001202 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80011ba:	2100      	movs	r1, #0
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f006 fc93 	bl	8007ae8 <HAL_TIM_ReadCapturedValue>
 80011c2:	4603      	mov	r3, r0
 80011c4:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ce:	f003 fb1b 	bl	8004808 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d103      	bne.n	80011e0 <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 80011d8:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x70>)
 80011da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80011dc:	8013      	strh	r3, [r2, #0]
 80011de:	e006      	b.n	80011ee <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x70>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_TIM_IC_CaptureCallback+0x74>)
 80011ec:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x78>)
 80011f0:	881b      	ldrh	r3, [r3, #0]
 80011f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80011fa:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_TIM_IC_CaptureCallback+0x78>)
 80011fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001200:	8013      	strh	r3, [r2, #0]
	}
}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40012c00 	.word	0x40012c00
 8001210:	200002a4 	.word	0x200002a4
 8001214:	200002a6 	.word	0x200002a6
 8001218:	200002a0 	.word	0x200002a0
 800121c:	200002a2 	.word	0x200002a2

08001220 <get_cleaned_pot>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t get_cleaned_pot()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
	uint32_t readValue = Potentiometer_Read();
 8001226:	f000 fca7 	bl	8001b78 <Potentiometer_Read>
 800122a:	4603      	mov	r3, r0
 800122c:	607b      	str	r3, [r7, #4]
	uint32_t delayTime  = readValue / 2.8 + 640;
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff f960 	bl	80004f4 <__aeabi_ui2d>
 8001234:	a30f      	add	r3, pc, #60	; (adr r3, 8001274 <get_cleaned_pot+0x54>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff faff 	bl	800083c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <get_cleaned_pot+0x50>)
 800124c:	f7ff f816 	bl	800027c <__adddf3>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fc88 	bl	8000b6c <__aeabi_d2uiz>
 800125c:	4603      	mov	r3, r0
 800125e:	603b      	str	r3, [r7, #0]
	return delayTime;
 8001260:	683b      	ldr	r3, [r7, #0]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	40840000 	.word	0x40840000
 8001274:	66666666 	.word	0x66666666
 8001278:	40066666 	.word	0x40066666

0800127c <toggleLEDs>:

	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
	*led_output_registers = 0x5555;
}

void toggleLEDs(uint8_t bitmap) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	*(((uint8_t*)&(GPIOE->ODR)) + 1) = (*(((uint8_t*)&(GPIOE->ODR)) + 1)) ^ bitmap;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <toggleLEDs+0x24>)
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	4905      	ldr	r1, [pc, #20]	; (80012a0 <toggleLEDs+0x24>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	4053      	eors	r3, r2
 8001290:	b2db      	uxtb	r3, r3
 8001292:	700b      	strb	r3, [r1, #0]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	48001015 	.word	0x48001015

080012a4 <toggle>:

void toggle(void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	toggleLEDs(0b11111111);
 80012a8:	20ff      	movs	r0, #255	; 0xff
 80012aa:	f7ff ffe7 	bl	800127c <toggleLEDs>
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <enable_clocks>:

void enable_clocks()
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <enable_clocks+0x1c>)
 80012ba:	695b      	ldr	r3, [r3, #20]
 80012bc:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <enable_clocks+0x1c>)
 80012be:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80012c2:	6153      	str	r3, [r2, #20]
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <green_routine>:

void green_routine()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	// set display to be green
	// wait proportional to pot value
	//HAL_Delay(1000);
	// set oneshot timer to end sweep
	//uint32_t readValue = Potentiometer_Read();
	toggle();
 80012d8:	f7ff ffe4 	bl	80012a4 <toggle>
	setLaptopGreen();
 80012dc:	f7ff fc96 	bl	8000c0c <setLaptopGreen>
<<<<<<< HEAD
	setDelay(&DelayTIM4, get_cleaned_pot(), &red_routine);
 80012e0:	f7ff ff9e 	bl	8001220 <get_cleaned_pot>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <green_routine+0x24>)
 80012e8:	4619      	mov	r1, r3
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <green_routine+0x28>)
 80012ec:	f001 fb06 	bl	80028fc <setDelay>
	set_green();
 80012f0:	f001 f956 	bl	80025a0 <set_green>
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
=======
	setDelay(&DelayTIM4, get_cleaned_pot, &red_routine);
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <green_routine+0x20>)
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <green_routine+0x24>)
 80012e4:	4619      	mov	r1, r3
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <green_routine+0x28>)
 80012e8:	f001 fb08 	bl	80028fc <setDelay>
	set_green();
 80012ec:	f001 f958 	bl	80025a0 <set_green>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	08001221 	.word	0x08001221
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 80012f8:	08001301 	.word	0x08001301
 80012fc:	20000068 	.word	0x20000068

08001300 <red_routine>:

void red_routine()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	set_red();
 8001304:	f001 f958 	bl	80025b8 <set_red>
	setLaptopRed();
 8001308:	f7ff fc92 	bl	8000c30 <setLaptopRed>
	// set oneshot timer to end sweep
	//uint32_t readValue = Potentiometer_Read();
//	uint32_t cleanedValue;
//	cleanedValue = (readvalue/4294967296)

	setDelay(&DelayTIM4, 3 * get_cleaned_pot(), &green_routine);
 800130c:	f7ff ff88 	bl	8001220 <get_cleaned_pot>
 8001310:	4602      	mov	r2, r0
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <red_routine+0x2c>)
 800131a:	4619      	mov	r1, r3
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <red_routine+0x30>)
 800131e:	f001 faed 	bl	80028fc <setDelay>
	toggle();
 8001322:	f7ff ffbf 	bl	80012a4 <toggle>

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	080012d5 	.word	0x080012d5
 8001330:	20000068 	.word	0x20000068

08001334 <detected_routine>:

void detected_routine() {
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	stopTimer(&DelayTIM4);
 8001338:	4803      	ldr	r0, [pc, #12]	; (8001348 <detected_routine+0x14>)
 800133a:	f001 fac9 	bl	80028d0 <stopTimer>
	set_detected();
 800133e:	f001 f947 	bl	80025d0 <set_detected>
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000068 	.word	0x20000068

0800134c <finished_routine>:

void finished_routine() {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	stopTimer(&DelayTIM4);
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <finished_routine+0x14>)
 8001352:	f001 fabd 	bl	80028d0 <stopTimer>
	set_finished();
 8001356:	f001 f947 	bl	80025e8 <set_finished>
	return;
 800135a:	bf00      	nop
}
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000068 	.word	0x20000068

08001364 <setup_routine>:



void setup_routine()
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af02      	add	r7, sp, #8
	set_setup();
 800136a:	f001 f90d 	bl	8002588 <set_setup>
	setup_sweeper(&hi2c1, &hspi1, &htim1, &htim2, &hpcd_USB_FS);
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <setup_routine+0x40>)
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <setup_routine+0x44>)
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <setup_routine+0x48>)
 8001376:	490e      	ldr	r1, [pc, #56]	; (80013b0 <setup_routine+0x4c>)
 8001378:	480e      	ldr	r0, [pc, #56]	; (80013b4 <setup_routine+0x50>)
 800137a:	f7ff fdfb 	bl	8000f74 <setup_sweeper>
	timerInitialise(&DelayTIM4);
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <setup_routine+0x54>)
 8001380:	f001 fa1b 	bl	80027ba <timerInitialise>
	HAL_TIM_Base_Start(&htim3);
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <setup_routine+0x58>)
 8001386:	f005 fcb7 	bl	8006cf8 <HAL_TIM_Base_Start>
	laptopInterfaceInitialise(&finished_routine);
 800138a:	480d      	ldr	r0, [pc, #52]	; (80013c0 <setup_routine+0x5c>)
 800138c:	f7ff fc26 	bl	8000bdc <laptopInterfaceInitialise>
	enable_interrupt();
 8001390:	f7ff fca8 	bl	8000ce4 <enable_interrupt>
	enable_clocks();
 8001394:	f7ff ff8e 	bl	80012b4 <enable_clocks>
	initButtonHandler(&green_routine);
 8001398:	480a      	ldr	r0, [pc, #40]	; (80013c4 <setup_routine+0x60>)
 800139a:	f7ff fccf 	bl	8000d3c <initButtonHandler>
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200004ec 	.word	0x200004ec
 80013a8:	20000454 	.word	0x20000454
 80013ac:	20000408 	.word	0x20000408
 80013b0:	200003a4 	.word	0x200003a4
 80013b4:	20000350 	.word	0x20000350
 80013b8:	20000068 	.word	0x20000068
 80013bc:	200004a0 	.word	0x200004a0
 80013c0:	0800134d 	.word	0x0800134d
 80013c4:	080012d5 	.word	0x080012d5

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ce:	f001 fad3 	bl	8002978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d2:	f000 f85d 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d6:	f000 fb4b 	bl	8001a70 <MX_GPIO_Init>
  MX_DMA_Init();
 80013da:	f000 fb2b 	bl	8001a34 <MX_DMA_Init>
  MX_I2C1_Init();
 80013de:	f000 f95f 	bl	80016a0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013e2:	f000 f99d 	bl	8001720 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80013e6:	f000 fb03 	bl	80019f0 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 80013ea:	f000 fa4d 	bl	8001888 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013ee:	f000 f9d5 	bl	800179c <MX_TIM1_Init>
  MX_DAC_Init();
 80013f2:	f000 f923 	bl	800163c <MX_DAC_Init>
  MX_TIM3_Init();
 80013f6:	f000 faad 	bl	8001954 <MX_TIM3_Init>
  MX_ADC1_Init();
 80013fa:	f000 f8af 	bl	800155c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80013fe:	4820      	ldr	r0, [pc, #128]	; (8001480 <main+0xb8>)
 8001400:	f001 fd24 	bl	8002e4c <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */




	setup_routine();
 8001404:	f7ff ffae 	bl	8001364 <setup_routine>
	//toggleBuzzer(hdac);
	while (1) {
		uint32_t readValue = Potentiometer_Read();
 8001408:	f000 fbb6 	bl	8001b78 <Potentiometer_Read>
 800140c:	4603      	mov	r3, r0
 800140e:	607b      	str	r3, [r7, #4]
		switch(get_status()) {
 8001410:	f001 f8ae 	bl	8002570 <get_status>
 8001414:	4603      	mov	r3, r0
 8001416:	2b04      	cmp	r3, #4
 8001418:	d8f6      	bhi.n	8001408 <main+0x40>
 800141a:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <main+0x58>)
 800141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001420:	08001409 	.word	0x08001409
 8001424:	0800145d 	.word	0x0800145d
 8001428:	0800143d 	.word	0x0800143d
 800142c:	08001445 	.word	0x08001445
 8001430:	08001435 	.word	0x08001435
			case FINISHED:
				stopTimer(&DelayTIM4);
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <main+0xbc>)
 8001436:	f001 fa4b 	bl	80028d0 <stopTimer>
				break;
 800143a:	e01f      	b.n	800147c <main+0xb4>
			case SETUP:
				break;
			case RED:
				sweep_routine(&detected_routine);
 800143c:	4812      	ldr	r0, [pc, #72]	; (8001488 <main+0xc0>)
 800143e:	f7ff fe85 	bl	800114c <sweep_routine>
				break;
 8001442:	e01b      	b.n	800147c <main+0xb4>
			case DETECTED:
				if (get_buzzer() == 0)
 8001444:	f7ff fd04 	bl	8000e50 <get_buzzer>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d112      	bne.n	8001474 <main+0xac>
				{
					toggleBuzzer(hdac);
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <main+0xc4>)
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001456:	f7ff fd07 	bl	8000e68 <toggleBuzzer>
				}
				break;
 800145a:	e00b      	b.n	8001474 <main+0xac>
			case GREEN:
				if (get_buzzer() == 1)
 800145c:	f7ff fcf8 	bl	8000e50 <get_buzzer>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <main+0xb0>
				{
					toggleBuzzer(hdac);
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <main+0xc4>)
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800146e:	f7ff fcfb 	bl	8000e68 <toggleBuzzer>
				}
				break;
 8001472:	e001      	b.n	8001478 <main+0xb0>
				break;
 8001474:	bf00      	nop
 8001476:	e7c7      	b.n	8001408 <main+0x40>
				break;
 8001478:	bf00      	nop
 800147a:	e7c5      	b.n	8001408 <main+0x40>
	while (1) {
 800147c:	e7c4      	b.n	8001408 <main+0x40>
 800147e:	bf00      	nop
 8001480:	200002a8 	.word	0x200002a8
 8001484:	20000068 	.word	0x20000068
 8001488:	08001335 	.word	0x08001335
 800148c:	200002f8 	.word	0x200002f8

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09e      	sub	sp, #120	; 0x78
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149a:	2228      	movs	r2, #40	; 0x28
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
<<<<<<< HEAD
 80014a0:	f007 fa80 	bl	80089a4 <memset>
=======
 80014a0:	f007 fa92 	bl	80089c8 <memset>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	223c      	movs	r2, #60	; 0x3c
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
<<<<<<< HEAD
 80014bc:	f007 fa72 	bl	80089a4 <memset>
=======
 80014bc:	f007 fa84 	bl	80089c8 <memset>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014c0:	2303      	movs	r3, #3
 80014c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80014c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ce:	2301      	movs	r3, #1
 80014d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d2:	2310      	movs	r3, #16
 80014d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d6:	2302      	movs	r3, #2
 80014d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80014e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014e4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014ea:	4618      	mov	r0, r3
 80014ec:	f003 ff2e 	bl	800534c <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80014f6:	f000 fb39 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fa:	230f      	movs	r3, #15
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fe:	2302      	movs	r3, #2
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001514:	2101      	movs	r1, #1
 8001516:	4618      	mov	r0, r3
 8001518:	f004 ff56 	bl	80063c8 <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001522:	f000 fb23 	bl	8001b6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <SystemClock_Config+0xc8>)
 8001528:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800152a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001538:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4618      	mov	r0, r3
 8001542:	f005 f927 	bl	8006794 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800154c:	f000 fb0e 	bl	8001b6c <Error_Handler>
  }
}
 8001550:	bf00      	nop
 8001552:	3778      	adds	r7, #120	; 0x78
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	000210a0 	.word	0x000210a0

0800155c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <MX_ADC1_Init+0xdc>)
 8001580:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001584:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <MX_ADC1_Init+0xdc>)
 8001588:	2200      	movs	r2, #0
 800158a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <MX_ADC1_Init+0xdc>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <MX_ADC1_Init+0xdc>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <MX_ADC1_Init+0xdc>)
 800159a:	2201      	movs	r2, #1
 800159c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015c8:	2204      	movs	r2, #4
 80015ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d8:	4817      	ldr	r0, [pc, #92]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015da:	f001 fa57 	bl	8002a8c <HAL_ADC_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80015e4:	f000 fac2 	bl	8001b6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	4811      	ldr	r0, [pc, #68]	; (8001638 <MX_ADC1_Init+0xdc>)
 80015f4:	f002 f93a 	bl	800386c <HAL_ADCEx_MultiModeConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80015fe:	f000 fab5 	bl	8001b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001602:	2309      	movs	r3, #9
 8001604:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001606:	2301      	movs	r3, #1
 8001608:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800160a:	2301      	movs	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <MX_ADC1_Init+0xdc>)
 8001620:	f001 fe3a 	bl	8003298 <HAL_ADC_ConfigChannel>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800162a:	f000 fa9f 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3728      	adds	r7, #40	; 0x28
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	200002a8 	.word	0x200002a8

0800163c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_DAC_Init+0x58>)
 800164e:	4a12      	ldr	r2, [pc, #72]	; (8001698 <MX_DAC_Init+0x5c>)
 8001650:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001652:	4810      	ldr	r0, [pc, #64]	; (8001694 <MX_DAC_Init+0x58>)
 8001654:	f002 fbd7 	bl	8003e06 <HAL_DAC_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 800165e:	f000 fa85 	bl	8001b6c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8001662:	230c      	movs	r3, #12
 8001664:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	4808      	ldr	r0, [pc, #32]	; (8001694 <MX_DAC_Init+0x58>)
 8001672:	f002 fcc5 	bl	8004000 <HAL_DAC_ConfigChannel>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 800167c:	f000 fa76 	bl	8001b6c <Error_Handler>
  }
  __HAL_REMAPTRIGGER_ENABLE(HAL_REMAPTRIGGER_DAC1_TRIG);
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_DAC_Init+0x60>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <MX_DAC_Init+0x60>)
 8001686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800168a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002f8 	.word	0x200002f8
 8001698:	40007400 	.word	0x40007400
 800169c:	40010000 	.word	0x40010000

080016a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <MX_I2C1_Init+0x74>)
 80016a6:	4a1c      	ldr	r2, [pc, #112]	; (8001718 <MX_I2C1_Init+0x78>)
 80016a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <MX_I2C1_Init+0x74>)
 80016ac:	4a1b      	ldr	r2, [pc, #108]	; (800171c <MX_I2C1_Init+0x7c>)
 80016ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <MX_I2C1_Init+0x74>)
 80016b8:	2201      	movs	r2, #1
 80016ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_I2C1_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_I2C1_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_I2C1_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_I2C1_Init+0x74>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_I2C1_Init+0x74>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016da:	480e      	ldr	r0, [pc, #56]	; (8001714 <MX_I2C1_Init+0x74>)
 80016dc:	f003 f8c4 	bl	8004868 <HAL_I2C_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016e6:	f000 fa41 	bl	8001b6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016ea:	2100      	movs	r1, #0
 80016ec:	4809      	ldr	r0, [pc, #36]	; (8001714 <MX_I2C1_Init+0x74>)
 80016ee:	f003 fcc3 	bl	8005078 <HAL_I2CEx_ConfigAnalogFilter>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016f8:	f000 fa38 	bl	8001b6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016fc:	2100      	movs	r1, #0
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_I2C1_Init+0x74>)
 8001700:	f003 fd05 	bl	800510e <HAL_I2CEx_ConfigDigitalFilter>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800170a:	f000 fa2f 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000350 	.word	0x20000350
 8001718:	40005400 	.word	0x40005400
 800171c:	2000090e 	.word	0x2000090e

08001720 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_SPI1_Init+0x74>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <MX_SPI1_Init+0x78>)
 8001728:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_SPI1_Init+0x74>)
 800172c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001730:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_SPI1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_SPI1_Init+0x74>)
 800173a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800173e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_SPI1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001746:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_SPI1_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <MX_SPI1_Init+0x74>)
 800174e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001752:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_SPI1_Init+0x74>)
 8001756:	2208      	movs	r2, #8
 8001758:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800175a:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_SPI1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <MX_SPI1_Init+0x74>)
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <MX_SPI1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800176c:	4b09      	ldr	r3, [pc, #36]	; (8001794 <MX_SPI1_Init+0x74>)
 800176e:	2207      	movs	r2, #7
 8001770:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001772:	4b08      	ldr	r3, [pc, #32]	; (8001794 <MX_SPI1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_SPI1_Init+0x74>)
 800177a:	2208      	movs	r2, #8
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_SPI1_Init+0x74>)
 8001780:	f005 f9b8 	bl	8006af4 <HAL_SPI_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800178a:	f000 f9ef 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200003a4 	.word	0x200003a4
 8001798:	40013000 	.word	0x40013000

0800179c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	; 0x30
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <MX_TIM1_Init+0xe4>)
 80017ca:	4a2e      	ldr	r2, [pc, #184]	; (8001884 <MX_TIM1_Init+0xe8>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <MX_TIM1_Init+0xe4>)
 80017d0:	222f      	movs	r2, #47	; 0x2f
 80017d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <MX_TIM1_Init+0xe4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80017da:	4b29      	ldr	r3, [pc, #164]	; (8001880 <MX_TIM1_Init+0xe4>)
 80017dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b27      	ldr	r3, [pc, #156]	; (8001880 <MX_TIM1_Init+0xe4>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017e8:	4b25      	ldr	r3, [pc, #148]	; (8001880 <MX_TIM1_Init+0xe4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <MX_TIM1_Init+0xe4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017f4:	4822      	ldr	r0, [pc, #136]	; (8001880 <MX_TIM1_Init+0xe4>)
 80017f6:	f005 fa28 	bl	8006c4a <HAL_TIM_Base_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001800:	f000 f9b4 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001808:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	4619      	mov	r1, r3
 8001810:	481b      	ldr	r0, [pc, #108]	; (8001880 <MX_TIM1_Init+0xe4>)
 8001812:	f006 f89f 	bl	8007954 <HAL_TIM_ConfigClockSource>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800181c:	f000 f9a6 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001820:	4817      	ldr	r0, [pc, #92]	; (8001880 <MX_TIM1_Init+0xe4>)
 8001822:	f005 fc23 	bl	800706c <HAL_TIM_IC_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800182c:	f000 f99e 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	480f      	ldr	r0, [pc, #60]	; (8001880 <MX_TIM1_Init+0xe4>)
 8001844:	f006 ff00 	bl	8008648 <HAL_TIMEx_MasterConfigSynchronization>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800184e:	f000 f98d 	bl	8001b6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001852:	230a      	movs	r3, #10
 8001854:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001856:	2301      	movs	r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_TIM1_Init+0xe4>)
 800186a:	f005 fec2 	bl	80075f2 <HAL_TIM_IC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001874:	f000 f97a 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3730      	adds	r7, #48	; 0x30
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000408 	.word	0x20000408
 8001884:	40012c00 	.word	0x40012c00

08001888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188e:	f107 031c 	add.w	r3, r7, #28
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
 80018a8:	615a      	str	r2, [r3, #20]
 80018aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ac:	4b28      	ldr	r3, [pc, #160]	; (8001950 <MX_TIM2_Init+0xc8>)
 80018ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <MX_TIM2_Init+0xc8>)
 80018b6:	222f      	movs	r2, #47	; 0x2f
 80018b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <MX_TIM2_Init+0xc8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80018c0:	4b23      	ldr	r3, [pc, #140]	; (8001950 <MX_TIM2_Init+0xc8>)
 80018c2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80018c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b21      	ldr	r3, [pc, #132]	; (8001950 <MX_TIM2_Init+0xc8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <MX_TIM2_Init+0xc8>)
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018d4:	481e      	ldr	r0, [pc, #120]	; (8001950 <MX_TIM2_Init+0xc8>)
 80018d6:	f005 fa71 	bl	8006dbc <HAL_TIM_PWM_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80018e0:	f000 f944 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4817      	ldr	r0, [pc, #92]	; (8001950 <MX_TIM2_Init+0xc8>)
 80018f4:	f006 fea8 	bl	8008648 <HAL_TIMEx_MasterConfigSynchronization>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80018fe:	f000 f935 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001902:	2360      	movs	r3, #96	; 0x60
 8001904:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8001906:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800190a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	4619      	mov	r1, r3
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_TIM2_Init+0xc8>)
 800191c:	f005 ff06 	bl	800772c <HAL_TIM_PWM_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001926:	f000 f921 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800192a:	463b      	mov	r3, r7
 800192c:	2204      	movs	r2, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4807      	ldr	r0, [pc, #28]	; (8001950 <MX_TIM2_Init+0xc8>)
 8001932:	f005 fefb 	bl	800772c <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 800193c:	f000 f916 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001940:	4803      	ldr	r0, [pc, #12]	; (8001950 <MX_TIM2_Init+0xc8>)
 8001942:	f000 fd53 	bl	80023ec <HAL_TIM_MspPostInit>

}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000454 	.word	0x20000454

08001954 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195a:	f107 0310 	add.w	r3, r7, #16
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001974:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <MX_TIM3_Init+0x98>)
 8001976:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <MX_TIM3_Init+0x94>)
 800197a:	222f      	movs	r2, #47	; 0x2f
 800197c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001986:	2209      	movs	r2, #9
 8001988:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <MX_TIM3_Init+0x94>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001996:	4814      	ldr	r0, [pc, #80]	; (80019e8 <MX_TIM3_Init+0x94>)
 8001998:	f005 f957 	bl	8006c4a <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019a2:	f000 f8e3 	bl	8001b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	4619      	mov	r1, r3
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <MX_TIM3_Init+0x94>)
 80019b4:	f005 ffce 	bl	8007954 <HAL_TIM_ConfigClockSource>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80019be:	f000 f8d5 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019c2:	2320      	movs	r3, #32
 80019c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <MX_TIM3_Init+0x94>)
 80019d0:	f006 fe3a 	bl	8008648 <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80019da:	f000 f8c7 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200004a0 	.word	0x200004a0
 80019ec:	40000400 	.word	0x40000400

080019f0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <MX_USB_PCD_Init+0x3c>)
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <MX_USB_PCD_Init+0x40>)
 80019f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_USB_PCD_Init+0x3c>)
 80019fc:	2208      	movs	r2, #8
 80019fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_USB_PCD_Init+0x3c>)
 8001a02:	2202      	movs	r2, #2
 8001a04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_USB_PCD_Init+0x3c>)
 8001a08:	2202      	movs	r2, #2
 8001a0a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_USB_PCD_Init+0x3c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_USB_PCD_Init+0x3c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_USB_PCD_Init+0x3c>)
 8001a1a:	f003 fbc4 	bl	80051a6 <HAL_PCD_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8001a24:	f000 f8a2 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200004ec 	.word	0x200004ec
 8001a30:	40005c00 	.word	0x40005c00

08001a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MX_DMA_Init+0x38>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <MX_DMA_Init+0x38>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6153      	str	r3, [r2, #20]
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <MX_DMA_Init+0x38>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	200d      	movs	r0, #13
 8001a58:	f002 f99f 	bl	8003d9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a5c:	200d      	movs	r0, #13
 8001a5e:	f002 f9b8 	bl	8003dd2 <HAL_NVIC_EnableIRQ>

}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	4a36      	ldr	r2, [pc, #216]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001a8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a90:	6153      	str	r3, [r2, #20]
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	4a30      	ldr	r2, [pc, #192]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001aa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001aa8:	6153      	str	r3, [r2, #20]
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	4a2a      	ldr	r2, [pc, #168]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001abc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac0:	6153      	str	r3, [r2, #20]
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	4b25      	ldr	r3, [pc, #148]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad8:	6153      	str	r3, [r2, #20]
 8001ada:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6153      	str	r3, [r2, #20]
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <MX_GPIO_Init+0xf4>)
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001afe:	2200      	movs	r2, #0
 8001b00:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001b04:	4818      	ldr	r0, [pc, #96]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001b06:	f002 fe97 	bl	8004838 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001b0a:	2337      	movs	r3, #55	; 0x37
 8001b0c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b0e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4812      	ldr	r0, [pc, #72]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001b20:	f002 fcf8 	bl	8004514 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001b24:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001b28:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480a      	ldr	r0, [pc, #40]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001b3e:	f002 fce9 	bl	8004514 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b42:	2301      	movs	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b58:	f002 fcdc 	bl	8004514 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	; 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	48001000 	.word	0x48001000

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b74:	e7fe      	b.n	8001b74 <Error_Handler+0x8>
	...

08001b78 <Potentiometer_Read>:
//void Potentiometer_Init(void) {
//    HAL_ADC_Start(&hadc1);
//}

// Reads the ADC value for the potentiometer
uint32_t Potentiometer_Read(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
    // Wait for ADC conversion to complete
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8001b7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <Potentiometer_Read+0x1c>)
 8001b82:	f001 fa79 	bl	8003078 <HAL_ADC_PollForConversion>
    // Return the converted value
    return HAL_ADC_GetValue(&hadc1);
 8001b86:	4803      	ldr	r0, [pc, #12]	; (8001b94 <Potentiometer_Read+0x1c>)
 8001b88:	f001 fb78 	bl	800327c <HAL_ADC_GetValue>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200002a8 	.word	0x200002a8

08001b98 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af04      	add	r7, sp, #16
 8001b9e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8001ba8:	230a      	movs	r3, #10
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	2301      	movs	r3, #1
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	f107 030e 	add.w	r3, r7, #14
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	2220      	movs	r2, #32
 8001bba:	21d2      	movs	r1, #210	; 0xd2
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f002 fee3 	bl	8004988 <HAL_I2C_Mem_Write>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8001bca:	230a      	movs	r3, #10
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	f107 030d 	add.w	r3, r7, #13
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	2221      	movs	r2, #33	; 0x21
 8001bdc:	21d2      	movs	r1, #210	; 0xd2
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f002 fed2 	bl	8004988 <HAL_I2C_Mem_Write>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8001be8:	230a      	movs	r3, #10
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	2301      	movs	r3, #1
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	f107 030d 	add.w	r3, r7, #13
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	2222      	movs	r2, #34	; 0x22
 8001bfa:	21d2      	movs	r1, #210	; 0xd2
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f002 fec3 	bl	8004988 <HAL_I2C_Mem_Write>
 8001c02:	4603      	mov	r3, r0
 8001c04:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 8001c06:	2300      	movs	r3, #0
 8001c08:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	9302      	str	r3, [sp, #8]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	21c4      	movs	r1, #196	; 0xc4
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f002 feb2 	bl	8004988 <HAL_I2C_Mem_Write>
 8001c24:	4603      	mov	r3, r0
 8001c26:	73fb      	strb	r3, [r7, #15]
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <__NVIC_EnableIRQ>:
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4907      	ldr	r1, [pc, #28]	; (8001c68 <__NVIC_EnableIRQ+0x38>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000e100 	.word	0xe000e100

08001c6c <__NVIC_SetPriority>:
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	; (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <USART1_IRQHandler>:
		0x00, // default transmit pointer is NULL
		USART1_IRQn, // the specific IRQn for the given USART
		0x00, // default RxCompletedStringFunction is NULL
		};

void USART1_IRQHandler(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	// Catch the interrupt and call the handler with the appropriate USART port
	serialReceiveCharacter(&USART1_PORT);
 8001cc4:	4806      	ldr	r0, [pc, #24]	; (8001ce0 <USART1_IRQHandler+0x20>)
 8001cc6:	f000 f8eb 	bl	8001ea0 <serialReceiveCharacter>
	// Only transmit if transmit interupt is enabled
	if ((USART1->CR1 & USART_CR1_TXEIE) != 0) {
 8001cca:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <USART1_IRQHandler+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <USART1_IRQHandler+0x1c>
		serialTransmitCharacter(&USART1_PORT);
 8001cd6:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <USART1_IRQHandler+0x20>)
 8001cd8:	f000 f94a 	bl	8001f70 <serialTransmitCharacter>
	}
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000000c 	.word	0x2000000c
 8001ce4:	40013800 	.word	0x40013800

08001ce8 <serialInitialise>:

// Initialise a serial port with interrupts
void serialInitialise(uint32_t buffer_size,
					  uint32_t baudRate,
					  SerialPort *serial_port,
					  void (*rxCompletedStringFunction)(volatile uint8_t*, uint32_t)) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
 8001cf4:	603b      	str	r3, [r7, #0]
	// function - pointer to function with inputs pointer to buffer and string length


	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <serialInitialise+0x16c>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	4a56      	ldr	r2, [pc, #344]	; (8001e54 <serialInitialise+0x16c>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d00:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001d02:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <serialInitialise+0x16c>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <serialInitialise+0x16c>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <serialInitialise+0x16c>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	494f      	ldr	r1, [pc, #316]	; (8001e54 <serialInitialise+0x16c>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function and speed to high for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6952      	ldr	r2, [r2, #20]
 8001d24:	601a      	str	r2, [r3, #0]
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6992      	ldr	r2, [r2, #24]
 8001d2e:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69d9      	ldr	r1, [r3, #28]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	6a1a      	ldr	r2, [r3, #32]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a19      	ldr	r1, [r3, #32]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b3e      	ldr	r3, [pc, #248]	; (8001e54 <serialInitialise+0x16c>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	493d      	ldr	r1, [pc, #244]	; (8001e54 <serialInitialise+0x16c>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <serialInitialise+0x16c>)
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	493a      	ldr	r1, [pc, #232]	; (8001e54 <serialInitialise+0x16c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	330c      	adds	r3, #12
 8001d76:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d825      	bhi.n	8001dca <serialInitialise+0xe2>
 8001d7e:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <serialInitialise+0x9c>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001d99 	.word	0x08001d99
 8001d88:	08001da3 	.word	0x08001da3
 8001d8c:	08001dad 	.word	0x08001dad
 8001d90:	08001db7 	.word	0x08001db7
 8001d94:	08001dc1 	.word	0x08001dc1
	case BAUD_9600:
		*baud_rate_config = 0x341 * 6;  // 9600 at 8MHz
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f241 3286 	movw	r2, #4998	; 0x1386
 8001d9e:	801a      	strh	r2, [r3, #0]
		break;
 8001da0:	e013      	b.n	8001dca <serialInitialise+0xe2>
	case BAUD_19200:
		*baud_rate_config = 0x1A1 * 6;  // 19200 at 8MHz
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f640 12c6 	movw	r2, #2502	; 0x9c6
 8001da8:	801a      	strh	r2, [r3, #0]
		break;
 8001daa:	e00e      	b.n	8001dca <serialInitialise+0xe2>
	case BAUD_38400:
		*baud_rate_config = 0xD0 * 6;  // 38400 at 8MHz
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f44f 629c 	mov.w	r2, #1248	; 0x4e0
 8001db2:	801a      	strh	r2, [r3, #0]
		break;
 8001db4:	e009      	b.n	8001dca <serialInitialise+0xe2>
	case BAUD_57600:
		*baud_rate_config = 0x8B * 6;  // 57600 at 8MHz
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f240 3242 	movw	r2, #834	; 0x342
 8001dbc:	801a      	strh	r2, [r3, #0]
		break;
 8001dbe:	e004      	b.n	8001dca <serialInitialise+0xe2>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 6;  // 115200 at 8MHz
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8001dc6:	801a      	strh	r2, [r3, #0]
		break;
 8001dc8:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f042 020d 	orr.w	r2, r2, #13
 8001dd8:	601a      	str	r2, [r3, #0]

	// initialise the double buffer
	serial_port->BufferSize = buffer_size;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
	serial_port->StringBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4618      	mov	r0, r3
 8001de6:	f006 fd09 	bl	80087fc <malloc>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
	serial_port->AlternateStringBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4618      	mov	r0, r3
 8001df8:	f006 fd00 	bl	80087fc <malloc>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	461a      	mov	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

	// set the completion function
	serial_port->RxCompletedStringFunction = rxCompletedStringFunction;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	63da      	str	r2, [r3, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0a:	b672      	cpsid	i
}
 8001e0c:	bf00      	nop

	__disable_irq();

	// enable the rx interrupts, tx interrupts enabled when a string is being tranmitted
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0220 	orr.w	r2, r2, #32
 8001e1c:	601a      	str	r2, [r3, #0]
	serial_port->UART->CR3 |= USART_CR3_EIE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f042 0201 	orr.w	r2, r2, #1
 8001e2c:	609a      	str	r2, [r3, #8]

	// Tell the NVIC module to enable interrupt and set priority
	NVIC_SetPriority(serial_port->UART_IRQn, 4);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	2104      	movs	r1, #4
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff18 	bl	8001c6c <__NVIC_SetPriority>
	NVIC_EnableIRQ(serial_port->UART_IRQn);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fef4 	bl	8001c30 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e48:	b662      	cpsie	i
}
 8001e4a:	bf00      	nop
	__enable_irq();
}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000

08001e58 <setTransmitInterrupt>:

void setTransmitInterrupt(bool set, SerialPort *serial_port) {
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	6039      	str	r1, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
	// Function to enable/disable the transmit interrupt
	__disable_irq();
	if (set) {
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <setTransmitInterrupt+0x28>
		serial_port->UART->CR1 |= USART_CR1_TXEIE;
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e007      	b.n	8001e90 <setTransmitInterrupt+0x38>
	} else {
		serial_port->UART->CR1 &= ~USART_CR1_TXEIE;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e90:	b662      	cpsie	i
}
 8001e92:	bf00      	nop
	}
	__enable_irq();
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <serialReceiveCharacter>:

void serialReceiveCharacter(SerialPort *serial_port) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	// Called when interrupt is activated to receive a character into the buffer
	// When the buffer is full, call the callback function and switch the buffers

	// If byte is received properly
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d04f      	beq.n	8001f56 <serialReceiveCharacter+0xb6>
		(serial_port->UART->ISR & USART_ISR_FE) == 0 &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d148      	bne.n	8001f56 <serialReceiveCharacter+0xb6>
		(serial_port->UART->ISR & USART_ISR_ORE) == 0) {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0308 	and.w	r3, r3, #8
		(serial_port->UART->ISR & USART_ISR_FE) == 0 &&
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d141      	bne.n	8001f56 <serialReceiveCharacter+0xb6>

		// Add the new character to the string buffer
		serial_port->StringBuffer[serial_port->BufferCount] = serial_port->UART->RDR & 0xFF;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001ed8:	b299      	uxth	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
		serial_port->BufferCount++;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	62da      	str	r2, [r3, #44]	; 0x2c

		// if exceeding size limit append 0x00 NULL terminating character
		if (serial_port->BufferCount + 1 == serial_port->BufferSize) {
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d10b      	bne.n	8001f18 <serialReceiveCharacter+0x78>
			serial_port->StringBuffer[serial_port->BufferCount] = 0x00;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f08:	4413      	add	r3, r2
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	701a      	strb	r2, [r3, #0]
			serial_port-> BufferCount++;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		// If terminating character found -> flip the buffers and call the callback function
		if (serial_port->StringBuffer[serial_port->BufferCount - 1] == 0x00){
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	3b01      	subs	r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11d      	bne.n	8001f68 <serialReceiveCharacter+0xc8>
			// Swap the buffers
			volatile uint8_t* temporary_buffer_pointer = serial_port->StringBuffer;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	60fb      	str	r3, [r7, #12]
			serial_port->StringBuffer = serial_port->AlternateStringBuffer;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
			serial_port->AlternateStringBuffer = temporary_buffer_pointer;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28

			// Callback function
			serial_port->RxCompletedStringFunction(temporary_buffer_pointer, serial_port->BufferCount);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f48:	4611      	mov	r1, r2
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	4798      	blx	r3
			serial_port-> BufferCount = 0;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	62da      	str	r2, [r3, #44]	; 0x2c
		if (serial_port->StringBuffer[serial_port->BufferCount - 1] == 0x00){
 8001f54:	e008      	b.n	8001f68 <serialReceiveCharacter+0xc8>
		}
	} else {
		// Clear errors if frame is not received properly
		serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a1a      	ldr	r2, [r3, #32]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 020a 	orr.w	r2, r2, #10
 8001f64:	621a      	str	r2, [r3, #32]

	}
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <serialTransmitCharacter>:

void serialTransmitCharacter(SerialPort *serial_port) {
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	// Called when the interrupt is activated and transmit interrupt is enabled

	// Check whether tx interrupt called the function, do nothing if tx interrupt didn't call
	if ((serial_port->UART->ISR & USART_ISR_TXE) == 0) {return;}
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d023      	beq.n	8001fce <serialTransmitCharacter+0x5e>

	// If we are at the end of the transmit buffer (null character),
	// send \r then \0 on the next interrupt then disable interrupt (no more characters to transmit)
	if (serial_port->TransmitPointer == 0x00) {
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d021      	beq.n	8001fd2 <serialTransmitCharacter+0x62>
		return;
	}

	// If nothing left to send set pointer to null
	if (*serial_port->TransmitPointer == 0x00) {
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10b      	bne.n	8001fb2 <serialTransmitCharacter+0x42>
		serial_port->UART->TDR = 0;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	851a      	strh	r2, [r3, #40]	; 0x28
		serial_port->TransmitPointer = 0;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	635a      	str	r2, [r3, #52]	; 0x34
		setTransmitInterrupt(false, serial_port);
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	2000      	movs	r0, #0
 8001fac:	f7ff ff54 	bl	8001e58 <setTransmitInterrupt>
		return;
 8001fb0:	e010      	b.n	8001fd4 <serialTransmitCharacter+0x64>
	}

	// All other cases, transmit the character normally
	serial_port->UART->TDR = *serial_port->TransmitPointer;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
	serial_port->TransmitPointer++;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	635a      	str	r2, [r3, #52]	; 0x34
 8001fcc:	e002      	b.n	8001fd4 <serialTransmitCharacter+0x64>
	if ((serial_port->UART->ISR & USART_ISR_TXE) == 0) {return;}
 8001fce:	bf00      	nop
 8001fd0:	e000      	b.n	8001fd4 <serialTransmitCharacter+0x64>
		return;
 8001fd2:	bf00      	nop
}
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <serialTransmitString>:

void serialTransmitString(volatile uint8_t* pt, SerialPort *serial_port) {
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
	// Set the pointer to the start of the string to transmit then enable the tx interrupt
	serial_port->TransmitPointer = pt;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
	setTransmitInterrupt(true, serial_port);
 8001fea:	6839      	ldr	r1, [r7, #0]
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff ff33 	bl	8001e58 <setTransmitInterrupt>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_MspInit+0x44>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <HAL_MspInit+0x44>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	6193      	str	r3, [r2, #24]
 800200e:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_MspInit+0x44>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_MspInit+0x44>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_MspInit+0x44>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_MspInit+0x44>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	603b      	str	r3, [r7, #0]
 8002030:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002032:	2007      	movs	r0, #7
 8002034:	f001 fea6 	bl	8003d84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08a      	sub	sp, #40	; 0x28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002064:	d13b      	bne.n	80020de <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4a1f      	ldr	r2, [pc, #124]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6153      	str	r3, [r2, #20]
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4a19      	ldr	r2, [pc, #100]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 8002084:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002088:	6153      	str	r3, [r2, #20]
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002096:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 800209c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020a0:	6153      	str	r3, [r2, #20]
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_ADC_MspInit+0xa4>)
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    PF2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020ae:	2308      	movs	r3, #8
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b2:	2303      	movs	r3, #3
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	480a      	ldr	r0, [pc, #40]	; (80020ec <HAL_ADC_MspInit+0xa8>)
 80020c2:	f002 fa27 	bl	8004514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020c6:	2304      	movs	r3, #4
 80020c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ca:	2303      	movs	r3, #3
 80020cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <HAL_ADC_MspInit+0xac>)
 80020da:	f002 fa1b 	bl	8004514 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020de:	bf00      	nop
 80020e0:	3728      	adds	r7, #40	; 0x28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000800 	.word	0x48000800
 80020f0:	48001400 	.word	0x48001400

080020f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2c      	ldr	r2, [pc, #176]	; (80021c4 <HAL_DAC_MspInit+0xd0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d152      	bne.n	80021bc <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <HAL_DAC_MspInit+0xd4>)
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	4a2b      	ldr	r2, [pc, #172]	; (80021c8 <HAL_DAC_MspInit+0xd4>)
 800211c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002120:	61d3      	str	r3, [r2, #28]
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <HAL_DAC_MspInit+0xd4>)
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <HAL_DAC_MspInit+0xd4>)
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <HAL_DAC_MspInit+0xd4>)
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	6153      	str	r3, [r2, #20]
 800213a:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <HAL_DAC_MspInit+0xd4>)
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002146:	2310      	movs	r3, #16
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800214a:	2303      	movs	r3, #3
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f002 f9da 	bl	8004514 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 8002162:	4a1b      	ldr	r2, [pc, #108]	; (80021d0 <HAL_DAC_MspInit+0xdc>)
 8002164:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 8002168:	2210      	movs	r2, #16
 800216a:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002172:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 800217a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800217e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 8002182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002186:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 800218a:	2220      	movs	r2, #32
 800218c:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 8002190:	2200      	movs	r2, #0
 8002192:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8002194:	480d      	ldr	r0, [pc, #52]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 8002196:	f002 f80a 	bl	80041ae <HAL_DMA_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80021a0:	f7ff fce4 	bl	8001b6c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_DAC_MspInit+0xe0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_DAC_MspInit+0xe0>)
 80021aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ae:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a06      	ldr	r2, [pc, #24]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <HAL_DAC_MspInit+0xd8>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80021bc:	bf00      	nop
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40007400 	.word	0x40007400
 80021c8:	40021000 	.word	0x40021000
 80021cc:	2000030c 	.word	0x2000030c
 80021d0:	40020030 	.word	0x40020030
 80021d4:	40010000 	.word	0x40010000

080021d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a17      	ldr	r2, [pc, #92]	; (8002254 <HAL_I2C_MspInit+0x7c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d127      	bne.n	800224a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_I2C_MspInit+0x80>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_I2C_MspInit+0x80>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6153      	str	r3, [r2, #20]
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_I2C_MspInit+0x80>)
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	613b      	str	r3, [r7, #16]
 8002210:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002212:	23c0      	movs	r3, #192	; 0xc0
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002216:	2312      	movs	r3, #18
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800221a:	2301      	movs	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002222:	2304      	movs	r3, #4
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	480b      	ldr	r0, [pc, #44]	; (800225c <HAL_I2C_MspInit+0x84>)
 800222e:	f002 f971 	bl	8004514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_I2C_MspInit+0x80>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_I2C_MspInit+0x80>)
 8002238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_I2C_MspInit+0x80>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800224a:	bf00      	nop
 800224c:	3728      	adds	r7, #40	; 0x28
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40005400 	.word	0x40005400
 8002258:	40021000 	.word	0x40021000
 800225c:	48000400 	.word	0x48000400

08002260 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a17      	ldr	r2, [pc, #92]	; (80022dc <HAL_SPI_MspInit+0x7c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d128      	bne.n	80022d4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <HAL_SPI_MspInit+0x80>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_SPI_MspInit+0x80>)
 8002288:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800228c:	6193      	str	r3, [r2, #24]
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_SPI_MspInit+0x80>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <HAL_SPI_MspInit+0x80>)
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_SPI_MspInit+0x80>)
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	6153      	str	r3, [r2, #20]
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_SPI_MspInit+0x80>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80022b2:	23e0      	movs	r3, #224	; 0xe0
 80022b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	2302      	movs	r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022c2:	2305      	movs	r3, #5
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d0:	f002 f920 	bl	8004514 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022d4:	bf00      	nop
 80022d6:	3728      	adds	r7, #40	; 0x28
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40013000 	.word	0x40013000
 80022e0:	40021000 	.word	0x40021000

080022e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08a      	sub	sp, #40	; 0x28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a25      	ldr	r2, [pc, #148]	; (8002398 <HAL_TIM_Base_MspInit+0xb4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d132      	bne.n	800236c <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002306:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 800230c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002310:	6193      	str	r3, [r2, #24]
 8002312:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	4b1f      	ldr	r3, [pc, #124]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	4a1e      	ldr	r2, [pc, #120]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 8002324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002328:	6153      	str	r3, [r2, #20]
 800232a:	4b1c      	ldr	r3, [pc, #112]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002348:	2306      	movs	r3, #6
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002356:	f002 f8dd 	bl	8004514 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	201b      	movs	r0, #27
 8002360:	f001 fd1b 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002364:	201b      	movs	r0, #27
 8002366:	f001 fd34 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800236a:	e010      	b.n	800238e <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0b      	ldr	r2, [pc, #44]	; (80023a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10b      	bne.n	800238e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	61d3      	str	r3, [r2, #28]
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_TIM_Base_MspInit+0xb8>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
}
 800238e:	bf00      	nop
 8002390:	3728      	adds	r7, #40	; 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40012c00 	.word	0x40012c00
 800239c:	40021000 	.word	0x40021000
 80023a0:	40000400 	.word	0x40000400

080023a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d113      	bne.n	80023de <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_TIM_PWM_MspInit+0x44>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <HAL_TIM_PWM_MspInit+0x44>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_TIM_PWM_MspInit+0x44>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	201c      	movs	r0, #28
 80023d4:	f001 fce1 	bl	8003d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023d8:	201c      	movs	r0, #28
 80023da:	f001 fcfa 	bl	8003dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023de:	bf00      	nop
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000

080023ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 030c 	add.w	r3, r7, #12
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d11d      	bne.n	800244a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_TIM_MspPostInit+0x68>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <HAL_TIM_MspPostInit+0x68>)
 8002414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002418:	6153      	str	r3, [r2, #20]
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_TIM_MspPostInit+0x68>)
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8002426:	f248 0302 	movw	r3, #32770	; 0x8002
 800242a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002438:	2301      	movs	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	4619      	mov	r1, r3
 8002442:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002446:	f002 f865 	bl	8004514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800244a:	bf00      	nop
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_PCD_MspInit+0x80>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d129      	bne.n	80024ce <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800247a:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_PCD_MspInit+0x84>)
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_PCD_MspInit+0x84>)
 8002480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002484:	6153      	str	r3, [r2, #20]
 8002486:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_PCD_MspInit+0x84>)
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8002492:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002498:	2302      	movs	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024a0:	2303      	movs	r3, #3
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80024a4:	230e      	movs	r3, #14
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a8:	f107 0314 	add.w	r3, r7, #20
 80024ac:	4619      	mov	r1, r3
 80024ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b2:	f002 f82f 	bl	8004514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_PCD_MspInit+0x84>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_PCD_MspInit+0x84>)
 80024bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024c0:	61d3      	str	r3, [r2, #28]
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_PCD_MspInit+0x84>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80024ce:	bf00      	nop
 80024d0:	3728      	adds	r7, #40	; 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40005c00 	.word	0x40005c00
 80024dc:	40021000 	.word	0x40021000

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252c:	f000 fa6a 	bl	8002a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <DMA1_Channel3_IRQHandler+0x10>)
 800253a:	f001 fede 	bl	80042fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000030c 	.word	0x2000030c

08002548 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <TIM1_CC_IRQHandler+0x10>)
 800254e:	f004 ff31 	bl	80073b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000408 	.word	0x20000408

0800255c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <TIM2_IRQHandler+0x10>)
 8002562:	f004 ff27 	bl	80073b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000454 	.word	0x20000454

08002570 <get_status>:
#include "sweep_flag.h"

enum ProgrammeStatus status = SETUP;

enum ProgrammeStatus get_status()
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

	return status;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <get_status+0x14>)
 8002576:	781b      	ldrb	r3, [r3, #0]

}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	200007d8 	.word	0x200007d8

08002588 <set_setup>:

void set_setup()
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
	status = SETUP;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <set_setup+0x14>)
 800258e:	2200      	movs	r2, #0
 8002590:	701a      	strb	r2, [r3, #0]
	return;
 8002592:	bf00      	nop
}
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	200007d8 	.word	0x200007d8

080025a0 <set_green>:

void set_green()
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	status = GREEN;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <set_green+0x14>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
	return;
 80025aa:	bf00      	nop
}
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	200007d8 	.word	0x200007d8

080025b8 <set_red>:

void set_red()
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
	status = RED;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <set_red+0x14>)
 80025be:	2202      	movs	r2, #2
 80025c0:	701a      	strb	r2, [r3, #0]
	return;
 80025c2:	bf00      	nop
}
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	200007d8 	.word	0x200007d8

080025d0 <set_detected>:

void set_detected()
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
	status = DETECTED;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <set_detected+0x14>)
 80025d6:	2203      	movs	r2, #3
 80025d8:	701a      	strb	r2, [r3, #0]
	return;
 80025da:	bf00      	nop
}
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	200007d8 	.word	0x200007d8

080025e8 <set_finished>:

void set_finished()
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
	status = FINISHED;
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <set_finished+0x14>)
 80025ee:	2204      	movs	r2, #4
 80025f0:	701a      	strb	r2, [r3, #0]
	return;
 80025f2:	bf00      	nop
}
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	200007d8 	.word	0x200007d8

08002600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <_sbrk+0x5c>)
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <_sbrk+0x60>)
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <_sbrk+0x64>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x64>)
 800261e:	4a12      	ldr	r2, [pc, #72]	; (8002668 <_sbrk+0x68>)
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <_sbrk+0x64>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	429a      	cmp	r2, r3
 800262e:	d207      	bcs.n	8002640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002630:	f006 f9e2 	bl	80089f8 <__errno>
 8002634:	4603      	mov	r3, r0
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
<<<<<<< HEAD
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
=======
 800263a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 800263e:	e009      	b.n	8002654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <_sbrk+0x64>)
 8002650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000a000 	.word	0x2000a000
 8002660:	00000400 	.word	0x00000400
 8002664:	200007dc 	.word	0x200007dc
 8002668:	20000930 	.word	0x20000930

0800266c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <SystemInit+0x20>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	4a05      	ldr	r2, [pc, #20]	; (800268c <SystemInit+0x20>)
 8002678:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800267c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_EnableIRQ>:
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	db0b      	blt.n	80026ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <__NVIC_EnableIRQ+0x38>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2001      	movs	r0, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100

080026cc <__NVIC_SetPriority>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db0a      	blt.n	80026f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	490c      	ldr	r1, [pc, #48]	; (8002718 <__NVIC_SetPriority+0x4c>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	0112      	lsls	r2, r2, #4
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026f4:	e00a      	b.n	800270c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <__NVIC_SetPriority+0x50>)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3b04      	subs	r3, #4
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	440b      	add	r3, r1
 800270a:	761a      	strb	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <TIM3_IRQHandler>:
		.is_loop = NULL,
		.enabled = false
	};


void TIM3_IRQHandler() {if (DelayTIM3.enabled) {timerHandler(&DelayTIM3);}}
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <TIM3_IRQHandler+0x18>)
 8002726:	7d5b      	ldrb	r3, [r3, #21]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <TIM3_IRQHandler+0x12>
 800272c:	4802      	ldr	r0, [pc, #8]	; (8002738 <TIM3_IRQHandler+0x18>)
 800272e:	f000 f813 	bl	8002758 <timerHandler>
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000050 	.word	0x20000050

0800273c <TIM4_IRQHandler>:
		.is_loop = NULL,
		.enabled = false
	};


void TIM4_IRQHandler() {if (DelayTIM4.enabled) {timerHandler(&DelayTIM4);}}
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
 8002740:	4b04      	ldr	r3, [pc, #16]	; (8002754 <TIM4_IRQHandler+0x18>)
 8002742:	7d5b      	ldrb	r3, [r3, #21]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <TIM4_IRQHandler+0x12>
 8002748:	4802      	ldr	r0, [pc, #8]	; (8002754 <TIM4_IRQHandler+0x18>)
 800274a:	f000 f805 	bl	8002758 <timerHandler>
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000068 	.word	0x20000068

08002758 <timerHandler>:
		.callback_ptr = NULL,
		.is_loop = NULL,
		.enabled = false
	};

void timerHandler(DelayTIM *delay_timer) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
    delay_timer->TIM->SR &= ~TIM_SR_UIF;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0201 	bic.w	r2, r2, #1
 800276e:	611a      	str	r2, [r3, #16]
	if (delay_timer->callback_ptr == NULL) {
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d103      	bne.n	8002780 <timerHandler+0x28>
		stopTimer(delay_timer);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f8a9 	bl	80028d0 <stopTimer>
		return;
 800277e:	e019      	b.n	80027b4 <timerHandler+0x5c>
	}
	if (delay_timer->is_loop) {
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	7d1b      	ldrb	r3, [r3, #20]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <timerHandler+0x38>
		delay_timer->callback_ptr();
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	4798      	blx	r3
		return;
 800278e:	e011      	b.n	80027b4 <timerHandler+0x5c>
	}
	if (!delay_timer->is_loop){
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	7d1b      	ldrb	r3, [r3, #20]
 8002794:	f083 0301 	eor.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00a      	beq.n	80027b4 <timerHandler+0x5c>
		uint32_t num = delay_timer->TIM->CNT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	60fb      	str	r3, [r7, #12]
		stopTimer(delay_timer);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f892 	bl	80028d0 <stopTimer>
		delay_timer->callback_ptr();
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	4798      	blx	r3
		return;
 80027b2:	bf00      	nop
	}
}
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <timerInitialise>:

void timerInitialise(DelayTIM *delay_timer)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
	// Enable appropriate functions
	enableTimer(delay_timer);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f808 	bl	80027d8 <enableTimer>
	enableInterrupts(delay_timer);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f840 	bl	800284e <enableInterrupts>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <enableTimer>:

void enableTimer(DelayTIM *delay_timer)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
	// Enable the clock for timer
	RCC->APB1ENR |= delay_timer->MaskAPB1ENR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b0d      	ldr	r3, [pc, #52]	; (800281c <enableTimer+0x44>)
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	490c      	ldr	r1, [pc, #48]	; (800281c <enableTimer+0x44>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61cb      	str	r3, [r1, #28]
	delay_timer->TIM->PSC = 47999;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
	delay_timer->TIM->CR1 |= TIM_CR1_CEN;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0201 	orr.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
	triggerPrescaler(delay_timer);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f809 	bl	8002820 <triggerPrescaler>
	delay_timer->enabled = true;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	755a      	strb	r2, [r3, #21]
}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000

08002820 <triggerPrescaler>:

// Pre-scaler updates only upon "events" so this triggers an overflow
void triggerPrescaler(DelayTIM *delay_timer)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	delay_timer->TIM->ARR = 0x01;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2201      	movs	r2, #1
 800282e:	62da      	str	r2, [r3, #44]	; 0x2c
	delay_timer->TIM->CNT = 0x00;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2200      	movs	r2, #0
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
	delay_timer->TIM->ARR = 0xFFFFFFFF;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
<<<<<<< HEAD
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
=======
 800283c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8002840:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <enableInterrupts>:

void enableInterrupts(DelayTIM *delay_timer)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8002856:	b672      	cpsid	i
}
 8002858:	bf00      	nop
	__disable_irq();

    // Enable the update interrupt
    delay_timer->TIM->DIER |= TIM_DIER_UIE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	60da      	str	r2, [r3, #12]

	// Set priority and enable interrupts
	NVIC_SetPriority(delay_timer->TIM_IRQn, 100);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	b25b      	sxtb	r3, r3
 8002870:	2164      	movs	r1, #100	; 0x64
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff2a 	bl	80026cc <__NVIC_SetPriority>
	NVIC_EnableIRQ(delay_timer->TIM_IRQn);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff06 	bl	8002690 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002884:	b662      	cpsie	i
}
 8002886:	bf00      	nop

	__enable_irq();
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <resetTimer>:
uint32_t get_delay(DelayTIM *delay_timer)
{
    return delay_timer->TIM->ARR;
}

void resetTimer(DelayTIM *delay_timer, uint32_t delay_ms) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
	stopTimer(delay_timer);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f818 	bl	80028d0 <stopTimer>
    delay_timer->TIM->ARR = delay_ms;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
	delay_timer->TIM->CR1 |= TIM_CR1_CEN;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
	delay_timer->TIM->SR &= ~TIM_SR_UIF;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	611a      	str	r2, [r3, #16]
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <stopTimer>:

void stopTimer(DelayTIM *delay_timer) {
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	delay_timer->TIM->CR1 &= ~TIM_CR1_CEN;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]
	delay_timer->TIM->CNT = 0x00;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <setDelay>:
	delay_timer->callback_ptr = callback;
	delay_timer->is_loop = true;
	resetTimer(delay_timer, delay_ms);
}

void setDelay(DelayTIM *delay_timer, uint32_t delay_ms, void (*callback)(void)) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
	delay_timer->callback_ptr = callback;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	611a      	str	r2, [r3, #16]
	delay_timer->is_loop = false;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	751a      	strb	r2, [r3, #20]
	resetTimer(delay_timer, delay_ms);
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff ffba 	bl	8002890 <resetTimer>
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800295c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002928:	f7ff fea0 	bl	800266c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800292c:	480c      	ldr	r0, [pc, #48]	; (8002960 <LoopForever+0x6>)
  ldr r1, =_edata
 800292e:	490d      	ldr	r1, [pc, #52]	; (8002964 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <LoopForever+0xe>)
  movs r3, #0
 8002932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002934:	e002      	b.n	800293c <LoopCopyDataInit>

08002936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800293a:	3304      	adds	r3, #4

0800293c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800293c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800293e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002940:	d3f9      	bcc.n	8002936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002944:	4c0a      	ldr	r4, [pc, #40]	; (8002970 <LoopForever+0x16>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002948:	e001      	b.n	800294e <LoopFillZerobss>

0800294a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800294a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800294c:	3204      	adds	r2, #4

0800294e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800294e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002950:	d3fb      	bcc.n	800294a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002952:	f006 f857 	bl	8008a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002956:	f7fe fd37 	bl	80013c8 <main>

0800295a <LoopForever>:

LoopForever:
    b LoopForever
 800295a:	e7fe      	b.n	800295a <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800295c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002964:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002968:	0800a4c8 	.word	0x0800a4c8
  ldr r2, =_sbss
 800296c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002970:	2000092c 	.word	0x2000092c

08002974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002974:	e7fe      	b.n	8002974 <ADC1_2_IRQHandler>
	...

08002978 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_Init+0x28>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_Init+0x28>)
 8002982:	f043 0310 	orr.w	r3, r3, #16
 8002986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f001 f9fb 	bl	8003d84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298e:	2000      	movs	r0, #0
 8002990:	f000 f808 	bl	80029a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002994:	f7ff fb32 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000

080029a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_InitTick+0x54>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x58>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 fa13 	bl	8003dee <HAL_SYSTICK_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00e      	b.n	80029f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d80a      	bhi.n	80029ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d8:	2200      	movs	r2, #0
 80029da:	6879      	ldr	r1, [r7, #4]
<<<<<<< HEAD
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
=======
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 80029e0:	f001 f9db 	bl	8003d9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <HAL_InitTick+0x5c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	2000004c 	.word	0x2000004c
 80029fc:	20000084 	.word	0x20000084
 8002a00:	20000080 	.word	0x20000080

08002a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_IncTick+0x20>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_IncTick+0x24>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_IncTick+0x24>)
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000084 	.word	0x20000084
 8002a28:	200007e0 	.word	0x200007e0

08002a2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_GetTick+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200007e0 	.word	0x200007e0

08002a44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a4c:	f7ff ffee 	bl	8002a2c <HAL_GetTick>
 8002a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
<<<<<<< HEAD
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295
=======
 8002a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8002a5c:	d005      	beq.n	8002a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_Delay+0x44>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4413      	add	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002a6a:	bf00      	nop
 8002a6c:	f7ff ffde 	bl	8002a2c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d8f7      	bhi.n	8002a6c <HAL_Delay+0x28>
  {
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000084 	.word	0x20000084

08002a8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b09a      	sub	sp, #104	; 0x68
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e1c9      	b.n	8002e40 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d176      	bne.n	8002bac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d152      	bne.n	8002b6c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff faaf 	bl	8002044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d13b      	bne.n	8002b6c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f001 f80f 	bl	8003b18 <ADC_Disable>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d12f      	bne.n	8002b6c <HAL_ADC_Init+0xe0>
 8002b0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d12b      	bne.n	8002b6c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b1c:	f023 0302 	bic.w	r3, r3, #2
 8002b20:	f043 0202 	orr.w	r2, r3, #2
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b36:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b46:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b48:	4b86      	ldr	r3, [pc, #536]	; (8002d64 <HAL_ADC_Init+0x2d8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a86      	ldr	r2, [pc, #536]	; (8002d68 <HAL_ADC_Init+0x2dc>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9a      	lsrs	r2, r3, #18
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b5e:	e002      	b.n	8002b66 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f9      	bne.n	8002b60 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b88:	d110      	bne.n	8002bac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f023 0312 	bic.w	r3, r3, #18
 8002b92:	f043 0210 	orr.w	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	f043 0201 	orr.w	r2, r3, #1
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f040 8136 	bne.w	8002e26 <HAL_ADC_Init+0x39a>
 8002bba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8131 	bne.w	8002e26 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 8129 	bne.w	8002e26 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bdc:	f043 0202 	orr.w	r2, r3, #2
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bec:	d004      	beq.n	8002bf8 <HAL_ADC_Init+0x16c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5e      	ldr	r2, [pc, #376]	; (8002d6c <HAL_ADC_Init+0x2e0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_Init+0x170>
 8002bf8:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <HAL_ADC_Init+0x2e4>)
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_Init+0x172>
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <HAL_ADC_Init+0x2e8>)
 8002bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c08:	d102      	bne.n	8002c10 <HAL_ADC_Init+0x184>
 8002c0a:	4b58      	ldr	r3, [pc, #352]	; (8002d6c <HAL_ADC_Init+0x2e0>)
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e01a      	b.n	8002c46 <HAL_ADC_Init+0x1ba>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a55      	ldr	r2, [pc, #340]	; (8002d6c <HAL_ADC_Init+0x2e0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d103      	bne.n	8002c22 <HAL_ADC_Init+0x196>
 8002c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e011      	b.n	8002c46 <HAL_ADC_Init+0x1ba>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_ADC_Init+0x2ec>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d102      	bne.n	8002c32 <HAL_ADC_Init+0x1a6>
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_ADC_Init+0x2f0>)
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e009      	b.n	8002c46 <HAL_ADC_Init+0x1ba>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a51      	ldr	r2, [pc, #324]	; (8002d7c <HAL_ADC_Init+0x2f0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d102      	bne.n	8002c42 <HAL_ADC_Init+0x1b6>
 8002c3c:	4b4e      	ldr	r3, [pc, #312]	; (8002d78 <HAL_ADC_Init+0x2ec>)
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e001      	b.n	8002c46 <HAL_ADC_Init+0x1ba>
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <HAL_ADC_Init+0x1da>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_ADC_Init+0x1da>
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_ADC_Init+0x1dc>
 8002c66:	2300      	movs	r3, #0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d11c      	bne.n	8002ca6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c6c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_ADC_Init+0x202>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_Init+0x202>
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e000      	b.n	8002c90 <HAL_ADC_Init+0x204>
 8002c8e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d108      	bne.n	8002ca6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ca4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	7e5b      	ldrb	r3, [r3, #25]
 8002caa:	035b      	lsls	r3, r3, #13
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002cb0:	2a01      	cmp	r2, #1
 8002cb2:	d002      	beq.n	8002cba <HAL_ADC_Init+0x22e>
 8002cb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cb8:	e000      	b.n	8002cbc <HAL_ADC_Init+0x230>
 8002cba:	2200      	movs	r2, #0
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d11b      	bne.n	8002d12 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7e5b      	ldrb	r3, [r3, #25]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	045a      	lsls	r2, r3, #17
 8002cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8002cf4:	e00d      	b.n	8002d12 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cfe:	f043 0220 	orr.w	r2, r3, #32
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d03a      	beq.n	8002d90 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <HAL_ADC_Init+0x2ec>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_ADC_Init+0x2a2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <HAL_ADC_Init+0x2f0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d128      	bne.n	8002d80 <HAL_ADC_Init+0x2f4>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002d36:	d012      	beq.n	8002d5e <HAL_ADC_Init+0x2d2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d40:	d00a      	beq.n	8002d58 <HAL_ADC_Init+0x2cc>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002d4a:	d002      	beq.n	8002d52 <HAL_ADC_Init+0x2c6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	e018      	b.n	8002d84 <HAL_ADC_Init+0x2f8>
 8002d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d56:	e015      	b.n	8002d84 <HAL_ADC_Init+0x2f8>
 8002d58:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002d5c:	e012      	b.n	8002d84 <HAL_ADC_Init+0x2f8>
 8002d5e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002d62:	e00f      	b.n	8002d84 <HAL_ADC_Init+0x2f8>
 8002d64:	2000004c 	.word	0x2000004c
 8002d68:	431bde83 	.word	0x431bde83
 8002d6c:	50000100 	.word	0x50000100
 8002d70:	50000300 	.word	0x50000300
 8002d74:	50000700 	.word	0x50000700
 8002d78:	50000400 	.word	0x50000400
 8002d7c:	50000500 	.word	0x50000500
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d114      	bne.n	8002dc8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dac:	f023 0302 	bic.w	r3, r3, #2
 8002db0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7e1b      	ldrb	r3, [r3, #24]
 8002db6:	039a      	lsls	r2, r3, #14
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	4b1e      	ldr	r3, [pc, #120]	; (8002e48 <HAL_ADC_Init+0x3bc>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10c      	bne.n	8002dfe <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f023 010f 	bic.w	r1, r3, #15
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	1e5a      	subs	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dfc:	e007      	b.n	8002e0e <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 020f 	bic.w	r2, r2, #15
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f023 0303 	bic.w	r3, r3, #3
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40
 8002e24:	e00a      	b.n	8002e3c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	f023 0312 	bic.w	r3, r3, #18
 8002e2e:	f043 0210 	orr.w	r2, r3, #16
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002e36:	2301      	movs	r3, #1
 8002e38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002e3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3768      	adds	r7, #104	; 0x68
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	fff0c007 	.word	0xfff0c007

08002e4c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 80f9 	bne.w	800305a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_Start+0x2a>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0f4      	b.n	8003060 <HAL_ADC_Start+0x214>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fde6 	bl	8003a50 <ADC_Enable>
 8002e84:	4603      	mov	r3, r0
 8002e86:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 80e0 	bne.w	8003050 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e98:	f023 0301 	bic.w	r3, r3, #1
 8002e9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eac:	d004      	beq.n	8002eb8 <HAL_ADC_Start+0x6c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6d      	ldr	r2, [pc, #436]	; (8003068 <HAL_ADC_Start+0x21c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d106      	bne.n	8002ec6 <HAL_ADC_Start+0x7a>
 8002eb8:	4b6c      	ldr	r3, [pc, #432]	; (800306c <HAL_ADC_Start+0x220>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d010      	beq.n	8002ee6 <HAL_ADC_Start+0x9a>
 8002ec4:	e005      	b.n	8002ed2 <HAL_ADC_Start+0x86>
 8002ec6:	4b6a      	ldr	r3, [pc, #424]	; (8003070 <HAL_ADC_Start+0x224>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 031f 	and.w	r3, r3, #31
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_ADC_Start+0x9a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eda:	d004      	beq.n	8002ee6 <HAL_ADC_Start+0x9a>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a64      	ldr	r2, [pc, #400]	; (8003074 <HAL_ADC_Start+0x228>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d115      	bne.n	8002f12 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d036      	beq.n	8002f6e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002f10:	e02d      	b.n	8002f6e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f26:	d004      	beq.n	8002f32 <HAL_ADC_Start+0xe6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4e      	ldr	r2, [pc, #312]	; (8003068 <HAL_ADC_Start+0x21c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10a      	bne.n	8002f48 <HAL_ADC_Start+0xfc>
 8002f32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e008      	b.n	8002f5a <HAL_ADC_Start+0x10e>
 8002f48:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <HAL_ADC_Start+0x228>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	d106      	bne.n	8002f8a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	f023 0206 	bic.w	r2, r3, #6
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	645a      	str	r2, [r3, #68]	; 0x44
 8002f88:	e002      	b.n	8002f90 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	221c      	movs	r2, #28
 8002f9e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_Start+0x168>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a2e      	ldr	r2, [pc, #184]	; (8003068 <HAL_ADC_Start+0x21c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d106      	bne.n	8002fc2 <HAL_ADC_Start+0x176>
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_ADC_Start+0x220>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d03e      	beq.n	800303e <HAL_ADC_Start+0x1f2>
 8002fc0:	e005      	b.n	8002fce <HAL_ADC_Start+0x182>
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_ADC_Start+0x224>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d037      	beq.n	800303e <HAL_ADC_Start+0x1f2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fd6:	d004      	beq.n	8002fe2 <HAL_ADC_Start+0x196>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a22      	ldr	r2, [pc, #136]	; (8003068 <HAL_ADC_Start+0x21c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d106      	bne.n	8002ff0 <HAL_ADC_Start+0x1a4>
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <HAL_ADC_Start+0x220>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	2b05      	cmp	r3, #5
 8002fec:	d027      	beq.n	800303e <HAL_ADC_Start+0x1f2>
 8002fee:	e005      	b.n	8002ffc <HAL_ADC_Start+0x1b0>
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_ADC_Start+0x224>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d020      	beq.n	800303e <HAL_ADC_Start+0x1f2>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003004:	d004      	beq.n	8003010 <HAL_ADC_Start+0x1c4>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_ADC_Start+0x21c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d106      	bne.n	800301e <HAL_ADC_Start+0x1d2>
 8003010:	4b16      	ldr	r3, [pc, #88]	; (800306c <HAL_ADC_Start+0x220>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2b09      	cmp	r3, #9
 800301a:	d010      	beq.n	800303e <HAL_ADC_Start+0x1f2>
 800301c:	e005      	b.n	800302a <HAL_ADC_Start+0x1de>
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <HAL_ADC_Start+0x224>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2b09      	cmp	r3, #9
 8003028:	d009      	beq.n	800303e <HAL_ADC_Start+0x1f2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003032:	d004      	beq.n	800303e <HAL_ADC_Start+0x1f2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a0e      	ldr	r2, [pc, #56]	; (8003074 <HAL_ADC_Start+0x228>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d10f      	bne.n	800305e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0204 	orr.w	r2, r2, #4
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	e006      	b.n	800305e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003058:	e001      	b.n	800305e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800305a:	2302      	movs	r3, #2
 800305c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	50000100 	.word	0x50000100
 800306c:	50000300 	.word	0x50000300
 8003070:	50000700 	.word	0x50000700
 8003074:	50000400 	.word	0x50000400

08003078 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	2b08      	cmp	r3, #8
 800308c:	d102      	bne.n	8003094 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800308e:	2308      	movs	r3, #8
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e03a      	b.n	800310a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800309c:	d004      	beq.n	80030a8 <HAL_ADC_PollForConversion+0x30>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a72      	ldr	r2, [pc, #456]	; (800326c <HAL_ADC_PollForConversion+0x1f4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_ADC_PollForConversion+0x34>
 80030a8:	4b71      	ldr	r3, [pc, #452]	; (8003270 <HAL_ADC_PollForConversion+0x1f8>)
 80030aa:	e000      	b.n	80030ae <HAL_ADC_PollForConversion+0x36>
 80030ac:	4b71      	ldr	r3, [pc, #452]	; (8003274 <HAL_ADC_PollForConversion+0x1fc>)
 80030ae:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d112      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d11d      	bne.n	8003106 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e0bf      	b.n	8003262 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00b      	beq.n	8003106 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f043 0220 	orr.w	r2, r3, #32
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0ad      	b.n	8003262 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003106:	230c      	movs	r3, #12
 8003108:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003112:	d004      	beq.n	800311e <HAL_ADC_PollForConversion+0xa6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a54      	ldr	r2, [pc, #336]	; (800326c <HAL_ADC_PollForConversion+0x1f4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d106      	bne.n	800312c <HAL_ADC_PollForConversion+0xb4>
 800311e:	4b54      	ldr	r3, [pc, #336]	; (8003270 <HAL_ADC_PollForConversion+0x1f8>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_ADC_PollForConversion+0xd4>
 800312a:	e005      	b.n	8003138 <HAL_ADC_PollForConversion+0xc0>
 800312c:	4b51      	ldr	r3, [pc, #324]	; (8003274 <HAL_ADC_PollForConversion+0x1fc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_ADC_PollForConversion+0xd4>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003140:	d004      	beq.n	800314c <HAL_ADC_PollForConversion+0xd4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_ADC_PollForConversion+0x200>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d104      	bne.n	8003156 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	e00f      	b.n	8003176 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315e:	d004      	beq.n	800316a <HAL_ADC_PollForConversion+0xf2>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a41      	ldr	r2, [pc, #260]	; (800326c <HAL_ADC_PollForConversion+0x1f4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d102      	bne.n	8003170 <HAL_ADC_PollForConversion+0xf8>
 800316a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800316e:	e000      	b.n	8003172 <HAL_ADC_PollForConversion+0xfa>
 8003170:	4b41      	ldr	r3, [pc, #260]	; (8003278 <HAL_ADC_PollForConversion+0x200>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003176:	f7ff fc59 	bl	8002a2c <HAL_GetTick>
 800317a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800317c:	e021      	b.n	80031c2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800317e:	683b      	ldr	r3, [r7, #0]
<<<<<<< HEAD
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
=======
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8003184:	d01d      	beq.n	80031c2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_ADC_PollForConversion+0x124>
 800318c:	f7ff fc4e 	bl	8002a2c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d212      	bcs.n	80031c2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f043 0204 	orr.w	r2, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e04f      	b.n	8003262 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0d6      	beq.n	800317e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d131      	bne.n	800324e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d12c      	bne.n	800324e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d125      	bne.n	800324e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d112      	bne.n	8003236 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d112      	bne.n	800324e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
 8003234:	e00b      	b.n	800324e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f043 0220 	orr.w	r2, r3, #32
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d103      	bne.n	8003260 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	697a      	ldr	r2, [r7, #20]
 800325e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	50000100 	.word	0x50000100
 8003270:	50000300 	.word	0x50000300
 8003274:	50000700 	.word	0x50000700
 8003278:	50000400 	.word	0x50000400

0800327c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003298:	b480      	push	{r7}
 800329a:	b09b      	sub	sp, #108	; 0x6c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x22>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e2c8      	b.n	800384c <HAL_ADC_ConfigChannel+0x5b4>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 82ac 	bne.w	800382a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d81c      	bhi.n	8003314 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	461a      	mov	r2, r3
 80032ee:	231f      	movs	r3, #31
 80032f0:	4093      	lsls	r3, r2
 80032f2:	43db      	mvns	r3, r3
 80032f4:	4019      	ands	r1, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	fa00 f203 	lsl.w	r2, r0, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
 8003312:	e063      	b.n	80033dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b09      	cmp	r3, #9
 800331a:	d81e      	bhi.n	800335a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	3b1e      	subs	r3, #30
 8003330:	221f      	movs	r2, #31
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	4019      	ands	r1, r3
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4413      	add	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	3b1e      	subs	r3, #30
 800334c:	fa00 f203 	lsl.w	r2, r0, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	635a      	str	r2, [r3, #52]	; 0x34
 8003358:	e040      	b.n	80033dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b0e      	cmp	r3, #14
 8003360:	d81e      	bhi.n	80033a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	3b3c      	subs	r3, #60	; 0x3c
 8003376:	221f      	movs	r2, #31
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	4019      	ands	r1, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6818      	ldr	r0, [r3, #0]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	3b3c      	subs	r3, #60	; 0x3c
 8003392:	fa00 f203 	lsl.w	r2, r0, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	639a      	str	r2, [r3, #56]	; 0x38
 800339e:	e01d      	b.n	80033dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	3b5a      	subs	r3, #90	; 0x5a
 80033b4:	221f      	movs	r2, #31
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	4019      	ands	r1, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	3b5a      	subs	r3, #90	; 0x5a
 80033d0:	fa00 f203 	lsl.w	r2, r0, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f040 80e5 	bne.w	80035b6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d91c      	bls.n	800342e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6999      	ldr	r1, [r3, #24]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4613      	mov	r3, r2
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	4413      	add	r3, r2
 8003404:	3b1e      	subs	r3, #30
 8003406:	2207      	movs	r2, #7
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	4019      	ands	r1, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	6898      	ldr	r0, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	3b1e      	subs	r3, #30
 8003420:	fa00 f203 	lsl.w	r2, r0, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	619a      	str	r2, [r3, #24]
 800342c:	e019      	b.n	8003462 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6959      	ldr	r1, [r3, #20]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	2207      	movs	r2, #7
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	4019      	ands	r1, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6898      	ldr	r0, [r3, #8]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	fa00 f203 	lsl.w	r2, r0, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	3b01      	subs	r3, #1
 8003480:	2b03      	cmp	r3, #3
 8003482:	d84f      	bhi.n	8003524 <HAL_ADC_ConfigChannel+0x28c>
 8003484:	a201      	add	r2, pc, #4	; (adr r2, 800348c <HAL_ADC_ConfigChannel+0x1f4>)
 8003486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348a:	bf00      	nop
 800348c:	0800349d 	.word	0x0800349d
 8003490:	080034bf 	.word	0x080034bf
 8003494:	080034e1 	.word	0x080034e1
 8003498:	08003503 	.word	0x08003503
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034a2:	4b99      	ldr	r3, [pc, #612]	; (8003708 <HAL_ADC_ConfigChannel+0x470>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	0691      	lsls	r1, r2, #26
 80034ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034ae:	430a      	orrs	r2, r1
 80034b0:	431a      	orrs	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034bc:	e07b      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034c4:	4b90      	ldr	r3, [pc, #576]	; (8003708 <HAL_ADC_ConfigChannel+0x470>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	0691      	lsls	r1, r2, #26
 80034ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034d0:	430a      	orrs	r2, r1
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034dc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80034de:	e06a      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80034e6:	4b88      	ldr	r3, [pc, #544]	; (8003708 <HAL_ADC_ConfigChannel+0x470>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	0691      	lsls	r1, r2, #26
 80034f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80034f2:	430a      	orrs	r2, r1
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034fe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003500:	e059      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003508:	4b7f      	ldr	r3, [pc, #508]	; (8003708 <HAL_ADC_ConfigChannel+0x470>)
 800350a:	4013      	ands	r3, r2
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	6812      	ldr	r2, [r2, #0]
 8003510:	0691      	lsls	r1, r2, #26
 8003512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003514:	430a      	orrs	r2, r1
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003520:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003522:	e048      	b.n	80035b6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	069b      	lsls	r3, r3, #26
 8003534:	429a      	cmp	r2, r3
 8003536:	d107      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003546:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	069b      	lsls	r3, r3, #26
 8003558:	429a      	cmp	r2, r3
 800355a:	d107      	bne.n	800356c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800356a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003572:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	069b      	lsls	r3, r3, #26
 800357c:	429a      	cmp	r2, r3
 800357e:	d107      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800358e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	069b      	lsls	r3, r3, #26
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035b2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80035b4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d108      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x33e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x33e>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x340>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f040 8131 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d00f      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2201      	movs	r2, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43da      	mvns	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	400a      	ands	r2, r1
 8003600:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003604:	e049      	b.n	800369a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	409a      	lsls	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b09      	cmp	r3, #9
 8003626:	d91c      	bls.n	8003662 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6999      	ldr	r1, [r3, #24]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	3b1b      	subs	r3, #27
 800363a:	2207      	movs	r2, #7
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	4019      	ands	r1, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	6898      	ldr	r0, [r3, #8]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	3b1b      	subs	r3, #27
 8003654:	fa00 f203 	lsl.w	r2, r0, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	619a      	str	r2, [r3, #24]
 8003660:	e01b      	b.n	800369a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6959      	ldr	r1, [r3, #20]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	1c5a      	adds	r2, r3, #1
 800366e:	4613      	mov	r3, r2
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	4413      	add	r3, r2
 8003674:	2207      	movs	r2, #7
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	4019      	ands	r1, r3
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6898      	ldr	r0, [r3, #8]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	fa00 f203 	lsl.w	r2, r0, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x416>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_ADC_ConfigChannel+0x474>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x41a>
 80036ae:	4b18      	ldr	r3, [pc, #96]	; (8003710 <HAL_ADC_ConfigChannel+0x478>)
 80036b0:	e000      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x41c>
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <HAL_ADC_ConfigChannel+0x47c>)
 80036b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d105      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80036be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80036ce:	2b11      	cmp	r3, #17
 80036d0:	d105      	bne.n	80036de <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80036e2:	2b12      	cmp	r3, #18
 80036e4:	f040 80ac 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80036e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f040 80a5 	bne.w	8003840 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036fe:	d10b      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x480>
 8003700:	4b02      	ldr	r3, [pc, #8]	; (800370c <HAL_ADC_ConfigChannel+0x474>)
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e023      	b.n	800374e <HAL_ADC_ConfigChannel+0x4b6>
 8003706:	bf00      	nop
 8003708:	83fff000 	.word	0x83fff000
 800370c:	50000100 	.word	0x50000100
 8003710:	50000300 	.word	0x50000300
 8003714:	50000700 	.word	0x50000700
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_ADC_ConfigChannel+0x5c0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d103      	bne.n	800372a <HAL_ADC_ConfigChannel+0x492>
 8003722:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e011      	b.n	800374e <HAL_ADC_ConfigChannel+0x4b6>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a4b      	ldr	r2, [pc, #300]	; (800385c <HAL_ADC_ConfigChannel+0x5c4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d102      	bne.n	800373a <HAL_ADC_ConfigChannel+0x4a2>
 8003734:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_ADC_ConfigChannel+0x5c8>)
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e009      	b.n	800374e <HAL_ADC_ConfigChannel+0x4b6>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a48      	ldr	r2, [pc, #288]	; (8003860 <HAL_ADC_ConfigChannel+0x5c8>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d102      	bne.n	800374a <HAL_ADC_ConfigChannel+0x4b2>
 8003744:	4b45      	ldr	r3, [pc, #276]	; (800385c <HAL_ADC_ConfigChannel+0x5c4>)
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	e001      	b.n	800374e <HAL_ADC_ConfigChannel+0x4b6>
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d108      	bne.n	800376e <HAL_ADC_ConfigChannel+0x4d6>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_ADC_ConfigChannel+0x4d6>
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <HAL_ADC_ConfigChannel+0x4d8>
 800376e:	2300      	movs	r3, #0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d150      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003774:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003776:	2b00      	cmp	r3, #0
 8003778:	d010      	beq.n	800379c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x4fe>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x4fe>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <HAL_ADC_ConfigChannel+0x500>
 8003796:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003798:	2b00      	cmp	r3, #0
 800379a:	d13c      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d11d      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x548>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ac:	d118      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80037ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80037b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037ba:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HAL_ADC_ConfigChannel+0x5cc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2a      	ldr	r2, [pc, #168]	; (8003868 <HAL_ADC_ConfigChannel+0x5d0>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	0c9a      	lsrs	r2, r3, #18
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037d0:	e002      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f9      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037de:	e02e      	b.n	800383e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b11      	cmp	r3, #17
 80037e6:	d10b      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x568>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f0:	d106      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80037f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80037fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037fc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80037fe:	e01e      	b.n	800383e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b12      	cmp	r3, #18
 8003806:	d11a      	bne.n	800383e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003812:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003814:	e013      	b.n	800383e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0220 	orr.w	r2, r3, #32
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003828:	e00a      	b.n	8003840 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f043 0220 	orr.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800383c:	e000      	b.n	8003840 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800383e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003848:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800384c:	4618      	mov	r0, r3
 800384e:	376c      	adds	r7, #108	; 0x6c
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	50000100 	.word	0x50000100
 800385c:	50000400 	.word	0x50000400
 8003860:	50000500 	.word	0x50000500
 8003864:	2000004c 	.word	0x2000004c
 8003868:	431bde83 	.word	0x431bde83

0800386c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800386c:	b480      	push	{r7}
 800386e:	b099      	sub	sp, #100	; 0x64
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003876:	2300      	movs	r3, #0
 8003878:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003884:	d102      	bne.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003886:	4b6d      	ldr	r3, [pc, #436]	; (8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	e01a      	b.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6a      	ldr	r2, [pc, #424]	; (8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d103      	bne.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003896:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800389a:	60bb      	str	r3, [r7, #8]
 800389c:	e011      	b.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a67      	ldr	r2, [pc, #412]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d102      	bne.n	80038ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	e009      	b.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a64      	ldr	r2, [pc, #400]	; (8003a44 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d102      	bne.n	80038be <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038b8:	4b61      	ldr	r3, [pc, #388]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80038ba:	60bb      	str	r3, [r7, #8]
 80038bc:	e001      	b.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0b0      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0a9      	b.n	8003a2e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f040 808d 	bne.w	8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 8086 	bne.w	8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003908:	d004      	beq.n	8003914 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a4b      	ldr	r2, [pc, #300]	; (8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003916:	e000      	b.n	800391a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003918:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800391a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d040      	beq.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003924:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003936:	035b      	lsls	r3, r3, #13
 8003938:	430b      	orrs	r3, r1
 800393a:	431a      	orrs	r2, r3
 800393c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800393e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	2b01      	cmp	r3, #1
 800394c:	d108      	bne.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d15c      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003982:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003984:	2b00      	cmp	r3, #0
 8003986:	d14b      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003990:	f023 030f 	bic.w	r3, r3, #15
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	6811      	ldr	r1, [r2, #0]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	6892      	ldr	r2, [r2, #8]
 800399c:	430a      	orrs	r2, r1
 800399e:	431a      	orrs	r2, r3
 80039a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039a4:	e03c      	b.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039b0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d108      	bne.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80039d2:	2300      	movs	r3, #0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d123      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d107      	bne.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80039f4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d112      	bne.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80039fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a02:	f023 030f 	bic.w	r3, r3, #15
 8003a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a08:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a0a:	e009      	b.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f043 0220 	orr.w	r2, r3, #32
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003a1e:	e000      	b.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a20:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3764      	adds	r7, #100	; 0x64
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	50000100 	.word	0x50000100
 8003a40:	50000400 	.word	0x50000400
 8003a44:	50000500 	.word	0x50000500
 8003a48:	50000300 	.word	0x50000300
 8003a4c:	50000700 	.word	0x50000700

08003a50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d108      	bne.n	8003a7c <ADC_Enable+0x2c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <ADC_Enable+0x2c>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <ADC_Enable+0x2e>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d143      	bne.n	8003b0a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	4b22      	ldr	r3, [pc, #136]	; (8003b14 <ADC_Enable+0xc4>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f043 0210 	orr.w	r2, r3, #16
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e02f      	b.n	8003b0c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003abc:	f7fe ffb6 	bl	8002a2c <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ac2:	e01b      	b.n	8003afc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ac4:	f7fe ffb2 	bl	8002a2c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d914      	bls.n	8003afc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d00d      	beq.n	8003afc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	f043 0210 	orr.w	r2, r3, #16
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	f043 0201 	orr.w	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e007      	b.n	8003b0c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d1dc      	bne.n	8003ac4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	8000003f 	.word	0x8000003f

08003b18 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d108      	bne.n	8003b44 <ADC_Disable+0x2c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <ADC_Disable+0x2c>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <ADC_Disable+0x2e>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d047      	beq.n	8003bda <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030d 	and.w	r3, r3, #13
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d10f      	bne.n	8003b78 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0202 	orr.w	r2, r2, #2
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003b70:	f7fe ff5c 	bl	8002a2c <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b76:	e029      	b.n	8003bcc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f043 0210 	orr.w	r2, r3, #16
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b88:	f043 0201 	orr.w	r2, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e023      	b.n	8003bdc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b94:	f7fe ff4a 	bl	8002a2c <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d914      	bls.n	8003bcc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d10d      	bne.n	8003bcc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f043 0210 	orr.w	r2, r3, #16
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e007      	b.n	8003bdc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d0dc      	beq.n	8003b94 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <__NVIC_SetPriorityGrouping>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfa:	68ba      	ldr	r2, [r7, #8]
 8003bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c00:	4013      	ands	r3, r2
 8003c02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c16:	4a04      	ldr	r2, [pc, #16]	; (8003c28 <__NVIC_SetPriorityGrouping+0x44>)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	60d3      	str	r3, [r2, #12]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <__NVIC_GetPriorityGrouping>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <__NVIC_GetPriorityGrouping+0x18>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	f003 0307 	and.w	r3, r3, #7
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <__NVIC_EnableIRQ>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	db0b      	blt.n	8003c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	f003 021f 	and.w	r2, r3, #31
 8003c60:	4907      	ldr	r1, [pc, #28]	; (8003c80 <__NVIC_EnableIRQ+0x38>)
 8003c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	2001      	movs	r0, #1
 8003c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	e000e100 	.word	0xe000e100

08003c84 <__NVIC_SetPriority>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	db0a      	blt.n	8003cae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	490c      	ldr	r1, [pc, #48]	; (8003cd0 <__NVIC_SetPriority+0x4c>)
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	0112      	lsls	r2, r2, #4
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003cac:	e00a      	b.n	8003cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4908      	ldr	r1, [pc, #32]	; (8003cd4 <__NVIC_SetPriority+0x50>)
 8003cb4:	79fb      	ldrb	r3, [r7, #7]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	0112      	lsls	r2, r2, #4
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	761a      	strb	r2, [r3, #24]
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000e100 	.word	0xe000e100
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b089      	sub	sp, #36	; 0x24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f1c3 0307 	rsb	r3, r3, #7
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	bf28      	it	cs
 8003cf6:	2304      	movcs	r3, #4
 8003cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	2b06      	cmp	r3, #6
 8003d00:	d902      	bls.n	8003d08 <NVIC_EncodePriority+0x30>
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3b03      	subs	r3, #3
 8003d06:	e000      	b.n	8003d0a <NVIC_EncodePriority+0x32>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
<<<<<<< HEAD
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
=======
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43da      	mvns	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	401a      	ands	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
<<<<<<< HEAD
 8003d20:	f04f 31ff 	mov.w	r1, #4294967295
=======
 8003d20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa01 f303 	lsl.w	r3, r1, r3
 8003d2a:	43d9      	mvns	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d30:	4313      	orrs	r3, r2
         );
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3724      	adds	r7, #36	; 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d50:	d301      	bcc.n	8003d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d52:	2301      	movs	r3, #1
 8003d54:	e00f      	b.n	8003d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d56:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <SysTick_Config+0x40>)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5e:	210f      	movs	r1, #15
<<<<<<< HEAD
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
=======
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8003d64:	f7ff ff8e 	bl	8003c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <SysTick_Config+0x40>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <SysTick_Config+0x40>)
 8003d70:	2207      	movs	r2, #7
 8003d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000e010 	.word	0xe000e010

08003d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff29 	bl	8003be4 <__NVIC_SetPriorityGrouping>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b086      	sub	sp, #24
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	4603      	mov	r3, r0
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
 8003da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dac:	f7ff ff3e 	bl	8003c2c <__NVIC_GetPriorityGrouping>
 8003db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	6978      	ldr	r0, [r7, #20]
 8003db8:	f7ff ff8e 	bl	8003cd8 <NVIC_EncodePriority>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff5d 	bl	8003c84 <__NVIC_SetPriority>
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff31 	bl	8003c48 <__NVIC_EnableIRQ>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ffa2 	bl	8003d40 <SysTick_Config>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e014      	b.n	8003e42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	791b      	ldrb	r3, [r3, #4]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fe f963 	bl	80020f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2202      	movs	r2, #2
 8003e32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	795b      	ldrb	r3, [r3, #5]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_DAC_Start_DMA+0x1e>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e09b      	b.n	8003fde <HAL_DAC_Start_DMA+0x156>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d12f      	bne.n	8003f18 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	4a4a      	ldr	r2, [pc, #296]	; (8003fe8 <HAL_DAC_Start_DMA+0x160>)
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	4a49      	ldr	r2, [pc, #292]	; (8003fec <HAL_DAC_Start_DMA+0x164>)
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4a48      	ldr	r2, [pc, #288]	; (8003ff0 <HAL_DAC_Start_DMA+0x168>)
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ede:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d013      	beq.n	8003f0e <HAL_DAC_Start_DMA+0x86>
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d845      	bhi.n	8003f78 <HAL_DAC_Start_DMA+0xf0>
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_DAC_Start_DMA+0x72>
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d005      	beq.n	8003f04 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003ef8:	e03e      	b.n	8003f78 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	617b      	str	r3, [r7, #20]
        break;
 8003f02:	e03c      	b.n	8003f7e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	617b      	str	r3, [r7, #20]
        break;
 8003f0c:	e037      	b.n	8003f7e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3310      	adds	r3, #16
 8003f14:	617b      	str	r3, [r7, #20]
        break;
 8003f16:	e032      	b.n	8003f7e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4a35      	ldr	r2, [pc, #212]	; (8003ff4 <HAL_DAC_Start_DMA+0x16c>)
 8003f1e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	4a34      	ldr	r2, [pc, #208]	; (8003ff8 <HAL_DAC_Start_DMA+0x170>)
 8003f26:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	4a33      	ldr	r2, [pc, #204]	; (8003ffc <HAL_DAC_Start_DMA+0x174>)
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d013      	beq.n	8003f6e <HAL_DAC_Start_DMA+0xe6>
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d817      	bhi.n	8003f7c <HAL_DAC_Start_DMA+0xf4>
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_DAC_Start_DMA+0xd2>
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d005      	beq.n	8003f64 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003f58:	e010      	b.n	8003f7c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3314      	adds	r3, #20
 8003f60:	617b      	str	r3, [r7, #20]
        break;
 8003f62:	e00c      	b.n	8003f7e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3318      	adds	r3, #24
 8003f6a:	617b      	str	r3, [r7, #20]
        break;
 8003f6c:	e007      	b.n	8003f7e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	331c      	adds	r3, #28
 8003f74:	617b      	str	r3, [r7, #20]
        break;
 8003f76:	e002      	b.n	8003f7e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003f7c:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10f      	bne.n	8003fa4 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6898      	ldr	r0, [r3, #8]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	f000 f94d 	bl	800423c <HAL_DMA_Start_IT>
 8003fa2:	e00e      	b.n	8003fc2 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003fb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68d8      	ldr	r0, [r3, #12]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	f000 f93d 	bl	800423c <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3718      	adds	r7, #24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	080040d7 	.word	0x080040d7
 8003fec:	080040f9 	.word	0x080040f9
 8003ff0:	08004115 	.word	0x08004115
 8003ff4:	08004143 	.word	0x08004143
 8003ff8:	08004165 	.word	0x08004165
 8003ffc:	08004181 	.word	0x08004181

08004000 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	795b      	ldrb	r3, [r3, #5]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_DAC_ConfigChannel+0x20>
 800401c:	2302      	movs	r3, #2
 800401e:	e036      	b.n	800408e <HAL_DAC_ConfigChannel+0x8e>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2202      	movs	r2, #2
 800402a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004034:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4013      	ands	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	22c0      	movs	r2, #192	; 0xc0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	400a      	ands	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800409a:	b480      	push	{r7}
 800409c:	b083      	sub	sp, #12
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80040b6:	bf00      	nop
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80040c2:	b480      	push	{r7}
 80040c4:	b083      	sub	sp, #12
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f7ff feb0 	bl	8003e4a <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2201      	movs	r2, #1
 80040ee:	711a      	strb	r2, [r3, #4]
}
 80040f0:	bf00      	nop
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff fea9 	bl	8003e5e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f043 0204 	orr.w	r2, r3, #4
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff fe9f 	bl	8003e72 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	711a      	strb	r2, [r3, #4]
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f7ff ffa2 	bl	800409a <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2201      	movs	r2, #1
 800415a:	711a      	strb	r2, [r3, #4]
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff ff9b 	bl	80040ae <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8004178:	bf00      	nop
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f043 0204 	orr.w	r2, r3, #4
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff ff91 	bl	80040c2 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	711a      	strb	r2, [r3, #4]
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e037      	b.n	8004234 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80041de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80041e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f940 	bl	800449c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}  
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_DMA_Start_IT+0x20>
 8004258:	2302      	movs	r3, #2
 800425a:	e04a      	b.n	80042f2 <HAL_DMA_Start_IT+0xb6>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800426a:	2b01      	cmp	r3, #1
 800426c:	d13a      	bne.n	80042e4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2202      	movs	r2, #2
 8004272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 f8d4 	bl	8004440 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 020e 	orr.w	r2, r2, #14
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e00f      	b.n	80042d2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 020a 	orr.w	r2, r2, #10
 80042c0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0204 	bic.w	r2, r2, #4
 80042d0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e005      	b.n	80042f0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
 80042ee:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80042f0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80042f2:	4618      	mov	r0, r3
 80042f4:	3718      	adds	r7, #24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	2204      	movs	r2, #4
 8004318:	409a      	lsls	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d024      	beq.n	800436c <HAL_DMA_IRQHandler+0x72>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01f      	beq.n	800436c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0320 	and.w	r3, r3, #32
 8004336:	2b00      	cmp	r3, #0
 8004338:	d107      	bne.n	800434a <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0204 	bic.w	r2, r2, #4
 8004348:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	2104      	movs	r1, #4
 8004354:	fa01 f202 	lsl.w	r2, r1, r2
 8004358:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d06a      	beq.n	8004438 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800436a:	e065      	b.n	8004438 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	2202      	movs	r2, #2
 8004372:	409a      	lsls	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d02c      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xdc>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d027      	beq.n	80043d6 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10b      	bne.n	80043ac <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 020a 	bic.w	r2, r2, #10
 80043a2:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	2102      	movs	r1, #2
 80043b6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ba:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d035      	beq.n	8004438 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80043d4:	e030      	b.n	8004438 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2208      	movs	r2, #8
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d028      	beq.n	8004438 <HAL_DMA_IRQHandler+0x13e>
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 020e 	bic.w	r2, r2, #14
 80043fe:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004408:	2101      	movs	r1, #1
 800440a:	fa01 f202 	lsl.w	r2, r1, r2
 800440e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
    }
  }
}  
 8004436:	e7ff      	b.n	8004438 <HAL_DMA_IRQHandler+0x13e>
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	2101      	movs	r1, #1
 8004458:	fa01 f202 	lsl.w	r2, r1, r2
 800445c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b10      	cmp	r3, #16
 800446c:	d108      	bne.n	8004480 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800447e:	e007      	b.n	8004490 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	60da      	str	r2, [r3, #12]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <DMA_CalcBaseAndBitshift+0x60>)
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d80f      	bhi.n	80044d0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b12      	ldr	r3, [pc, #72]	; (8004500 <DMA_CalcBaseAndBitshift+0x64>)
 80044b8:	4413      	add	r3, r2
 80044ba:	4a12      	ldr	r2, [pc, #72]	; (8004504 <DMA_CalcBaseAndBitshift+0x68>)
 80044bc:	fba2 2303 	umull	r2, r3, r2, r3
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	009a      	lsls	r2, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a0f      	ldr	r2, [pc, #60]	; (8004508 <DMA_CalcBaseAndBitshift+0x6c>)
 80044cc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80044ce:	e00e      	b.n	80044ee <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	461a      	mov	r2, r3
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <DMA_CalcBaseAndBitshift+0x70>)
 80044d8:	4413      	add	r3, r2
 80044da:	4a0a      	ldr	r2, [pc, #40]	; (8004504 <DMA_CalcBaseAndBitshift+0x68>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	091b      	lsrs	r3, r3, #4
 80044e2:	009a      	lsls	r2, r3, #2
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <DMA_CalcBaseAndBitshift+0x74>)
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40020407 	.word	0x40020407
 8004500:	bffdfff8 	.word	0xbffdfff8
 8004504:	cccccccd 	.word	0xcccccccd
 8004508:	40020000 	.word	0x40020000
 800450c:	bffdfbf8 	.word	0xbffdfbf8
 8004510:	40020400 	.word	0x40020400

08004514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004522:	e154      	b.n	80047ce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2101      	movs	r1, #1
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	fa01 f303 	lsl.w	r3, r1, r3
 8004530:	4013      	ands	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8146 	beq.w	80047c8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d005      	beq.n	8004554 <HAL_GPIO_Init+0x40>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d130      	bne.n	80045b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	2203      	movs	r2, #3
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4013      	ands	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800458a:	2201      	movs	r2, #1
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	43db      	mvns	r3, r3
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4013      	ands	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	091b      	lsrs	r3, r3, #4
 80045a0:	f003 0201 	and.w	r2, r3, #1
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 0303 	and.w	r3, r3, #3
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d017      	beq.n	80045f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	2203      	movs	r2, #3
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43db      	mvns	r3, r3
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4013      	ands	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0303 	and.w	r3, r3, #3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d123      	bne.n	8004646 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	08da      	lsrs	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3208      	adds	r2, #8
 8004606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800460a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	220f      	movs	r2, #15
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43db      	mvns	r3, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4013      	ands	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	08da      	lsrs	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3208      	adds	r2, #8
 8004640:	6939      	ldr	r1, [r7, #16]
 8004642:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	005b      	lsls	r3, r3, #1
 8004650:	2203      	movs	r2, #3
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	f003 0203 	and.w	r2, r3, #3
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80a0 	beq.w	80047c8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004688:	4b58      	ldr	r3, [pc, #352]	; (80047ec <HAL_GPIO_Init+0x2d8>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	4a57      	ldr	r2, [pc, #348]	; (80047ec <HAL_GPIO_Init+0x2d8>)
 800468e:	f043 0301 	orr.w	r3, r3, #1
 8004692:	6193      	str	r3, [r2, #24]
 8004694:	4b55      	ldr	r3, [pc, #340]	; (80047ec <HAL_GPIO_Init+0x2d8>)
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046a0:	4a53      	ldr	r2, [pc, #332]	; (80047f0 <HAL_GPIO_Init+0x2dc>)
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	089b      	lsrs	r3, r3, #2
 80046a6:	3302      	adds	r3, #2
 80046a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	220f      	movs	r2, #15
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4013      	ands	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046ca:	d019      	beq.n	8004700 <HAL_GPIO_Init+0x1ec>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a49      	ldr	r2, [pc, #292]	; (80047f4 <HAL_GPIO_Init+0x2e0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <HAL_GPIO_Init+0x1e8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a48      	ldr	r2, [pc, #288]	; (80047f8 <HAL_GPIO_Init+0x2e4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00d      	beq.n	80046f8 <HAL_GPIO_Init+0x1e4>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a47      	ldr	r2, [pc, #284]	; (80047fc <HAL_GPIO_Init+0x2e8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d007      	beq.n	80046f4 <HAL_GPIO_Init+0x1e0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a46      	ldr	r2, [pc, #280]	; (8004800 <HAL_GPIO_Init+0x2ec>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d101      	bne.n	80046f0 <HAL_GPIO_Init+0x1dc>
 80046ec:	2304      	movs	r3, #4
 80046ee:	e008      	b.n	8004702 <HAL_GPIO_Init+0x1ee>
 80046f0:	2305      	movs	r3, #5
 80046f2:	e006      	b.n	8004702 <HAL_GPIO_Init+0x1ee>
 80046f4:	2303      	movs	r3, #3
 80046f6:	e004      	b.n	8004702 <HAL_GPIO_Init+0x1ee>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e002      	b.n	8004702 <HAL_GPIO_Init+0x1ee>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <HAL_GPIO_Init+0x1ee>
 8004700:	2300      	movs	r3, #0
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	f002 0203 	and.w	r2, r2, #3
 8004708:	0092      	lsls	r2, r2, #2
 800470a:	4093      	lsls	r3, r2
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004712:	4937      	ldr	r1, [pc, #220]	; (80047f0 <HAL_GPIO_Init+0x2dc>)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	3302      	adds	r3, #2
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004720:	4b38      	ldr	r3, [pc, #224]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	43db      	mvns	r3, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4013      	ands	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004744:	4a2f      	ldr	r2, [pc, #188]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800474a:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	43db      	mvns	r3, r3
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4013      	ands	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800476e:	4a25      	ldr	r2, [pc, #148]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	43db      	mvns	r3, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4013      	ands	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004798:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	43db      	mvns	r3, r3
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4013      	ands	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d003      	beq.n	80047c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047c2:	4a10      	ldr	r2, [pc, #64]	; (8004804 <HAL_GPIO_Init+0x2f0>)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	3301      	adds	r3, #1
 80047cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f47f aea3 	bne.w	8004524 <HAL_GPIO_Init+0x10>
  }
}
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40010000 	.word	0x40010000
 80047f4:	48000400 	.word	0x48000400
 80047f8:	48000800 	.word	0x48000800
 80047fc:	48000c00 	.word	0x48000c00
 8004800:	48001000 	.word	0x48001000
 8004804:	40010400 	.word	0x40010400

08004808 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	887b      	ldrh	r3, [r7, #2]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
 8004824:	e001      	b.n	800482a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800482a:	7bfb      	ldrb	r3, [r7, #15]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
 8004844:	4613      	mov	r3, r2
 8004846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004848:	787b      	ldrb	r3, [r7, #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004854:	e002      	b.n	800485c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e081      	b.n	800497e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fd fca2 	bl	80021d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2224      	movs	r2, #36	; 0x24
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d107      	bne.n	80048e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	e006      	b.n	80048f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d104      	bne.n	8004902 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004900:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004910:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004914:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68da      	ldr	r2, [r3, #12]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69d9      	ldr	r1, [r3, #28]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a1a      	ldr	r2, [r3, #32]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	461a      	mov	r2, r3
 8004996:	4603      	mov	r3, r0
 8004998:	817b      	strh	r3, [r7, #10]
 800499a:	460b      	mov	r3, r1
 800499c:	813b      	strh	r3, [r7, #8]
 800499e:	4613      	mov	r3, r2
 80049a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	f040 80f9 	bne.w	8004ba2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d002      	beq.n	80049bc <HAL_I2C_Mem_Write+0x34>
 80049b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e0ed      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d101      	bne.n	80049d6 <HAL_I2C_Mem_Write+0x4e>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e0e6      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049de:	f7fe f825 	bl	8002a2c <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2319      	movs	r3, #25
 80049ea:	2201      	movs	r2, #1
 80049ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f955 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0d1      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2221      	movs	r2, #33	; 0x21
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2240      	movs	r2, #64	; 0x40
 8004a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a3a      	ldr	r2, [r7, #32]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a28:	88f8      	ldrh	r0, [r7, #6]
 8004a2a:	893a      	ldrh	r2, [r7, #8]
 8004a2c:	8979      	ldrh	r1, [r7, #10]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	4603      	mov	r3, r0
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f8b9 	bl	8004bb0 <I2C_RequestMemoryWrite>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0a9      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2bff      	cmp	r3, #255	; 0xff
 8004a58:	d90e      	bls.n	8004a78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	22ff      	movs	r2, #255	; 0xff
 8004a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	8979      	ldrh	r1, [r7, #10]
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 facf 	bl	8005014 <I2C_TransferConfig>
 8004a76:	e00f      	b.n	8004a98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	8979      	ldrh	r1, [r7, #10]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fabe 	bl	8005014 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 f94e 	bl	8004d3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e07b      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab0:	781a      	ldrb	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d034      	beq.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d130      	bne.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f8d1 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e04d      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2bff      	cmp	r3, #255	; 0xff
 8004b10:	d90e      	bls.n	8004b30 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	8979      	ldrh	r1, [r7, #10]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fa73 	bl	8005014 <I2C_TransferConfig>
 8004b2e:	e00f      	b.n	8004b50 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	8979      	ldrh	r1, [r7, #10]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fa62 	bl	8005014 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d19e      	bne.n	8004a98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f934 	bl	8004dcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01a      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2220      	movs	r2, #32
 8004b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <HAL_I2C_Mem_Write+0x224>)
 8004b82:	400b      	ands	r3, r1
 8004b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	fe00e800 	.word	0xfe00e800

08004bb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	4608      	mov	r0, r1
 8004bba:	4611      	mov	r1, r2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	817b      	strh	r3, [r7, #10]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	813b      	strh	r3, [r7, #8]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	8979      	ldrh	r1, [r7, #10]
 8004bd0:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <I2C_RequestMemoryWrite+0xa4>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 fa1b 	bl	8005014 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bde:	69fa      	ldr	r2, [r7, #28]
 8004be0:	69b9      	ldr	r1, [r7, #24]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f8ab 	bl	8004d3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e02c      	b.n	8004c4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bf2:	88fb      	ldrh	r3, [r7, #6]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d105      	bne.n	8004c04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf8:	893b      	ldrh	r3, [r7, #8]
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	629a      	str	r2, [r3, #40]	; 0x28
 8004c02:	e015      	b.n	8004c30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c04:	893b      	ldrh	r3, [r7, #8]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	69b9      	ldr	r1, [r7, #24]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f891 	bl	8004d3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e012      	b.n	8004c4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c26:	893b      	ldrh	r3, [r7, #8]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	2200      	movs	r2, #0
 8004c38:	2180      	movs	r1, #128	; 0x80
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f830 	bl	8004ca0 <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	80002000 	.word	0x80002000

08004c58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d103      	bne.n	8004c76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d007      	beq.n	8004c94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	619a      	str	r2, [r3, #24]
  }
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cb0:	e031      	b.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
<<<<<<< HEAD
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
=======
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8004cb8:	d02d      	beq.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fd feb7 	bl	8002a2c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d122      	bne.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	79fb      	ldrb	r3, [r7, #7]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d113      	bne.n	8004d16 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf2:	f043 0220 	orr.w	r2, r3, #32
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00f      	b.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d0be      	beq.n	8004cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d4a:	e033      	b.n	8004db4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f87f 	bl	8004e54 <I2C_IsErrorOccurred>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e031      	b.n	8004dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	68bb      	ldr	r3, [r7, #8]
<<<<<<< HEAD
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
=======
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8004d66:	d025      	beq.n	8004db4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fd fe60 	bl	8002a2c <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11a      	bne.n	8004db4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d013      	beq.n	8004db4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d90:	f043 0220 	orr.w	r2, r3, #32
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e007      	b.n	8004dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d1c4      	bne.n	8004d4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dd8:	e02f      	b.n	8004e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f000 f838 	bl	8004e54 <I2C_IsErrorOccurred>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d001      	beq.n	8004dee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e02d      	b.n	8004e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fd fe1d 	bl	8002a2c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d11a      	bne.n	8004e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d013      	beq.n	8004e3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f043 0220 	orr.w	r2, r3, #32
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e007      	b.n	8004e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d1c8      	bne.n	8004dda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08a      	sub	sp, #40	; 0x28
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d068      	beq.n	8004f52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2210      	movs	r2, #16
 8004e86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e88:	e049      	b.n	8004f1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
<<<<<<< HEAD
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
=======
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8004e90:	d045      	beq.n	8004f1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fd fdcb 	bl	8002a2c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <I2C_IsErrorOccurred+0x54>
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d13a      	bne.n	8004f1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eca:	d121      	bne.n	8004f10 <I2C_IsErrorOccurred+0xbc>
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ed2:	d01d      	beq.n	8004f10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ed4:	7cfb      	ldrb	r3, [r7, #19]
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	d01a      	beq.n	8004f10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ee8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004eea:	f7fd fd9f 	bl	8002a2c <HAL_GetTick>
 8004eee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef0:	e00e      	b.n	8004f10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ef2:	f7fd fd9b 	bl	8002a2c <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b19      	cmp	r3, #25
 8004efe:	d907      	bls.n	8004f10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	f043 0320 	orr.w	r3, r3, #32
 8004f06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004f0e:	e006      	b.n	8004f1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d1e9      	bne.n	8004ef2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d003      	beq.n	8004f34 <I2C_IsErrorOccurred+0xe0>
 8004f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0aa      	beq.n	8004e8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d103      	bne.n	8004f44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2220      	movs	r2, #32
 8004f42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	f043 0304 	orr.w	r3, r3, #4
 8004f4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	f043 0301 	orr.w	r3, r3, #1
 8004f6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00b      	beq.n	8004f9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	f043 0308 	orr.w	r3, r3, #8
 8004f8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00b      	beq.n	8004fc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	f043 0302 	orr.w	r3, r3, #2
 8004fae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01c      	beq.n	8005002 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f7ff fe45 	bl	8004c58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b0d      	ldr	r3, [pc, #52]	; (8005010 <I2C_IsErrorOccurred+0x1bc>)
 8004fda:	400b      	ands	r3, r1
 8004fdc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005006:	4618      	mov	r0, r3
 8005008:	3728      	adds	r7, #40	; 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	fe00e800 	.word	0xfe00e800

08005014 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	817b      	strh	r3, [r7, #10]
 8005022:	4613      	mov	r3, r2
 8005024:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005026:	897b      	ldrh	r3, [r7, #10]
 8005028:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800502c:	7a7b      	ldrb	r3, [r7, #9]
 800502e:	041b      	lsls	r3, r3, #16
 8005030:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005034:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	4313      	orrs	r3, r2
 800503e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005042:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	0d5b      	lsrs	r3, r3, #21
 800504e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005052:	4b08      	ldr	r3, [pc, #32]	; (8005074 <I2C_TransferConfig+0x60>)
 8005054:	430b      	orrs	r3, r1
 8005056:	43db      	mvns	r3, r3
 8005058:	ea02 0103 	and.w	r1, r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	03ff63ff 	.word	0x03ff63ff

08005078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b20      	cmp	r3, #32
 800508c:	d138      	bne.n	8005100 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005098:	2302      	movs	r3, #2
 800509a:	e032      	b.n	8005102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6819      	ldr	r1, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0201 	orr.w	r2, r2, #1
 80050ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050fc:	2300      	movs	r3, #0
 80050fe:	e000      	b.n	8005102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005100:	2302      	movs	r3, #2
  }
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b20      	cmp	r3, #32
 8005122:	d139      	bne.n	8005198 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800512e:	2302      	movs	r3, #2
 8005130:	e033      	b.n	800519a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2224      	movs	r2, #36	; 0x24
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0201 	bic.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005160:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2220      	movs	r2, #32
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	e000      	b.n	800519a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005198:	2302      	movs	r3, #2
  }
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a8:	b08b      	sub	sp, #44	; 0x2c
 80051aa:	af06      	add	r7, sp, #24
 80051ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0c4      	b.n	8005342 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d106      	bne.n	80051d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fd f943 	bl	8002458 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2203      	movs	r2, #3
 80051d6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f003 fad0 	bl	8008784 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]
 80051e8:	e040      	b.n	800526c <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	6879      	ldr	r1, [r7, #4]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	440b      	add	r3, r1
 80051fa:	3301      	adds	r3, #1
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005200:	7bfb      	ldrb	r3, [r7, #15]
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	440b      	add	r3, r1
 8005210:	7bfa      	ldrb	r2, [r7, #15]
 8005212:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	440b      	add	r3, r1
 8005224:	3303      	adds	r3, #3
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800522a:	7bfa      	ldrb	r2, [r7, #15]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	00db      	lsls	r3, r3, #3
 8005236:	440b      	add	r3, r1
 8005238:	3338      	adds	r3, #56	; 0x38
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800523e:	7bfa      	ldrb	r2, [r7, #15]
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	440b      	add	r3, r1
 800524c:	333c      	adds	r3, #60	; 0x3c
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005252:	7bfa      	ldrb	r2, [r7, #15]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	440b      	add	r3, r1
 8005260:	3340      	adds	r3, #64	; 0x40
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	3301      	adds	r3, #1
 800526a:	73fb      	strb	r3, [r7, #15]
 800526c:	7bfa      	ldrb	r2, [r7, #15]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	429a      	cmp	r2, r3
 8005274:	d3b9      	bcc.n	80051ea <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	e044      	b.n	8005306 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	440b      	add	r3, r1
 800528a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005292:	7bfa      	ldrb	r2, [r7, #15]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	440b      	add	r3, r1
 80052a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052a8:	7bfa      	ldrb	r2, [r7, #15]
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	440b      	add	r3, r1
 80052b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052be:	7bfa      	ldrb	r2, [r7, #15]
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	440b      	add	r3, r1
 80052cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052d4:	7bfa      	ldrb	r2, [r7, #15]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052ea:	7bfa      	ldrb	r2, [r7, #15]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	440b      	add	r3, r1
 80052f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	3301      	adds	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]
 8005306:	7bfa      	ldrb	r2, [r7, #15]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	429a      	cmp	r2, r3
 800530e:	d3b5      	bcc.n	800527c <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	687e      	ldr	r6, [r7, #4]
 8005318:	466d      	mov	r5, sp
 800531a:	f106 0410 	add.w	r4, r6, #16
 800531e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005320:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005322:	6823      	ldr	r3, [r4, #0]
 8005324:	602b      	str	r3, [r5, #0]
 8005326:	1d33      	adds	r3, r6, #4
 8005328:	cb0e      	ldmia	r3, {r1, r2, r3}
 800532a:	6838      	ldr	r0, [r7, #0]
 800532c:	f003 fa45 	bl	80087ba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800534c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005352:	af00      	add	r7, sp, #0
 8005354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005358:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800535c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800535e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005362:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	f001 b823 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005372:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005376:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 817d 	beq.w	8005682 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005388:	4bbc      	ldr	r3, [pc, #752]	; (800567c <HAL_RCC_OscConfig+0x330>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 030c 	and.w	r3, r3, #12
 8005390:	2b04      	cmp	r3, #4
 8005392:	d00c      	beq.n	80053ae <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005394:	4bb9      	ldr	r3, [pc, #740]	; (800567c <HAL_RCC_OscConfig+0x330>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 030c 	and.w	r3, r3, #12
 800539c:	2b08      	cmp	r3, #8
 800539e:	d15c      	bne.n	800545a <HAL_RCC_OscConfig+0x10e>
 80053a0:	4bb6      	ldr	r3, [pc, #728]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ac:	d155      	bne.n	800545a <HAL_RCC_OscConfig+0x10e>
 80053ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053b2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80053ba:	fa93 f3a3 	rbit	r3, r3
 80053be:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053c2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d102      	bne.n	80053e0 <HAL_RCC_OscConfig+0x94>
 80053da:	4ba8      	ldr	r3, [pc, #672]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	e015      	b.n	800540c <HAL_RCC_OscConfig+0xc0>
 80053e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053e4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80053ec:	fa93 f3a3 	rbit	r3, r3
 80053f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80053f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053f8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80053fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005400:	fa93 f3a3 	rbit	r3, r3
 8005404:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005408:	4b9c      	ldr	r3, [pc, #624]	; (800567c <HAL_RCC_OscConfig+0x330>)
 800540a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005410:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005414:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005418:	fa92 f2a2 	rbit	r2, r2
 800541c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005420:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005424:	fab2 f282 	clz	r2, r2
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	f042 0220 	orr.w	r2, r2, #32
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	f002 021f 	and.w	r2, r2, #31
 8005434:	2101      	movs	r1, #1
 8005436:	fa01 f202 	lsl.w	r2, r1, r2
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 811f 	beq.w	8005680 <HAL_RCC_OscConfig+0x334>
 8005442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 8116 	bne.w	8005680 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f000 bfaf 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800545a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800545e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546a:	d106      	bne.n	800547a <HAL_RCC_OscConfig+0x12e>
 800546c:	4b83      	ldr	r3, [pc, #524]	; (800567c <HAL_RCC_OscConfig+0x330>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a82      	ldr	r2, [pc, #520]	; (800567c <HAL_RCC_OscConfig+0x330>)
 8005472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005476:	6013      	str	r3, [r2, #0]
 8005478:	e036      	b.n	80054e8 <HAL_RCC_OscConfig+0x19c>
 800547a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10c      	bne.n	80054a4 <HAL_RCC_OscConfig+0x158>
 800548a:	4b7c      	ldr	r3, [pc, #496]	; (800567c <HAL_RCC_OscConfig+0x330>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a7b      	ldr	r2, [pc, #492]	; (800567c <HAL_RCC_OscConfig+0x330>)
 8005490:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	4b79      	ldr	r3, [pc, #484]	; (800567c <HAL_RCC_OscConfig+0x330>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a78      	ldr	r2, [pc, #480]	; (800567c <HAL_RCC_OscConfig+0x330>)
 800549c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	e021      	b.n	80054e8 <HAL_RCC_OscConfig+0x19c>
 80054a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b4:	d10c      	bne.n	80054d0 <HAL_RCC_OscConfig+0x184>
 80054b6:	4b71      	ldr	r3, [pc, #452]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a70      	ldr	r2, [pc, #448]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b6e      	ldr	r3, [pc, #440]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a6d      	ldr	r2, [pc, #436]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e00b      	b.n	80054e8 <HAL_RCC_OscConfig+0x19c>
 80054d0:	4b6a      	ldr	r3, [pc, #424]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a69      	ldr	r2, [pc, #420]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b67      	ldr	r3, [pc, #412]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a66      	ldr	r2, [pc, #408]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054e8:	4b64      	ldr	r3, [pc, #400]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	f023 020f 	bic.w	r2, r3, #15
 80054f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80054f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	495f      	ldr	r1, [pc, #380]	; (800567c <HAL_RCC_OscConfig+0x330>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005506:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d059      	beq.n	80055c6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005512:	f7fd fa8b 	bl	8002a2c <HAL_GetTick>
 8005516:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	e00a      	b.n	8005532 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800551c:	f7fd fa86 	bl	8002a2c <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b64      	cmp	r3, #100	; 0x64
 800552a:	d902      	bls.n	8005532 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	f000 bf43 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>
 8005532:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005536:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800553e:	fa93 f3a3 	rbit	r3, r3
 8005542:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005546:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b01      	cmp	r3, #1
 800555c:	d102      	bne.n	8005564 <HAL_RCC_OscConfig+0x218>
 800555e:	4b47      	ldr	r3, [pc, #284]	; (800567c <HAL_RCC_OscConfig+0x330>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	e015      	b.n	8005590 <HAL_RCC_OscConfig+0x244>
 8005564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005568:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8005570:	fa93 f3a3 	rbit	r3, r3
 8005574:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005578:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800557c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005580:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8005584:	fa93 f3a3 	rbit	r3, r3
 8005588:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800558c:	4b3b      	ldr	r3, [pc, #236]	; (800567c <HAL_RCC_OscConfig+0x330>)
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005594:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8005598:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800559c:	fa92 f2a2 	rbit	r2, r2
 80055a0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80055a4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80055a8:	fab2 f282 	clz	r2, r2
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	f042 0220 	orr.w	r2, r2, #32
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	f002 021f 	and.w	r2, r2, #31
 80055b8:	2101      	movs	r1, #1
 80055ba:	fa01 f202 	lsl.w	r2, r1, r2
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0ab      	beq.n	800551c <HAL_RCC_OscConfig+0x1d0>
 80055c4:	e05d      	b.n	8005682 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c6:	f7fd fa31 	bl	8002a2c <HAL_GetTick>
 80055ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ce:	e00a      	b.n	80055e6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fd fa2c 	bl	8002a2c <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b64      	cmp	r3, #100	; 0x64
 80055de:	d902      	bls.n	80055e6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	f000 bee9 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>
 80055e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055ea:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80055f2:	fa93 f3a3 	rbit	r3, r3
 80055f6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80055fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	b2db      	uxtb	r3, r3
 8005608:	f043 0301 	orr.w	r3, r3, #1
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HAL_RCC_OscConfig+0x2cc>
 8005612:	4b1a      	ldr	r3, [pc, #104]	; (800567c <HAL_RCC_OscConfig+0x330>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	e015      	b.n	8005644 <HAL_RCC_OscConfig+0x2f8>
 8005618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800561c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005620:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005624:	fa93 f3a3 	rbit	r3, r3
 8005628:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800562c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005630:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005634:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005638:	fa93 f3a3 	rbit	r3, r3
 800563c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005640:	4b0e      	ldr	r3, [pc, #56]	; (800567c <HAL_RCC_OscConfig+0x330>)
 8005642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005644:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005648:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800564c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005650:	fa92 f2a2 	rbit	r2, r2
 8005654:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005658:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800565c:	fab2 f282 	clz	r2, r2
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	f042 0220 	orr.w	r2, r2, #32
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	f002 021f 	and.w	r2, r2, #31
 800566c:	2101      	movs	r1, #1
 800566e:	fa01 f202 	lsl.w	r2, r1, r2
 8005672:	4013      	ands	r3, r2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ab      	bne.n	80055d0 <HAL_RCC_OscConfig+0x284>
 8005678:	e003      	b.n	8005682 <HAL_RCC_OscConfig+0x336>
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005686:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	f000 817d 	beq.w	8005992 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005698:	4ba6      	ldr	r3, [pc, #664]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 030c 	and.w	r3, r3, #12
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00b      	beq.n	80056bc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80056a4:	4ba3      	ldr	r3, [pc, #652]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d172      	bne.n	8005796 <HAL_RCC_OscConfig+0x44a>
 80056b0:	4ba0      	ldr	r3, [pc, #640]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d16c      	bne.n	8005796 <HAL_RCC_OscConfig+0x44a>
 80056bc:	2302      	movs	r3, #2
 80056be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80056c6:	fa93 f3a3 	rbit	r3, r3
 80056ca:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80056ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056d2:	fab3 f383 	clz	r3, r3
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	095b      	lsrs	r3, r3, #5
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	f043 0301 	orr.w	r3, r3, #1
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d102      	bne.n	80056ec <HAL_RCC_OscConfig+0x3a0>
 80056e6:	4b93      	ldr	r3, [pc, #588]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	e013      	b.n	8005714 <HAL_RCC_OscConfig+0x3c8>
 80056ec:	2302      	movs	r3, #2
 80056ee:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80056f6:	fa93 f3a3 	rbit	r3, r3
 80056fa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80056fe:	2302      	movs	r3, #2
 8005700:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005704:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005710:	4b88      	ldr	r3, [pc, #544]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2202      	movs	r2, #2
 8005716:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800571a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800571e:	fa92 f2a2 	rbit	r2, r2
 8005722:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005726:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800572a:	fab2 f282 	clz	r2, r2
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	f042 0220 	orr.w	r2, r2, #32
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	f002 021f 	and.w	r2, r2, #31
 800573a:	2101      	movs	r1, #1
 800573c:	fa01 f202 	lsl.w	r2, r1, r2
 8005740:	4013      	ands	r3, r2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00a      	beq.n	800575c <HAL_RCC_OscConfig+0x410>
 8005746:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800574a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d002      	beq.n	800575c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f000 be2e 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800575c:	4b75      	ldr	r3, [pc, #468]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005768:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	21f8      	movs	r1, #248	; 0xf8
 8005772:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800577a:	fa91 f1a1 	rbit	r1, r1
 800577e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005782:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005786:	fab1 f181 	clz	r1, r1
 800578a:	b2c9      	uxtb	r1, r1
 800578c:	408b      	lsls	r3, r1
 800578e:	4969      	ldr	r1, [pc, #420]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 8005790:	4313      	orrs	r3, r2
 8005792:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005794:	e0fd      	b.n	8005992 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800579a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 8088 	beq.w	80058b8 <HAL_RCC_OscConfig+0x56c>
 80057a8:	2301      	movs	r3, #1
 80057aa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ae:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80057ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057be:	fab3 f383 	clz	r3, r3
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80057c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	461a      	mov	r2, r3
 80057d0:	2301      	movs	r3, #1
 80057d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d4:	f7fd f92a 	bl	8002a2c <HAL_GetTick>
 80057d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057dc:	e00a      	b.n	80057f4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057de:	f7fd f925 	bl	8002a2c <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d902      	bls.n	80057f4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	f000 bde2 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>
 80057f4:	2302      	movs	r3, #2
 80057f6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80057fe:	fa93 f3a3 	rbit	r3, r3
 8005802:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005806:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580a:	fab3 f383 	clz	r3, r3
 800580e:	b2db      	uxtb	r3, r3
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	b2db      	uxtb	r3, r3
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b01      	cmp	r3, #1
 800581c:	d102      	bne.n	8005824 <HAL_RCC_OscConfig+0x4d8>
 800581e:	4b45      	ldr	r3, [pc, #276]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	e013      	b.n	800584c <HAL_RCC_OscConfig+0x500>
 8005824:	2302      	movs	r3, #2
 8005826:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800582e:	fa93 f3a3 	rbit	r3, r3
 8005832:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005836:	2302      	movs	r3, #2
 8005838:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800583c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005840:	fa93 f3a3 	rbit	r3, r3
 8005844:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005848:	4b3a      	ldr	r3, [pc, #232]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	2202      	movs	r2, #2
 800584e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005852:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005856:	fa92 f2a2 	rbit	r2, r2
 800585a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800585e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005862:	fab2 f282 	clz	r2, r2
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	f042 0220 	orr.w	r2, r2, #32
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	f002 021f 	and.w	r2, r2, #31
 8005872:	2101      	movs	r1, #1
 8005874:	fa01 f202 	lsl.w	r2, r1, r2
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0af      	beq.n	80057de <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587e:	4b2d      	ldr	r3, [pc, #180]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800588a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	21f8      	movs	r1, #248	; 0xf8
 8005894:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005898:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800589c:	fa91 f1a1 	rbit	r1, r1
 80058a0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80058a4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80058a8:	fab1 f181 	clz	r1, r1
 80058ac:	b2c9      	uxtb	r1, r1
 80058ae:	408b      	lsls	r3, r1
 80058b0:	4920      	ldr	r1, [pc, #128]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]
 80058b6:	e06c      	b.n	8005992 <HAL_RCC_OscConfig+0x646>
 80058b8:	2301      	movs	r3, #1
 80058ba:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80058c2:	fa93 f3a3 	rbit	r3, r3
 80058c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80058ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058ce:	fab3 f383 	clz	r3, r3
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80058d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	461a      	mov	r2, r3
 80058e0:	2300      	movs	r3, #0
 80058e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fd f8a2 	bl	8002a2c <HAL_GetTick>
 80058e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ec:	e00a      	b.n	8005904 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ee:	f7fd f89d 	bl	8002a2c <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d902      	bls.n	8005904 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	f000 bd5a 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>
 8005904:	2302      	movs	r3, #2
 8005906:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800590e:	fa93 f3a3 	rbit	r3, r3
 8005912:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591a:	fab3 f383 	clz	r3, r3
 800591e:	b2db      	uxtb	r3, r3
 8005920:	095b      	lsrs	r3, r3, #5
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d104      	bne.n	8005938 <HAL_RCC_OscConfig+0x5ec>
 800592e:	4b01      	ldr	r3, [pc, #4]	; (8005934 <HAL_RCC_OscConfig+0x5e8>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	e015      	b.n	8005960 <HAL_RCC_OscConfig+0x614>
 8005934:	40021000 	.word	0x40021000
 8005938:	2302      	movs	r3, #2
 800593a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005942:	fa93 f3a3 	rbit	r3, r3
 8005946:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800594a:	2302      	movs	r3, #2
 800594c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005950:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005954:	fa93 f3a3 	rbit	r3, r3
 8005958:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800595c:	4bc8      	ldr	r3, [pc, #800]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 800595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005960:	2202      	movs	r2, #2
 8005962:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005966:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800596a:	fa92 f2a2 	rbit	r2, r2
 800596e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005972:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005976:	fab2 f282 	clz	r2, r2
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	f042 0220 	orr.w	r2, r2, #32
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	f002 021f 	and.w	r2, r2, #31
 8005986:	2101      	movs	r1, #1
 8005988:	fa01 f202 	lsl.w	r2, r1, r2
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1ad      	bne.n	80058ee <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 8110 	beq.w	8005bc8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d079      	beq.n	8005aac <HAL_RCC_OscConfig+0x760>
 80059b8:	2301      	movs	r3, #1
 80059ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80059c2:	fa93 f3a3 	rbit	r3, r3
 80059c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80059ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	4bab      	ldr	r3, [pc, #684]	; (8005c84 <HAL_RCC_OscConfig+0x938>)
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	461a      	mov	r2, r3
 80059de:	2301      	movs	r3, #1
 80059e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e2:	f7fd f823 	bl	8002a2c <HAL_GetTick>
 80059e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ec:	f7fd f81e 	bl	8002a2c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d902      	bls.n	8005a02 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	f000 bcdb 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>
 8005a02:	2302      	movs	r3, #2
 8005a04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a08:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005a0c:	fa93 f3a3 	rbit	r3, r3
 8005a10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a18:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a24:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	fa93 f2a3 	rbit	r2, r3
 8005a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a40:	2202      	movs	r2, #2
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	fa93 f2a3 	rbit	r2, r3
 8005a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a5a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5c:	4b88      	ldr	r3, [pc, #544]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 8005a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a64:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a68:	2102      	movs	r1, #2
 8005a6a:	6019      	str	r1, [r3, #0]
 8005a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a70:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	fa93 f1a3 	rbit	r1, r3
 8005a7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a82:	6019      	str	r1, [r3, #0]
  return result;
 8005a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a88:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	fab3 f383 	clz	r3, r3
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0a0      	beq.n	80059ec <HAL_RCC_OscConfig+0x6a0>
 8005aaa:	e08d      	b.n	8005bc8 <HAL_RCC_OscConfig+0x87c>
 8005aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ab0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005abc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	fa93 f2a3 	rbit	r2, r3
 8005ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ace:	601a      	str	r2, [r3, #0]
  return result;
 8005ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ad4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ad8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ada:	fab3 f383 	clz	r3, r3
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4b68      	ldr	r3, [pc, #416]	; (8005c84 <HAL_RCC_OscConfig+0x938>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aee:	f7fc ff9d 	bl	8002a2c <HAL_GetTick>
 8005af2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af6:	e00a      	b.n	8005b0e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005af8:	f7fc ff98 	bl	8002a2c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d902      	bls.n	8005b0e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	f000 bc55 	b.w	80063b8 <HAL_RCC_OscConfig+0x106c>
 8005b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b12:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b16:	2202      	movs	r2, #2
 8005b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b1e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	fa93 f2a3 	rbit	r2, r3
 8005b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b2c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b36:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b42:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	fa93 f2a3 	rbit	r2, r3
 8005b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5e:	2202      	movs	r2, #2
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	fa93 f2a3 	rbit	r2, r3
 8005b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b74:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005b78:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b7a:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 8005b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b82:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b86:	2102      	movs	r1, #2
 8005b88:	6019      	str	r1, [r3, #0]
 8005b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	fa93 f1a3 	rbit	r1, r3
 8005b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005b9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005ba0:	6019      	str	r1, [r3, #0]
  return result;
 8005ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ba6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	fab3 f383 	clz	r3, r3
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d197      	bne.n	8005af8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bcc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 81a1 	beq.w	8005f20 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bde:	2300      	movs	r3, #0
 8005be0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be4:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d116      	bne.n	8005c1e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bf0:	4b23      	ldr	r3, [pc, #140]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	4a22      	ldr	r2, [pc, #136]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 8005bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	61d3      	str	r3, [r2, #28]
 8005bfc:	4b20      	ldr	r3, [pc, #128]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c08:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c12:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005c16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <HAL_RCC_OscConfig+0x93c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d11a      	bne.n	8005c60 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c2a:	4b17      	ldr	r3, [pc, #92]	; (8005c88 <HAL_RCC_OscConfig+0x93c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a16      	ldr	r2, [pc, #88]	; (8005c88 <HAL_RCC_OscConfig+0x93c>)
 8005c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c36:	f7fc fef9 	bl	8002a2c <HAL_GetTick>
 8005c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c3e:	e009      	b.n	8005c54 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c40:	f7fc fef4 	bl	8002a2c <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	2b64      	cmp	r3, #100	; 0x64
 8005c4e:	d901      	bls.n	8005c54 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e3b1      	b.n	80063b8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c54:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <HAL_RCC_OscConfig+0x93c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d0ef      	beq.n	8005c40 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d10d      	bne.n	8005c8c <HAL_RCC_OscConfig+0x940>
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	4a02      	ldr	r2, [pc, #8]	; (8005c80 <HAL_RCC_OscConfig+0x934>)
 8005c76:	f043 0301 	orr.w	r3, r3, #1
 8005c7a:	6213      	str	r3, [r2, #32]
 8005c7c:	e03c      	b.n	8005cf8 <HAL_RCC_OscConfig+0x9ac>
 8005c7e:	bf00      	nop
 8005c80:	40021000 	.word	0x40021000
 8005c84:	10908120 	.word	0x10908120
 8005c88:	40007000 	.word	0x40007000
 8005c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10c      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x96a>
 8005c9c:	4bc1      	ldr	r3, [pc, #772]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	4ac0      	ldr	r2, [pc, #768]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	6213      	str	r3, [r2, #32]
 8005ca8:	4bbe      	ldr	r3, [pc, #760]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	4abd      	ldr	r2, [pc, #756]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005cae:	f023 0304 	bic.w	r3, r3, #4
 8005cb2:	6213      	str	r3, [r2, #32]
 8005cb4:	e020      	b.n	8005cf8 <HAL_RCC_OscConfig+0x9ac>
 8005cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x994>
 8005cc6:	4bb7      	ldr	r3, [pc, #732]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	4ab6      	ldr	r2, [pc, #728]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005ccc:	f043 0304 	orr.w	r3, r3, #4
 8005cd0:	6213      	str	r3, [r2, #32]
 8005cd2:	4bb4      	ldr	r3, [pc, #720]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	4ab3      	ldr	r2, [pc, #716]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6213      	str	r3, [r2, #32]
 8005cde:	e00b      	b.n	8005cf8 <HAL_RCC_OscConfig+0x9ac>
 8005ce0:	4bb0      	ldr	r3, [pc, #704]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	4aaf      	ldr	r2, [pc, #700]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	6213      	str	r3, [r2, #32]
 8005cec:	4bad      	ldr	r3, [pc, #692]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	4aac      	ldr	r2, [pc, #688]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005cf2:	f023 0304 	bic.w	r3, r3, #4
 8005cf6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8081 	beq.w	8005e0c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d0a:	f7fc fe8f 	bl	8002a2c <HAL_GetTick>
 8005d0e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d12:	e00b      	b.n	8005d2c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d14:	f7fc fe8a 	bl	8002a2c <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e345      	b.n	80063b8 <HAL_RCC_OscConfig+0x106c>
 8005d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d30:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005d34:	2202      	movs	r2, #2
 8005d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d3c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	fa93 f2a3 	rbit	r2, r3
 8005d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d4a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d54:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d58:	2202      	movs	r2, #2
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	fa93 f2a3 	rbit	r2, r3
 8005d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005d72:	601a      	str	r2, [r3, #0]
  return result;
 8005d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d78:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005d7c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7e:	fab3 f383 	clz	r3, r3
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	095b      	lsrs	r3, r3, #5
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f043 0302 	orr.w	r3, r3, #2
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d102      	bne.n	8005d98 <HAL_RCC_OscConfig+0xa4c>
 8005d92:	4b84      	ldr	r3, [pc, #528]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	e013      	b.n	8005dc0 <HAL_RCC_OscConfig+0xa74>
 8005d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d9c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005da0:	2202      	movs	r2, #2
 8005da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005da8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	fa93 f2a3 	rbit	r2, r3
 8005db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	4b79      	ldr	r3, [pc, #484]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dc4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005dc8:	2102      	movs	r1, #2
 8005dca:	6011      	str	r1, [r2, #0]
 8005dcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dd0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	fa92 f1a2 	rbit	r1, r2
 8005dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005dde:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005de2:	6011      	str	r1, [r2, #0]
  return result;
 8005de4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005de8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	fab2 f282 	clz	r2, r2
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	f002 021f 	and.w	r2, r2, #31
 8005dfe:	2101      	movs	r1, #1
 8005e00:	fa01 f202 	lsl.w	r2, r1, r2
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d084      	beq.n	8005d14 <HAL_RCC_OscConfig+0x9c8>
 8005e0a:	e07f      	b.n	8005f0c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e0c:	f7fc fe0e 	bl	8002a2c <HAL_GetTick>
 8005e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e14:	e00b      	b.n	8005e2e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e16:	f7fc fe09 	bl	8002a2c <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e2c4      	b.n	80063b8 <HAL_RCC_OscConfig+0x106c>
 8005e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e32:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005e36:	2202      	movs	r2, #2
 8005e38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	fa93 f2a3 	rbit	r2, r3
 8005e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e56:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e62:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	fa93 f2a3 	rbit	r2, r3
 8005e6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e70:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005e74:	601a      	str	r2, [r3, #0]
  return result;
 8005e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e7a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005e7e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e80:	fab3 f383 	clz	r3, r3
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	f043 0302 	orr.w	r3, r3, #2
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d102      	bne.n	8005e9a <HAL_RCC_OscConfig+0xb4e>
 8005e94:	4b43      	ldr	r3, [pc, #268]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	e013      	b.n	8005ec2 <HAL_RCC_OscConfig+0xb76>
 8005e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e9e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eaa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	fa93 f2a3 	rbit	r2, r3
 8005eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eb8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	4b39      	ldr	r3, [pc, #228]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ec6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005eca:	2102      	movs	r1, #2
 8005ecc:	6011      	str	r1, [r2, #0]
 8005ece:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ed2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	fa92 f1a2 	rbit	r1, r2
 8005edc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005ee0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005ee4:	6011      	str	r1, [r2, #0]
  return result;
 8005ee6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005eea:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	fab2 f282 	clz	r2, r2
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005efa:	b2d2      	uxtb	r2, r2
 8005efc:	f002 021f 	and.w	r2, r2, #31
 8005f00:	2101      	movs	r1, #1
 8005f02:	fa01 f202 	lsl.w	r2, r1, r2
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d184      	bne.n	8005e16 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d105      	bne.n	8005f20 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f14:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4a22      	ldr	r2, [pc, #136]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f24:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69db      	ldr	r3, [r3, #28]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8242 	beq.w	80063b6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f32:	4b1c      	ldr	r3, [pc, #112]	; (8005fa4 <HAL_RCC_OscConfig+0xc58>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f003 030c 	and.w	r3, r3, #12
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	f000 8213 	beq.w	8006366 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69db      	ldr	r3, [r3, #28]
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	f040 8162 	bne.w	8006216 <HAL_RCC_OscConfig+0xeca>
 8005f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f56:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005f5a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f64:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	fa93 f2a3 	rbit	r2, r3
 8005f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f72:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005f76:	601a      	str	r2, [r3, #0]
  return result;
 8005f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f7c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005f80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f82:	fab3 f383 	clz	r3, r3
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005f8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	461a      	mov	r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f98:	f7fc fd48 	bl	8002a2c <HAL_GetTick>
 8005f9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fa0:	e00c      	b.n	8005fbc <HAL_RCC_OscConfig+0xc70>
 8005fa2:	bf00      	nop
 8005fa4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa8:	f7fc fd40 	bl	8002a2c <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b02      	cmp	r3, #2
 8005fb6:	d901      	bls.n	8005fbc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e1fd      	b.n	80063b8 <HAL_RCC_OscConfig+0x106c>
 8005fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005fc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005fc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	fa93 f2a3 	rbit	r2, r3
 8005fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fdc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005fe0:	601a      	str	r2, [r3, #0]
  return result;
 8005fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fe6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005fea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fec:	fab3 f383 	clz	r3, r3
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d102      	bne.n	8006006 <HAL_RCC_OscConfig+0xcba>
 8006000:	4bb0      	ldr	r3, [pc, #704]	; (80062c4 <HAL_RCC_OscConfig+0xf78>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	e027      	b.n	8006056 <HAL_RCC_OscConfig+0xd0a>
 8006006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800600a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800600e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006014:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006018:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	fa93 f2a3 	rbit	r2, r3
 8006022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006026:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006030:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006034:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800603e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	fa93 f2a3 	rbit	r2, r3
 8006048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800604c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006050:	601a      	str	r2, [r3, #0]
 8006052:	4b9c      	ldr	r3, [pc, #624]	; (80062c4 <HAL_RCC_OscConfig+0xf78>)
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800605a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800605e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006062:	6011      	str	r1, [r2, #0]
 8006064:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006068:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	fa92 f1a2 	rbit	r1, r2
 8006072:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006076:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800607a:	6011      	str	r1, [r2, #0]
  return result;
 800607c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006080:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	fab2 f282 	clz	r2, r2
 800608a:	b2d2      	uxtb	r2, r2
 800608c:	f042 0220 	orr.w	r2, r2, #32
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	f002 021f 	and.w	r2, r2, #31
 8006096:	2101      	movs	r1, #1
 8006098:	fa01 f202 	lsl.w	r2, r1, r2
 800609c:	4013      	ands	r3, r2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d182      	bne.n	8005fa8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060a2:	4b88      	ldr	r3, [pc, #544]	; (80062c4 <HAL_RCC_OscConfig+0xf78>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80060b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	430b      	orrs	r3, r1
 80060c4:	497f      	ldr	r1, [pc, #508]	; (80062c4 <HAL_RCC_OscConfig+0xf78>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	604b      	str	r3, [r1, #4]
 80060ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80060d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80060d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060dc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	fa93 f2a3 	rbit	r2, r3
 80060e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060ea:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80060ee:	601a      	str	r2, [r3, #0]
  return result;
 80060f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060f4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80060f8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060fa:	fab3 f383 	clz	r3, r3
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006104:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	461a      	mov	r2, r3
 800610c:	2301      	movs	r3, #1
 800610e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006110:	f7fc fc8c 	bl	8002a2c <HAL_GetTick>
 8006114:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006118:	e009      	b.n	800612e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611a:	f7fc fc87 	bl	8002a2c <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e144      	b.n	80063b8 <HAL_RCC_OscConfig+0x106c>
 800612e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006132:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006136:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800613a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800613c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006140:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	fa93 f2a3 	rbit	r2, r3
 800614a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800614e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006152:	601a      	str	r2, [r3, #0]
  return result;
 8006154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006158:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800615c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800615e:	fab3 f383 	clz	r3, r3
 8006162:	b2db      	uxtb	r3, r3
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b01      	cmp	r3, #1
 8006170:	d102      	bne.n	8006178 <HAL_RCC_OscConfig+0xe2c>
 8006172:	4b54      	ldr	r3, [pc, #336]	; (80062c4 <HAL_RCC_OscConfig+0xf78>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	e027      	b.n	80061c8 <HAL_RCC_OscConfig+0xe7c>
 8006178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800617c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800618a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	fa93 f2a3 	rbit	r2, r3
 8006194:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006198:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061a2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80061a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061b0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	fa93 f2a3 	rbit	r2, r3
 80061ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061be:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	4b3f      	ldr	r3, [pc, #252]	; (80062c4 <HAL_RCC_OscConfig+0xf78>)
 80061c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061cc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80061d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061da:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80061de:	6812      	ldr	r2, [r2, #0]
 80061e0:	fa92 f1a2 	rbit	r1, r2
 80061e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061e8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80061ec:	6011      	str	r1, [r2, #0]
  return result;
 80061ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061f2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80061f6:	6812      	ldr	r2, [r2, #0]
 80061f8:	fab2 f282 	clz	r2, r2
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	f042 0220 	orr.w	r2, r2, #32
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	f002 021f 	and.w	r2, r2, #31
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f202 	lsl.w	r2, r1, r2
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d082      	beq.n	800611a <HAL_RCC_OscConfig+0xdce>
 8006214:	e0cf      	b.n	80063b6 <HAL_RCC_OscConfig+0x106a>
 8006216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800621a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800621e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006222:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006228:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	fa93 f2a3 	rbit	r2, r3
 8006232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006236:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800623a:	601a      	str	r2, [r3, #0]
  return result;
 800623c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006240:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006244:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006246:	fab3 f383 	clz	r3, r3
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006250:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	461a      	mov	r2, r3
 8006258:	2300      	movs	r3, #0
 800625a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625c:	f7fc fbe6 	bl	8002a2c <HAL_GetTick>
 8006260:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006264:	e009      	b.n	800627a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006266:	f7fc fbe1 	bl	8002a2c <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e09e      	b.n	80063b8 <HAL_RCC_OscConfig+0x106c>
 800627a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800627e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006282:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800628c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	fa93 f2a3 	rbit	r2, r3
 8006296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800629a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800629e:	601a      	str	r2, [r3, #0]
  return result;
 80062a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80062a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062aa:	fab3 f383 	clz	r3, r3
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f043 0301 	orr.w	r3, r3, #1
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d104      	bne.n	80062c8 <HAL_RCC_OscConfig+0xf7c>
 80062be:	4b01      	ldr	r3, [pc, #4]	; (80062c4 <HAL_RCC_OscConfig+0xf78>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	e029      	b.n	8006318 <HAL_RCC_OscConfig+0xfcc>
 80062c4:	40021000 	.word	0x40021000
 80062c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062cc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80062d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062da:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	fa93 f2a3 	rbit	r2, r3
 80062e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062e8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80062ec:	601a      	str	r2, [r3, #0]
 80062ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062f2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80062f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006300:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	fa93 f2a3 	rbit	r2, r3
 800630a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800630e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	4b2b      	ldr	r3, [pc, #172]	; (80063c4 <HAL_RCC_OscConfig+0x1078>)
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800631c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006320:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006324:	6011      	str	r1, [r2, #0]
 8006326:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800632a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	fa92 f1a2 	rbit	r1, r2
 8006334:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006338:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800633c:	6011      	str	r1, [r2, #0]
  return result;
 800633e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006342:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	fab2 f282 	clz	r2, r2
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	f042 0220 	orr.w	r2, r2, #32
 8006352:	b2d2      	uxtb	r2, r2
 8006354:	f002 021f 	and.w	r2, r2, #31
 8006358:	2101      	movs	r1, #1
 800635a:	fa01 f202 	lsl.w	r2, r1, r2
 800635e:	4013      	ands	r3, r2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d180      	bne.n	8006266 <HAL_RCC_OscConfig+0xf1a>
 8006364:	e027      	b.n	80063b6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800636a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e01e      	b.n	80063b8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800637a:	4b12      	ldr	r3, [pc, #72]	; (80063c4 <HAL_RCC_OscConfig+0x1078>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006382:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006386:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800638a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800638e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	429a      	cmp	r2, r3
 8006398:	d10b      	bne.n	80063b2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800639a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800639e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d001      	beq.n	80063b6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000

080063c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b09e      	sub	sp, #120	; 0x78
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e162      	b.n	80066a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063e0:	4b90      	ldr	r3, [pc, #576]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d910      	bls.n	8006410 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b8d      	ldr	r3, [pc, #564]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f023 0207 	bic.w	r2, r3, #7
 80063f6:	498b      	ldr	r1, [pc, #556]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b89      	ldr	r3, [pc, #548]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e14a      	b.n	80066a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800641c:	4b82      	ldr	r3, [pc, #520]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	497f      	ldr	r1, [pc, #508]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800642a:	4313      	orrs	r3, r2
 800642c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80dc 	beq.w	80065f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	2b01      	cmp	r3, #1
 8006442:	d13c      	bne.n	80064be <HAL_RCC_ClockConfig+0xf6>
 8006444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006448:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800644a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800644c:	fa93 f3a3 	rbit	r3, r3
 8006450:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006454:	fab3 f383 	clz	r3, r3
 8006458:	b2db      	uxtb	r3, r3
 800645a:	095b      	lsrs	r3, r3, #5
 800645c:	b2db      	uxtb	r3, r3
 800645e:	f043 0301 	orr.w	r3, r3, #1
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d102      	bne.n	800646e <HAL_RCC_ClockConfig+0xa6>
 8006468:	4b6f      	ldr	r3, [pc, #444]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	e00f      	b.n	800648e <HAL_RCC_ClockConfig+0xc6>
 800646e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006472:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006474:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006476:	fa93 f3a3 	rbit	r3, r3
 800647a:	667b      	str	r3, [r7, #100]	; 0x64
 800647c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006480:	663b      	str	r3, [r7, #96]	; 0x60
 8006482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006484:	fa93 f3a3 	rbit	r3, r3
 8006488:	65fb      	str	r3, [r7, #92]	; 0x5c
 800648a:	4b67      	ldr	r3, [pc, #412]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006492:	65ba      	str	r2, [r7, #88]	; 0x58
 8006494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006496:	fa92 f2a2 	rbit	r2, r2
 800649a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800649c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800649e:	fab2 f282 	clz	r2, r2
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	f042 0220 	orr.w	r2, r2, #32
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	f002 021f 	and.w	r2, r2, #31
 80064ae:	2101      	movs	r1, #1
 80064b0:	fa01 f202 	lsl.w	r2, r1, r2
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d17b      	bne.n	80065b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e0f3      	b.n	80066a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d13c      	bne.n	8006540 <HAL_RCC_ClockConfig+0x178>
 80064c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ce:	fa93 f3a3 	rbit	r3, r3
 80064d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80064d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064d6:	fab3 f383 	clz	r3, r3
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d102      	bne.n	80064f0 <HAL_RCC_ClockConfig+0x128>
 80064ea:	4b4f      	ldr	r3, [pc, #316]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	e00f      	b.n	8006510 <HAL_RCC_ClockConfig+0x148>
 80064f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f8:	fa93 f3a3 	rbit	r3, r3
 80064fc:	647b      	str	r3, [r7, #68]	; 0x44
 80064fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006502:	643b      	str	r3, [r7, #64]	; 0x40
 8006504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006506:	fa93 f3a3 	rbit	r3, r3
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800650c:	4b46      	ldr	r3, [pc, #280]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006514:	63ba      	str	r2, [r7, #56]	; 0x38
 8006516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006518:	fa92 f2a2 	rbit	r2, r2
 800651c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800651e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006520:	fab2 f282 	clz	r2, r2
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	f042 0220 	orr.w	r2, r2, #32
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	f002 021f 	and.w	r2, r2, #31
 8006530:	2101      	movs	r1, #1
 8006532:	fa01 f202 	lsl.w	r2, r1, r2
 8006536:	4013      	ands	r3, r2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d13a      	bne.n	80065b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0b2      	b.n	80066a6 <HAL_RCC_ClockConfig+0x2de>
 8006540:	2302      	movs	r3, #2
 8006542:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006546:	fa93 f3a3 	rbit	r3, r3
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800654e:	fab3 f383 	clz	r3, r3
 8006552:	b2db      	uxtb	r3, r3
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d102      	bne.n	8006568 <HAL_RCC_ClockConfig+0x1a0>
 8006562:	4b31      	ldr	r3, [pc, #196]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	e00d      	b.n	8006584 <HAL_RCC_ClockConfig+0x1bc>
 8006568:	2302      	movs	r3, #2
 800656a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	fa93 f3a3 	rbit	r3, r3
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
 8006574:	2302      	movs	r3, #2
 8006576:	623b      	str	r3, [r7, #32]
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	fa93 f3a3 	rbit	r3, r3
 800657e:	61fb      	str	r3, [r7, #28]
 8006580:	4b29      	ldr	r3, [pc, #164]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	2202      	movs	r2, #2
 8006586:	61ba      	str	r2, [r7, #24]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	fa92 f2a2 	rbit	r2, r2
 800658e:	617a      	str	r2, [r7, #20]
  return result;
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	fab2 f282 	clz	r2, r2
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	f042 0220 	orr.w	r2, r2, #32
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	f002 021f 	and.w	r2, r2, #31
 80065a2:	2101      	movs	r1, #1
 80065a4:	fa01 f202 	lsl.w	r2, r1, r2
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e079      	b.n	80066a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065b2:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f023 0203 	bic.w	r2, r3, #3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	491a      	ldr	r1, [pc, #104]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065c4:	f7fc fa32 	bl	8002a2c <HAL_GetTick>
 80065c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ca:	e00a      	b.n	80065e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065cc:	f7fc fa2e 	bl	8002a2c <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e061      	b.n	80066a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e2:	4b11      	ldr	r3, [pc, #68]	; (8006628 <HAL_RCC_ClockConfig+0x260>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 020c 	and.w	r2, r3, #12
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d1eb      	bne.n	80065cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f4:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d214      	bcs.n	800662c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006602:	4b08      	ldr	r3, [pc, #32]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f023 0207 	bic.w	r2, r3, #7
 800660a:	4906      	ldr	r1, [pc, #24]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	4313      	orrs	r3, r2
 8006610:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006612:	4b04      	ldr	r3, [pc, #16]	; (8006624 <HAL_RCC_ClockConfig+0x25c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d005      	beq.n	800662c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e040      	b.n	80066a6 <HAL_RCC_ClockConfig+0x2de>
 8006624:	40022000 	.word	0x40022000
 8006628:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006638:	4b1d      	ldr	r3, [pc, #116]	; (80066b0 <HAL_RCC_ClockConfig+0x2e8>)
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	491a      	ldr	r1, [pc, #104]	; (80066b0 <HAL_RCC_ClockConfig+0x2e8>)
 8006646:	4313      	orrs	r3, r2
 8006648:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006656:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <HAL_RCC_ClockConfig+0x2e8>)
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4912      	ldr	r1, [pc, #72]	; (80066b0 <HAL_RCC_ClockConfig+0x2e8>)
 8006666:	4313      	orrs	r3, r2
 8006668:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800666a:	f000 f829 	bl	80066c0 <HAL_RCC_GetSysClockFreq>
 800666e:	4601      	mov	r1, r0
 8006670:	4b0f      	ldr	r3, [pc, #60]	; (80066b0 <HAL_RCC_ClockConfig+0x2e8>)
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006678:	22f0      	movs	r2, #240	; 0xf0
 800667a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	fa92 f2a2 	rbit	r2, r2
 8006682:	60fa      	str	r2, [r7, #12]
  return result;
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	fab2 f282 	clz	r2, r2
 800668a:	b2d2      	uxtb	r2, r2
 800668c:	40d3      	lsrs	r3, r2
 800668e:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <HAL_RCC_ClockConfig+0x2ec>)
 8006690:	5cd3      	ldrb	r3, [r2, r3]
 8006692:	fa21 f303 	lsr.w	r3, r1, r3
 8006696:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <HAL_RCC_ClockConfig+0x2f0>)
 8006698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800669a:	4b08      	ldr	r3, [pc, #32]	; (80066bc <HAL_RCC_ClockConfig+0x2f4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fc f980 	bl	80029a4 <HAL_InitTick>
  
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3778      	adds	r7, #120	; 0x78
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40021000 	.word	0x40021000
 80066b4:	0800a280 	.word	0x0800a280
 80066b8:	2000004c 	.word	0x2000004c
 80066bc:	20000080 	.word	0x20000080

080066c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b08b      	sub	sp, #44	; 0x2c
 80066c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	2300      	movs	r3, #0
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	2300      	movs	r3, #0
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
 80066d2:	2300      	movs	r3, #0
 80066d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80066da:	4b29      	ldr	r3, [pc, #164]	; (8006780 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d002      	beq.n	80066f0 <HAL_RCC_GetSysClockFreq+0x30>
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d003      	beq.n	80066f6 <HAL_RCC_GetSysClockFreq+0x36>
 80066ee:	e03c      	b.n	800676a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80066f0:	4b24      	ldr	r3, [pc, #144]	; (8006784 <HAL_RCC_GetSysClockFreq+0xc4>)
 80066f2:	623b      	str	r3, [r7, #32]
      break;
 80066f4:	e03c      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80066fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006700:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	fa92 f2a2 	rbit	r2, r2
 8006708:	607a      	str	r2, [r7, #4]
  return result;
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	fab2 f282 	clz	r2, r2
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	40d3      	lsrs	r3, r2
 8006714:	4a1c      	ldr	r2, [pc, #112]	; (8006788 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006716:	5cd3      	ldrb	r3, [r2, r3]
 8006718:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800671a:	4b19      	ldr	r3, [pc, #100]	; (8006780 <HAL_RCC_GetSysClockFreq+0xc0>)
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	220f      	movs	r2, #15
 8006724:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	fa92 f2a2 	rbit	r2, r2
 800672c:	60fa      	str	r2, [r7, #12]
  return result;
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	fab2 f282 	clz	r2, r2
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	40d3      	lsrs	r3, r2
 8006738:	4a14      	ldr	r2, [pc, #80]	; (800678c <HAL_RCC_GetSysClockFreq+0xcc>)
 800673a:	5cd3      	ldrb	r3, [r2, r3]
 800673c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d008      	beq.n	800675a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006748:	4a0e      	ldr	r2, [pc, #56]	; (8006784 <HAL_RCC_GetSysClockFreq+0xc4>)
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
 8006758:	e004      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	4a0c      	ldr	r2, [pc, #48]	; (8006790 <HAL_RCC_GetSysClockFreq+0xd0>)
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	623b      	str	r3, [r7, #32]
      break;
 8006768:	e002      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <HAL_RCC_GetSysClockFreq+0xc4>)
 800676c:	623b      	str	r3, [r7, #32]
      break;
 800676e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006770:	6a3b      	ldr	r3, [r7, #32]
}
 8006772:	4618      	mov	r0, r3
 8006774:	372c      	adds	r7, #44	; 0x2c
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40021000 	.word	0x40021000
 8006784:	007a1200 	.word	0x007a1200
 8006788:	0800a290 	.word	0x0800a290
 800678c:	0800a2a0 	.word	0x0800a2a0
 8006790:	003d0900 	.word	0x003d0900

08006794 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b092      	sub	sp, #72	; 0x48
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80d4 	beq.w	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067b8:	4b4e      	ldr	r3, [pc, #312]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10e      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067c4:	4b4b      	ldr	r3, [pc, #300]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	4a4a      	ldr	r2, [pc, #296]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067ce:	61d3      	str	r3, [r2, #28]
 80067d0:	4b48      	ldr	r3, [pc, #288]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067dc:	2301      	movs	r3, #1
 80067de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067e2:	4b45      	ldr	r3, [pc, #276]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d118      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ee:	4b42      	ldr	r3, [pc, #264]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a41      	ldr	r2, [pc, #260]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067fa:	f7fc f917 	bl	8002a2c <HAL_GetTick>
 80067fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006800:	e008      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006802:	f7fc f913 	bl	8002a2c <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b64      	cmp	r3, #100	; 0x64
 800680e:	d901      	bls.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e169      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006814:	4b38      	ldr	r3, [pc, #224]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0f0      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006820:	4b34      	ldr	r3, [pc, #208]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 8084 	beq.w	800693a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800683c:	429a      	cmp	r2, r3
 800683e:	d07c      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006840:	4b2c      	ldr	r3, [pc, #176]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800684e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	fa93 f3a3 	rbit	r3, r3
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800685a:	fab3 f383 	clz	r3, r3
 800685e:	b2db      	uxtb	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	4b26      	ldr	r3, [pc, #152]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006864:	4413      	add	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	461a      	mov	r2, r3
 800686a:	2301      	movs	r3, #1
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006876:	fa93 f3a3 	rbit	r3, r3
 800687a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800687c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800687e:	fab3 f383 	clz	r3, r3
 8006882:	b2db      	uxtb	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	461a      	mov	r2, r3
 800688e:	2300      	movs	r3, #0
 8006890:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006892:	4a18      	ldr	r2, [pc, #96]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006896:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d04b      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a2:	f7fc f8c3 	bl	8002a2c <HAL_GetTick>
 80068a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a8:	e00a      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068aa:	f7fc f8bf 	bl	8002a2c <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d901      	bls.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e113      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80068c0:	2302      	movs	r3, #2
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	fa93 f3a3 	rbit	r3, r3
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
 80068cc:	2302      	movs	r3, #2
 80068ce:	623b      	str	r3, [r7, #32]
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	fa93 f3a3 	rbit	r3, r3
 80068d6:	61fb      	str	r3, [r7, #28]
  return result;
 80068d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068da:	fab3 f383 	clz	r3, r3
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f043 0302 	orr.w	r3, r3, #2
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d108      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80068ee:	4b01      	ldr	r3, [pc, #4]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	e00d      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80068f4:	40021000 	.word	0x40021000
 80068f8:	40007000 	.word	0x40007000
 80068fc:	10908100 	.word	0x10908100
 8006900:	2302      	movs	r3, #2
 8006902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	fa93 f3a3 	rbit	r3, r3
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	4b78      	ldr	r3, [pc, #480]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	2202      	movs	r2, #2
 8006912:	613a      	str	r2, [r7, #16]
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	fa92 f2a2 	rbit	r2, r2
 800691a:	60fa      	str	r2, [r7, #12]
  return result;
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	fab2 f282 	clz	r2, r2
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	f002 021f 	and.w	r2, r2, #31
 800692e:	2101      	movs	r1, #1
 8006930:	fa01 f202 	lsl.w	r2, r1, r2
 8006934:	4013      	ands	r3, r2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0b7      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800693a:	4b6d      	ldr	r3, [pc, #436]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	496a      	ldr	r1, [pc, #424]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006948:	4313      	orrs	r3, r2
 800694a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800694c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006950:	2b01      	cmp	r3, #1
 8006952:	d105      	bne.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006954:	4b66      	ldr	r3, [pc, #408]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	4a65      	ldr	r2, [pc, #404]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800695a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800695e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d008      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800696c:	4b60      	ldr	r3, [pc, #384]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	f023 0203 	bic.w	r2, r3, #3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	495d      	ldr	r1, [pc, #372]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800697a:	4313      	orrs	r3, r2
 800697c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800698a:	4b59      	ldr	r3, [pc, #356]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	4956      	ldr	r1, [pc, #344]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006998:	4313      	orrs	r3, r2
 800699a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0304 	and.w	r3, r3, #4
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069a8:	4b51      	ldr	r3, [pc, #324]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	494e      	ldr	r1, [pc, #312]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0320 	and.w	r3, r3, #32
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d008      	beq.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80069c6:	4b4a      	ldr	r3, [pc, #296]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f023 0210 	bic.w	r2, r3, #16
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4947      	ldr	r1, [pc, #284]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80069e4:	4b42      	ldr	r3, [pc, #264]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	493f      	ldr	r1, [pc, #252]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a02:	4b3b      	ldr	r3, [pc, #236]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	f023 0220 	bic.w	r2, r3, #32
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	4938      	ldr	r1, [pc, #224]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a20:	4b33      	ldr	r3, [pc, #204]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	4930      	ldr	r1, [pc, #192]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0310 	and.w	r3, r3, #16
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d008      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a3e:	4b2c      	ldr	r3, [pc, #176]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	4929      	ldr	r1, [pc, #164]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a5c:	4b24      	ldr	r3, [pc, #144]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	4921      	ldr	r1, [pc, #132]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a86:	491a      	ldr	r1, [pc, #104]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa4:	4912      	ldr	r1, [pc, #72]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006ab6:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac2:	490b      	ldr	r1, [pc, #44]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d008      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae0:	4903      	ldr	r1, [pc, #12]	; (8006af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3748      	adds	r7, #72	; 0x48
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40021000 	.word	0x40021000

08006af4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e09d      	b.n	8006c42 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d108      	bne.n	8006b20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b16:	d009      	beq.n	8006b2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	61da      	str	r2, [r3, #28]
 8006b1e:	e005      	b.n	8006b2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7fb fb8a 	bl	8002260 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b6c:	d902      	bls.n	8006b74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	e002      	b.n	8006b7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006b82:	d007      	beq.n	8006b94 <HAL_SPI_Init+0xa0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b8c:	d002      	beq.n	8006b94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd6:	ea42 0103 	orr.w	r1, r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	0c1b      	lsrs	r3, r3, #16
 8006bf0:	f003 0204 	and.w	r2, r3, #4
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	f003 0310 	and.w	r3, r3, #16
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c02:	f003 0308 	and.w	r3, r3, #8
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c10:	ea42 0103 	orr.w	r1, r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69da      	ldr	r2, [r3, #28]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e049      	b.n	8006cf0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7fb fb37 	bl	80022e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3304      	adds	r3, #4
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f000 ff99 	bl	8007bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d001      	beq.n	8006d10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e042      	b.n	8006d96 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a21      	ldr	r2, [pc, #132]	; (8006da4 <HAL_TIM_Base_Start+0xac>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d018      	beq.n	8006d54 <HAL_TIM_Base_Start+0x5c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d2a:	d013      	beq.n	8006d54 <HAL_TIM_Base_Start+0x5c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <HAL_TIM_Base_Start+0xb0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d00e      	beq.n	8006d54 <HAL_TIM_Base_Start+0x5c>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1c      	ldr	r2, [pc, #112]	; (8006dac <HAL_TIM_Base_Start+0xb4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d009      	beq.n	8006d54 <HAL_TIM_Base_Start+0x5c>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a1a      	ldr	r2, [pc, #104]	; (8006db0 <HAL_TIM_Base_Start+0xb8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d004      	beq.n	8006d54 <HAL_TIM_Base_Start+0x5c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a19      	ldr	r2, [pc, #100]	; (8006db4 <HAL_TIM_Base_Start+0xbc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d115      	bne.n	8006d80 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689a      	ldr	r2, [r3, #8]
 8006d5a:	4b17      	ldr	r3, [pc, #92]	; (8006db8 <HAL_TIM_Base_Start+0xc0>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b06      	cmp	r3, #6
 8006d64:	d015      	beq.n	8006d92 <HAL_TIM_Base_Start+0x9a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6c:	d011      	beq.n	8006d92 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7e:	e008      	b.n	8006d92 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
 8006d90:	e000      	b.n	8006d94 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	40012c00 	.word	0x40012c00
 8006da8:	40000400 	.word	0x40000400
 8006dac:	40000800 	.word	0x40000800
 8006db0:	40013400 	.word	0x40013400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	00010007 	.word	0x00010007

08006dbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d101      	bne.n	8006dce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e049      	b.n	8006e62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7fb fade 	bl	80023a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2202      	movs	r2, #2
 8006dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f000 fee0 	bl	8007bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d109      	bne.n	8006e90 <HAL_TIM_PWM_Start+0x24>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	e03c      	b.n	8006f0a <HAL_TIM_PWM_Start+0x9e>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d109      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x3e>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	bf14      	ite	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	2300      	moveq	r3, #0
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	e02f      	b.n	8006f0a <HAL_TIM_PWM_Start+0x9e>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d109      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x58>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	e022      	b.n	8006f0a <HAL_TIM_PWM_Start+0x9e>
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b0c      	cmp	r3, #12
 8006ec8:	d109      	bne.n	8006ede <HAL_TIM_PWM_Start+0x72>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	bf14      	ite	ne
 8006ed6:	2301      	movne	r3, #1
 8006ed8:	2300      	moveq	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	e015      	b.n	8006f0a <HAL_TIM_PWM_Start+0x9e>
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b10      	cmp	r3, #16
 8006ee2:	d109      	bne.n	8006ef8 <HAL_TIM_PWM_Start+0x8c>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	bf14      	ite	ne
 8006ef0:	2301      	movne	r3, #1
 8006ef2:	2300      	moveq	r3, #0
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	e008      	b.n	8006f0a <HAL_TIM_PWM_Start+0x9e>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	bf14      	ite	ne
 8006f04:	2301      	movne	r3, #1
 8006f06:	2300      	moveq	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e097      	b.n	8007042 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_TIM_PWM_Start+0xb6>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f20:	e023      	b.n	8006f6a <HAL_TIM_PWM_Start+0xfe>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b04      	cmp	r3, #4
 8006f26:	d104      	bne.n	8006f32 <HAL_TIM_PWM_Start+0xc6>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f30:	e01b      	b.n	8006f6a <HAL_TIM_PWM_Start+0xfe>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d104      	bne.n	8006f42 <HAL_TIM_PWM_Start+0xd6>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f40:	e013      	b.n	8006f6a <HAL_TIM_PWM_Start+0xfe>
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b0c      	cmp	r3, #12
 8006f46:	d104      	bne.n	8006f52 <HAL_TIM_PWM_Start+0xe6>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f50:	e00b      	b.n	8006f6a <HAL_TIM_PWM_Start+0xfe>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d104      	bne.n	8006f62 <HAL_TIM_PWM_Start+0xf6>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f60:	e003      	b.n	8006f6a <HAL_TIM_PWM_Start+0xfe>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	6839      	ldr	r1, [r7, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f001 fb42 	bl	80085fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a33      	ldr	r2, [pc, #204]	; (800704c <HAL_TIM_PWM_Start+0x1e0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <HAL_TIM_PWM_Start+0x13e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a32      	ldr	r2, [pc, #200]	; (8007050 <HAL_TIM_PWM_Start+0x1e4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00e      	beq.n	8006faa <HAL_TIM_PWM_Start+0x13e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a30      	ldr	r2, [pc, #192]	; (8007054 <HAL_TIM_PWM_Start+0x1e8>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d009      	beq.n	8006faa <HAL_TIM_PWM_Start+0x13e>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a2f      	ldr	r2, [pc, #188]	; (8007058 <HAL_TIM_PWM_Start+0x1ec>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d004      	beq.n	8006faa <HAL_TIM_PWM_Start+0x13e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2d      	ldr	r2, [pc, #180]	; (800705c <HAL_TIM_PWM_Start+0x1f0>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d101      	bne.n	8006fae <HAL_TIM_PWM_Start+0x142>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <HAL_TIM_PWM_Start+0x144>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d007      	beq.n	8006fc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a20      	ldr	r2, [pc, #128]	; (800704c <HAL_TIM_PWM_Start+0x1e0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <HAL_TIM_PWM_Start+0x194>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd6:	d013      	beq.n	8007000 <HAL_TIM_PWM_Start+0x194>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a20      	ldr	r2, [pc, #128]	; (8007060 <HAL_TIM_PWM_Start+0x1f4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <HAL_TIM_PWM_Start+0x194>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1f      	ldr	r2, [pc, #124]	; (8007064 <HAL_TIM_PWM_Start+0x1f8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_TIM_PWM_Start+0x194>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a17      	ldr	r2, [pc, #92]	; (8007050 <HAL_TIM_PWM_Start+0x1e4>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <HAL_TIM_PWM_Start+0x194>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a16      	ldr	r2, [pc, #88]	; (8007054 <HAL_TIM_PWM_Start+0x1e8>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d115      	bne.n	800702c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	4b18      	ldr	r3, [pc, #96]	; (8007068 <HAL_TIM_PWM_Start+0x1fc>)
 8007008:	4013      	ands	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b06      	cmp	r3, #6
 8007010:	d015      	beq.n	800703e <HAL_TIM_PWM_Start+0x1d2>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007018:	d011      	beq.n	800703e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f042 0201 	orr.w	r2, r2, #1
 8007028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702a:	e008      	b.n	800703e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	e000      	b.n	8007040 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	40014000 	.word	0x40014000
 8007058:	40014400 	.word	0x40014400
 800705c:	40014800 	.word	0x40014800
 8007060:	40000400 	.word	0x40000400
 8007064:	40000800 	.word	0x40000800
 8007068:	00010007 	.word	0x00010007

0800706c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e049      	b.n	8007112 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f841 	bl	800711a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3304      	adds	r3, #4
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f000 fd88 	bl	8007bc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800711a:	b480      	push	{r7}
 800711c:	b083      	sub	sp, #12
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007122:	bf00      	nop
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <HAL_TIM_IC_Start_IT+0x1e>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800714a:	b2db      	uxtb	r3, r3
 800714c:	e023      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x66>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b04      	cmp	r3, #4
 8007152:	d104      	bne.n	800715e <HAL_TIM_IC_Start_IT+0x2e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800715a:	b2db      	uxtb	r3, r3
 800715c:	e01b      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x66>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b08      	cmp	r3, #8
 8007162:	d104      	bne.n	800716e <HAL_TIM_IC_Start_IT+0x3e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800716a:	b2db      	uxtb	r3, r3
 800716c:	e013      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x66>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b0c      	cmp	r3, #12
 8007172:	d104      	bne.n	800717e <HAL_TIM_IC_Start_IT+0x4e>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800717a:	b2db      	uxtb	r3, r3
 800717c:	e00b      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x66>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b10      	cmp	r3, #16
 8007182:	d104      	bne.n	800718e <HAL_TIM_IC_Start_IT+0x5e>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800718a:	b2db      	uxtb	r3, r3
 800718c:	e003      	b.n	8007196 <HAL_TIM_IC_Start_IT+0x66>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007194:	b2db      	uxtb	r3, r3
 8007196:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d104      	bne.n	80071a8 <HAL_TIM_IC_Start_IT+0x78>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	e013      	b.n	80071d0 <HAL_TIM_IC_Start_IT+0xa0>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d104      	bne.n	80071b8 <HAL_TIM_IC_Start_IT+0x88>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	e00b      	b.n	80071d0 <HAL_TIM_IC_Start_IT+0xa0>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b08      	cmp	r3, #8
 80071bc:	d104      	bne.n	80071c8 <HAL_TIM_IC_Start_IT+0x98>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	e003      	b.n	80071d0 <HAL_TIM_IC_Start_IT+0xa0>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d102      	bne.n	80071de <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80071d8:	7b7b      	ldrb	r3, [r7, #13]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d001      	beq.n	80071e2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e0d8      	b.n	8007394 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d104      	bne.n	80071f2 <HAL_TIM_IC_Start_IT+0xc2>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f0:	e023      	b.n	800723a <HAL_TIM_IC_Start_IT+0x10a>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b04      	cmp	r3, #4
 80071f6:	d104      	bne.n	8007202 <HAL_TIM_IC_Start_IT+0xd2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007200:	e01b      	b.n	800723a <HAL_TIM_IC_Start_IT+0x10a>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	2b08      	cmp	r3, #8
 8007206:	d104      	bne.n	8007212 <HAL_TIM_IC_Start_IT+0xe2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2202      	movs	r2, #2
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007210:	e013      	b.n	800723a <HAL_TIM_IC_Start_IT+0x10a>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b0c      	cmp	r3, #12
 8007216:	d104      	bne.n	8007222 <HAL_TIM_IC_Start_IT+0xf2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007220:	e00b      	b.n	800723a <HAL_TIM_IC_Start_IT+0x10a>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b10      	cmp	r3, #16
 8007226:	d104      	bne.n	8007232 <HAL_TIM_IC_Start_IT+0x102>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007230:	e003      	b.n	800723a <HAL_TIM_IC_Start_IT+0x10a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2202      	movs	r2, #2
 8007236:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d104      	bne.n	800724a <HAL_TIM_IC_Start_IT+0x11a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007248:	e013      	b.n	8007272 <HAL_TIM_IC_Start_IT+0x142>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b04      	cmp	r3, #4
 800724e:	d104      	bne.n	800725a <HAL_TIM_IC_Start_IT+0x12a>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007258:	e00b      	b.n	8007272 <HAL_TIM_IC_Start_IT+0x142>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b08      	cmp	r3, #8
 800725e:	d104      	bne.n	800726a <HAL_TIM_IC_Start_IT+0x13a>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007268:	e003      	b.n	8007272 <HAL_TIM_IC_Start_IT+0x142>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2202      	movs	r2, #2
 800726e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b0c      	cmp	r3, #12
 8007276:	d841      	bhi.n	80072fc <HAL_TIM_IC_Start_IT+0x1cc>
 8007278:	a201      	add	r2, pc, #4	; (adr r2, 8007280 <HAL_TIM_IC_Start_IT+0x150>)
 800727a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727e:	bf00      	nop
 8007280:	080072b5 	.word	0x080072b5
 8007284:	080072fd 	.word	0x080072fd
 8007288:	080072fd 	.word	0x080072fd
 800728c:	080072fd 	.word	0x080072fd
 8007290:	080072c7 	.word	0x080072c7
 8007294:	080072fd 	.word	0x080072fd
 8007298:	080072fd 	.word	0x080072fd
 800729c:	080072fd 	.word	0x080072fd
 80072a0:	080072d9 	.word	0x080072d9
 80072a4:	080072fd 	.word	0x080072fd
 80072a8:	080072fd 	.word	0x080072fd
 80072ac:	080072fd 	.word	0x080072fd
 80072b0:	080072eb 	.word	0x080072eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0202 	orr.w	r2, r2, #2
 80072c2:	60da      	str	r2, [r3, #12]
      break;
 80072c4:	e01d      	b.n	8007302 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f042 0204 	orr.w	r2, r2, #4
 80072d4:	60da      	str	r2, [r3, #12]
      break;
 80072d6:	e014      	b.n	8007302 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f042 0208 	orr.w	r2, r2, #8
 80072e6:	60da      	str	r2, [r3, #12]
      break;
 80072e8:	e00b      	b.n	8007302 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0210 	orr.w	r2, r2, #16
 80072f8:	60da      	str	r2, [r3, #12]
      break;
 80072fa:	e002      	b.n	8007302 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007300:	bf00      	nop
  }

  if (status == HAL_OK)
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d144      	bne.n	8007392 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	4618      	mov	r0, r3
 8007312:	f001 f973 	bl	80085fc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a20      	ldr	r2, [pc, #128]	; (800739c <HAL_TIM_IC_Start_IT+0x26c>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d018      	beq.n	8007352 <HAL_TIM_IC_Start_IT+0x222>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007328:	d013      	beq.n	8007352 <HAL_TIM_IC_Start_IT+0x222>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <HAL_TIM_IC_Start_IT+0x270>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00e      	beq.n	8007352 <HAL_TIM_IC_Start_IT+0x222>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <HAL_TIM_IC_Start_IT+0x274>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d009      	beq.n	8007352 <HAL_TIM_IC_Start_IT+0x222>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a19      	ldr	r2, [pc, #100]	; (80073a8 <HAL_TIM_IC_Start_IT+0x278>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d004      	beq.n	8007352 <HAL_TIM_IC_Start_IT+0x222>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a17      	ldr	r2, [pc, #92]	; (80073ac <HAL_TIM_IC_Start_IT+0x27c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d115      	bne.n	800737e <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	689a      	ldr	r2, [r3, #8]
 8007358:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <HAL_TIM_IC_Start_IT+0x280>)
 800735a:	4013      	ands	r3, r2
 800735c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b06      	cmp	r3, #6
 8007362:	d015      	beq.n	8007390 <HAL_TIM_IC_Start_IT+0x260>
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736a:	d011      	beq.n	8007390 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0201 	orr.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800737c:	e008      	b.n	8007390 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f042 0201 	orr.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e000      	b.n	8007392 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007390:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40000400 	.word	0x40000400
 80073a4:	40000800 	.word	0x40000800
 80073a8:	40013400 	.word	0x40013400
 80073ac:	40014000 	.word	0x40014000
 80073b0:	00010007 	.word	0x00010007

080073b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d122      	bne.n	8007410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d11b      	bne.n	8007410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f06f 0202 	mvn.w	r2, #2
 80073e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7f9 fed2 	bl	80011a0 <HAL_TIM_IC_CaptureCallback>
 80073fc:	e005      	b.n	800740a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fbc0 	bl	8007b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 fbc7 	bl	8007b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b04      	cmp	r3, #4
 800741c:	d122      	bne.n	8007464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b04      	cmp	r3, #4
 800742a:	d11b      	bne.n	8007464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f06f 0204 	mvn.w	r2, #4
 8007434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7f9 fea8 	bl	80011a0 <HAL_TIM_IC_CaptureCallback>
 8007450:	e005      	b.n	800745e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fb96 	bl	8007b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fb9d 	bl	8007b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0308 	and.w	r3, r3, #8
 800746e:	2b08      	cmp	r3, #8
 8007470:	d122      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b08      	cmp	r3, #8
 800747e:	d11b      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0208 	mvn.w	r2, #8
 8007488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7f9 fe7e 	bl	80011a0 <HAL_TIM_IC_CaptureCallback>
 80074a4:	e005      	b.n	80074b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fb6c 	bl	8007b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fb73 	bl	8007b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b10      	cmp	r3, #16
 80074c4:	d122      	bne.n	800750c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 0310 	and.w	r3, r3, #16
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	d11b      	bne.n	800750c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0210 	mvn.w	r2, #16
 80074dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2208      	movs	r2, #8
 80074e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7f9 fe54 	bl	80011a0 <HAL_TIM_IC_CaptureCallback>
 80074f8:	e005      	b.n	8007506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fb42 	bl	8007b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fb49 	bl	8007b98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b01      	cmp	r3, #1
 8007518:	d10e      	bne.n	8007538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b01      	cmp	r3, #1
 8007526:	d107      	bne.n	8007538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0201 	mvn.w	r2, #1
 8007530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fb1c 	bl	8007b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b80      	cmp	r3, #128	; 0x80
 8007544:	d10e      	bne.n	8007564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007550:	2b80      	cmp	r3, #128	; 0x80
 8007552:	d107      	bne.n	8007564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800755c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 f8fc 	bl	800875c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007572:	d10e      	bne.n	8007592 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757e:	2b80      	cmp	r3, #128	; 0x80
 8007580:	d107      	bne.n	8007592 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800758a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f001 f8ef 	bl	8008770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759c:	2b40      	cmp	r3, #64	; 0x40
 800759e:	d10e      	bne.n	80075be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b40      	cmp	r3, #64	; 0x40
 80075ac:	d107      	bne.n	80075be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 faf7 	bl	8007bac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d10e      	bne.n	80075ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f003 0320 	and.w	r3, r3, #32
 80075d6:	2b20      	cmp	r3, #32
 80075d8:	d107      	bne.n	80075ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f06f 0220 	mvn.w	r2, #32
 80075e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 f8af 	bl	8008748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b086      	sub	sp, #24
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075fe:	2300      	movs	r3, #0
 8007600:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_TIM_IC_ConfigChannel+0x1e>
 800760c:	2302      	movs	r3, #2
 800760e:	e088      	b.n	8007722 <HAL_TIM_IC_ConfigChannel+0x130>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d11b      	bne.n	8007656 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800762e:	f000 fe2d 	bl	800828c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699a      	ldr	r2, [r3, #24]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 020c 	bic.w	r2, r2, #12
 8007640:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6999      	ldr	r1, [r3, #24]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	619a      	str	r2, [r3, #24]
 8007654:	e060      	b.n	8007718 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b04      	cmp	r3, #4
 800765a:	d11c      	bne.n	8007696 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800766c:	f000 fea5 	bl	80083ba <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699a      	ldr	r2, [r3, #24]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800767e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6999      	ldr	r1, [r3, #24]
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	021a      	lsls	r2, r3, #8
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	619a      	str	r2, [r3, #24]
 8007694:	e040      	b.n	8007718 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d11b      	bne.n	80076d4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80076ac:	f000 fef2 	bl	8008494 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	69da      	ldr	r2, [r3, #28]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 020c 	bic.w	r2, r2, #12
 80076be:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	69d9      	ldr	r1, [r3, #28]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	61da      	str	r2, [r3, #28]
 80076d2:	e021      	b.n	8007718 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b0c      	cmp	r3, #12
 80076d8:	d11c      	bne.n	8007714 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80076ea:	f000 ff0f 	bl	800850c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69da      	ldr	r2, [r3, #28]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80076fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69d9      	ldr	r1, [r3, #28]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	021a      	lsls	r2, r3, #8
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	61da      	str	r2, [r3, #28]
 8007712:	e001      	b.n	8007718 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007720:	7dfb      	ldrb	r3, [r7, #23]
}
 8007722:	4618      	mov	r0, r3
 8007724:	3718      	adds	r7, #24
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007746:	2302      	movs	r3, #2
 8007748:	e0ff      	b.n	800794a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2b14      	cmp	r3, #20
 8007756:	f200 80f0 	bhi.w	800793a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800775a:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	080077b5 	.word	0x080077b5
 8007764:	0800793b 	.word	0x0800793b
 8007768:	0800793b 	.word	0x0800793b
 800776c:	0800793b 	.word	0x0800793b
 8007770:	080077f5 	.word	0x080077f5
 8007774:	0800793b 	.word	0x0800793b
 8007778:	0800793b 	.word	0x0800793b
 800777c:	0800793b 	.word	0x0800793b
 8007780:	08007837 	.word	0x08007837
 8007784:	0800793b 	.word	0x0800793b
 8007788:	0800793b 	.word	0x0800793b
 800778c:	0800793b 	.word	0x0800793b
 8007790:	08007877 	.word	0x08007877
 8007794:	0800793b 	.word	0x0800793b
 8007798:	0800793b 	.word	0x0800793b
 800779c:	0800793b 	.word	0x0800793b
 80077a0:	080078b9 	.word	0x080078b9
 80077a4:	0800793b 	.word	0x0800793b
 80077a8:	0800793b 	.word	0x0800793b
 80077ac:	0800793b 	.word	0x0800793b
 80077b0:	080078f9 	.word	0x080078f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68b9      	ldr	r1, [r7, #8]
 80077ba:	4618      	mov	r0, r3
 80077bc:	f000 fa90 	bl	8007ce0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	699a      	ldr	r2, [r3, #24]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0208 	orr.w	r2, r2, #8
 80077ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f022 0204 	bic.w	r2, r2, #4
 80077de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6999      	ldr	r1, [r3, #24]
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	691a      	ldr	r2, [r3, #16]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	619a      	str	r2, [r3, #24]
      break;
 80077f2:	e0a5      	b.n	8007940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fb00 	bl	8007e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	699a      	ldr	r2, [r3, #24]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800780e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	699a      	ldr	r2, [r3, #24]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800781e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	6999      	ldr	r1, [r3, #24]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	021a      	lsls	r2, r3, #8
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	619a      	str	r2, [r3, #24]
      break;
 8007834:	e084      	b.n	8007940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	4618      	mov	r0, r3
 800783e:	f000 fb69 	bl	8007f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69da      	ldr	r2, [r3, #28]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0208 	orr.w	r2, r2, #8
 8007850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	69da      	ldr	r2, [r3, #28]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0204 	bic.w	r2, r2, #4
 8007860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	69d9      	ldr	r1, [r3, #28]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	691a      	ldr	r2, [r3, #16]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	61da      	str	r2, [r3, #28]
      break;
 8007874:	e064      	b.n	8007940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fbd1 	bl	8008024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69da      	ldr	r2, [r3, #28]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69d9      	ldr	r1, [r3, #28]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	021a      	lsls	r2, r3, #8
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	61da      	str	r2, [r3, #28]
      break;
 80078b6:	e043      	b.n	8007940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68b9      	ldr	r1, [r7, #8]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fc1a 	bl	80080f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0208 	orr.w	r2, r2, #8
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0204 	bic.w	r2, r2, #4
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	691a      	ldr	r2, [r3, #16]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80078f6:	e023      	b.n	8007940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fc5e 	bl	80081c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007912:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007922:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	021a      	lsls	r2, r3, #8
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007938:	e002      	b.n	8007940 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	75fb      	strb	r3, [r7, #23]
      break;
 800793e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3718      	adds	r7, #24
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop

08007954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_TIM_ConfigClockSource+0x1c>
 800796c:	2302      	movs	r3, #2
 800796e:	e0b6      	b.n	8007ade <HAL_TIM_ConfigClockSource+0x18a>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800799a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ac:	d03e      	beq.n	8007a2c <HAL_TIM_ConfigClockSource+0xd8>
 80079ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b2:	f200 8087 	bhi.w	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
 80079b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ba:	f000 8086 	beq.w	8007aca <HAL_TIM_ConfigClockSource+0x176>
 80079be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c2:	d87f      	bhi.n	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
 80079c4:	2b70      	cmp	r3, #112	; 0x70
 80079c6:	d01a      	beq.n	80079fe <HAL_TIM_ConfigClockSource+0xaa>
 80079c8:	2b70      	cmp	r3, #112	; 0x70
 80079ca:	d87b      	bhi.n	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
 80079cc:	2b60      	cmp	r3, #96	; 0x60
 80079ce:	d050      	beq.n	8007a72 <HAL_TIM_ConfigClockSource+0x11e>
 80079d0:	2b60      	cmp	r3, #96	; 0x60
 80079d2:	d877      	bhi.n	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
 80079d4:	2b50      	cmp	r3, #80	; 0x50
 80079d6:	d03c      	beq.n	8007a52 <HAL_TIM_ConfigClockSource+0xfe>
 80079d8:	2b50      	cmp	r3, #80	; 0x50
 80079da:	d873      	bhi.n	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
 80079dc:	2b40      	cmp	r3, #64	; 0x40
 80079de:	d058      	beq.n	8007a92 <HAL_TIM_ConfigClockSource+0x13e>
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d86f      	bhi.n	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
 80079e4:	2b30      	cmp	r3, #48	; 0x30
 80079e6:	d064      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x15e>
 80079e8:	2b30      	cmp	r3, #48	; 0x30
 80079ea:	d86b      	bhi.n	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d060      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x15e>
 80079f0:	2b20      	cmp	r3, #32
 80079f2:	d867      	bhi.n	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d05c      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x15e>
 80079f8:	2b10      	cmp	r3, #16
 80079fa:	d05a      	beq.n	8007ab2 <HAL_TIM_ConfigClockSource+0x15e>
 80079fc:	e062      	b.n	8007ac4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a0e:	f000 fdd5 	bl	80085bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	609a      	str	r2, [r3, #8]
      break;
 8007a2a:	e04f      	b.n	8007acc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a3c:	f000 fdbe 	bl	80085bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689a      	ldr	r2, [r3, #8]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a4e:	609a      	str	r2, [r3, #8]
      break;
 8007a50:	e03c      	b.n	8007acc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f000 fc7c 	bl	800835c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2150      	movs	r1, #80	; 0x50
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fd8b 	bl	8008586 <TIM_ITRx_SetConfig>
      break;
 8007a70:	e02c      	b.n	8007acc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f000 fcd8 	bl	8008434 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2160      	movs	r1, #96	; 0x60
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fd7b 	bl	8008586 <TIM_ITRx_SetConfig>
      break;
 8007a90:	e01c      	b.n	8007acc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f000 fc5c 	bl	800835c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2140      	movs	r1, #64	; 0x40
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fd6b 	bl	8008586 <TIM_ITRx_SetConfig>
      break;
 8007ab0:	e00c      	b.n	8007acc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f000 fd62 	bl	8008586 <TIM_ITRx_SetConfig>
      break;
 8007ac2:	e003      	b.n	8007acc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac8:	e000      	b.n	8007acc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007aca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
	...

08007ae8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b0c      	cmp	r3, #12
 8007afa:	d831      	bhi.n	8007b60 <HAL_TIM_ReadCapturedValue+0x78>
 8007afc:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b02:	bf00      	nop
 8007b04:	08007b39 	.word	0x08007b39
 8007b08:	08007b61 	.word	0x08007b61
 8007b0c:	08007b61 	.word	0x08007b61
 8007b10:	08007b61 	.word	0x08007b61
 8007b14:	08007b43 	.word	0x08007b43
 8007b18:	08007b61 	.word	0x08007b61
 8007b1c:	08007b61 	.word	0x08007b61
 8007b20:	08007b61 	.word	0x08007b61
 8007b24:	08007b4d 	.word	0x08007b4d
 8007b28:	08007b61 	.word	0x08007b61
 8007b2c:	08007b61 	.word	0x08007b61
 8007b30:	08007b61 	.word	0x08007b61
 8007b34:	08007b57 	.word	0x08007b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3e:	60fb      	str	r3, [r7, #12]

      break;
 8007b40:	e00f      	b.n	8007b62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	60fb      	str	r3, [r7, #12]

      break;
 8007b4a:	e00a      	b.n	8007b62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	60fb      	str	r3, [r7, #12]

      break;
 8007b54:	e005      	b.n	8007b62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	60fb      	str	r3, [r7, #12]

      break;
 8007b5e:	e000      	b.n	8007b62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007b60:	bf00      	nop
  }

  return tmpreg;
 8007b62:	68fb      	ldr	r3, [r7, #12]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b78:	bf00      	nop
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bb4:	bf00      	nop
 8007bb6:	370c      	adds	r7, #12
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a3c      	ldr	r2, [pc, #240]	; (8007cc4 <TIM_Base_SetConfig+0x104>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d00f      	beq.n	8007bf8 <TIM_Base_SetConfig+0x38>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bde:	d00b      	beq.n	8007bf8 <TIM_Base_SetConfig+0x38>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a39      	ldr	r2, [pc, #228]	; (8007cc8 <TIM_Base_SetConfig+0x108>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d007      	beq.n	8007bf8 <TIM_Base_SetConfig+0x38>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a38      	ldr	r2, [pc, #224]	; (8007ccc <TIM_Base_SetConfig+0x10c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d003      	beq.n	8007bf8 <TIM_Base_SetConfig+0x38>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a37      	ldr	r2, [pc, #220]	; (8007cd0 <TIM_Base_SetConfig+0x110>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d108      	bne.n	8007c0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	68fa      	ldr	r2, [r7, #12]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a2d      	ldr	r2, [pc, #180]	; (8007cc4 <TIM_Base_SetConfig+0x104>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d01b      	beq.n	8007c4a <TIM_Base_SetConfig+0x8a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c18:	d017      	beq.n	8007c4a <TIM_Base_SetConfig+0x8a>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a2a      	ldr	r2, [pc, #168]	; (8007cc8 <TIM_Base_SetConfig+0x108>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d013      	beq.n	8007c4a <TIM_Base_SetConfig+0x8a>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a29      	ldr	r2, [pc, #164]	; (8007ccc <TIM_Base_SetConfig+0x10c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00f      	beq.n	8007c4a <TIM_Base_SetConfig+0x8a>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a28      	ldr	r2, [pc, #160]	; (8007cd0 <TIM_Base_SetConfig+0x110>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d00b      	beq.n	8007c4a <TIM_Base_SetConfig+0x8a>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a27      	ldr	r2, [pc, #156]	; (8007cd4 <TIM_Base_SetConfig+0x114>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d007      	beq.n	8007c4a <TIM_Base_SetConfig+0x8a>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4a26      	ldr	r2, [pc, #152]	; (8007cd8 <TIM_Base_SetConfig+0x118>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d003      	beq.n	8007c4a <TIM_Base_SetConfig+0x8a>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4a25      	ldr	r2, [pc, #148]	; (8007cdc <TIM_Base_SetConfig+0x11c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d108      	bne.n	8007c5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a10      	ldr	r2, [pc, #64]	; (8007cc4 <TIM_Base_SetConfig+0x104>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d00f      	beq.n	8007ca8 <TIM_Base_SetConfig+0xe8>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a11      	ldr	r2, [pc, #68]	; (8007cd0 <TIM_Base_SetConfig+0x110>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00b      	beq.n	8007ca8 <TIM_Base_SetConfig+0xe8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a10      	ldr	r2, [pc, #64]	; (8007cd4 <TIM_Base_SetConfig+0x114>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d007      	beq.n	8007ca8 <TIM_Base_SetConfig+0xe8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a0f      	ldr	r2, [pc, #60]	; (8007cd8 <TIM_Base_SetConfig+0x118>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d003      	beq.n	8007ca8 <TIM_Base_SetConfig+0xe8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a0e      	ldr	r2, [pc, #56]	; (8007cdc <TIM_Base_SetConfig+0x11c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d103      	bne.n	8007cb0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	615a      	str	r2, [r3, #20]
}
 8007cb6:	bf00      	nop
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40012c00 	.word	0x40012c00
 8007cc8:	40000400 	.word	0x40000400
 8007ccc:	40000800 	.word	0x40000800
 8007cd0:	40013400 	.word	0x40013400
 8007cd4:	40014000 	.word	0x40014000
 8007cd8:	40014400 	.word	0x40014400
 8007cdc:	40014800 	.word	0x40014800

08007ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f023 0201 	bic.w	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f023 0303 	bic.w	r3, r3, #3
 8007d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 0302 	bic.w	r3, r3, #2
 8007d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a2c      	ldr	r2, [pc, #176]	; (8007dec <TIM_OC1_SetConfig+0x10c>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00f      	beq.n	8007d60 <TIM_OC1_SetConfig+0x80>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a2b      	ldr	r2, [pc, #172]	; (8007df0 <TIM_OC1_SetConfig+0x110>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00b      	beq.n	8007d60 <TIM_OC1_SetConfig+0x80>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <TIM_OC1_SetConfig+0x114>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d007      	beq.n	8007d60 <TIM_OC1_SetConfig+0x80>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a29      	ldr	r2, [pc, #164]	; (8007df8 <TIM_OC1_SetConfig+0x118>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_OC1_SetConfig+0x80>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a28      	ldr	r2, [pc, #160]	; (8007dfc <TIM_OC1_SetConfig+0x11c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d10c      	bne.n	8007d7a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f023 0308 	bic.w	r3, r3, #8
 8007d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	697a      	ldr	r2, [r7, #20]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	f023 0304 	bic.w	r3, r3, #4
 8007d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a1b      	ldr	r2, [pc, #108]	; (8007dec <TIM_OC1_SetConfig+0x10c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00f      	beq.n	8007da2 <TIM_OC1_SetConfig+0xc2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a1a      	ldr	r2, [pc, #104]	; (8007df0 <TIM_OC1_SetConfig+0x110>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d00b      	beq.n	8007da2 <TIM_OC1_SetConfig+0xc2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a19      	ldr	r2, [pc, #100]	; (8007df4 <TIM_OC1_SetConfig+0x114>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d007      	beq.n	8007da2 <TIM_OC1_SetConfig+0xc2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a18      	ldr	r2, [pc, #96]	; (8007df8 <TIM_OC1_SetConfig+0x118>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d003      	beq.n	8007da2 <TIM_OC1_SetConfig+0xc2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a17      	ldr	r2, [pc, #92]	; (8007dfc <TIM_OC1_SetConfig+0x11c>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d111      	bne.n	8007dc6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	621a      	str	r2, [r3, #32]
}
 8007de0:	bf00      	nop
 8007de2:	371c      	adds	r7, #28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	40012c00 	.word	0x40012c00
 8007df0:	40013400 	.word	0x40013400
 8007df4:	40014000 	.word	0x40014000
 8007df8:	40014400 	.word	0x40014400
 8007dfc:	40014800 	.word	0x40014800

08007e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	f023 0210 	bic.w	r2, r3, #16
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	021b      	lsls	r3, r3, #8
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 0320 	bic.w	r3, r3, #32
 8007e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a28      	ldr	r2, [pc, #160]	; (8007f00 <TIM_OC2_SetConfig+0x100>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d003      	beq.n	8007e6c <TIM_OC2_SetConfig+0x6c>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a27      	ldr	r2, [pc, #156]	; (8007f04 <TIM_OC2_SetConfig+0x104>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d10d      	bne.n	8007e88 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a1d      	ldr	r2, [pc, #116]	; (8007f00 <TIM_OC2_SetConfig+0x100>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d00f      	beq.n	8007eb0 <TIM_OC2_SetConfig+0xb0>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1c      	ldr	r2, [pc, #112]	; (8007f04 <TIM_OC2_SetConfig+0x104>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d00b      	beq.n	8007eb0 <TIM_OC2_SetConfig+0xb0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a1b      	ldr	r2, [pc, #108]	; (8007f08 <TIM_OC2_SetConfig+0x108>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_OC2_SetConfig+0xb0>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a1a      	ldr	r2, [pc, #104]	; (8007f0c <TIM_OC2_SetConfig+0x10c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_OC2_SetConfig+0xb0>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a19      	ldr	r2, [pc, #100]	; (8007f10 <TIM_OC2_SetConfig+0x110>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d113      	bne.n	8007ed8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eb6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ebe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	621a      	str	r2, [r3, #32]
}
 8007ef2:	bf00      	nop
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400
 8007f08:	40014000 	.word	0x40014000
 8007f0c:	40014400 	.word	0x40014400
 8007f10:	40014800 	.word	0x40014800

08007f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	021b      	lsls	r3, r3, #8
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a27      	ldr	r2, [pc, #156]	; (8008010 <TIM_OC3_SetConfig+0xfc>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d003      	beq.n	8007f7e <TIM_OC3_SetConfig+0x6a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a26      	ldr	r2, [pc, #152]	; (8008014 <TIM_OC3_SetConfig+0x100>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d10d      	bne.n	8007f9a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f98:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a1c      	ldr	r2, [pc, #112]	; (8008010 <TIM_OC3_SetConfig+0xfc>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00f      	beq.n	8007fc2 <TIM_OC3_SetConfig+0xae>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a1b      	ldr	r2, [pc, #108]	; (8008014 <TIM_OC3_SetConfig+0x100>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00b      	beq.n	8007fc2 <TIM_OC3_SetConfig+0xae>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a1a      	ldr	r2, [pc, #104]	; (8008018 <TIM_OC3_SetConfig+0x104>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d007      	beq.n	8007fc2 <TIM_OC3_SetConfig+0xae>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a19      	ldr	r2, [pc, #100]	; (800801c <TIM_OC3_SetConfig+0x108>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d003      	beq.n	8007fc2 <TIM_OC3_SetConfig+0xae>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a18      	ldr	r2, [pc, #96]	; (8008020 <TIM_OC3_SetConfig+0x10c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d113      	bne.n	8007fea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	621a      	str	r2, [r3, #32]
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	40012c00 	.word	0x40012c00
 8008014:	40013400 	.word	0x40013400
 8008018:	40014000 	.word	0x40014000
 800801c:	40014400 	.word	0x40014400
 8008020:	40014800 	.word	0x40014800

08008024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008024:	b480      	push	{r7}
 8008026:	b087      	sub	sp, #28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a1b      	ldr	r3, [r3, #32]
 800803e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800805e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	4313      	orrs	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	031b      	lsls	r3, r3, #12
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a18      	ldr	r2, [pc, #96]	; (80080e4 <TIM_OC4_SetConfig+0xc0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00f      	beq.n	80080a8 <TIM_OC4_SetConfig+0x84>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a17      	ldr	r2, [pc, #92]	; (80080e8 <TIM_OC4_SetConfig+0xc4>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d00b      	beq.n	80080a8 <TIM_OC4_SetConfig+0x84>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a16      	ldr	r2, [pc, #88]	; (80080ec <TIM_OC4_SetConfig+0xc8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d007      	beq.n	80080a8 <TIM_OC4_SetConfig+0x84>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a15      	ldr	r2, [pc, #84]	; (80080f0 <TIM_OC4_SetConfig+0xcc>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d003      	beq.n	80080a8 <TIM_OC4_SetConfig+0x84>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a14      	ldr	r2, [pc, #80]	; (80080f4 <TIM_OC4_SetConfig+0xd0>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d109      	bne.n	80080bc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	019b      	lsls	r3, r3, #6
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	4313      	orrs	r3, r2
 80080ba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	621a      	str	r2, [r3, #32]
}
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	40012c00 	.word	0x40012c00
 80080e8:	40013400 	.word	0x40013400
 80080ec:	40014000 	.word	0x40014000
 80080f0:	40014400 	.word	0x40014400
 80080f4:	40014800 	.word	0x40014800

080080f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800813c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	041b      	lsls	r3, r3, #16
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a17      	ldr	r2, [pc, #92]	; (80081ac <TIM_OC5_SetConfig+0xb4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d00f      	beq.n	8008172 <TIM_OC5_SetConfig+0x7a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a16      	ldr	r2, [pc, #88]	; (80081b0 <TIM_OC5_SetConfig+0xb8>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00b      	beq.n	8008172 <TIM_OC5_SetConfig+0x7a>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <TIM_OC5_SetConfig+0xbc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d007      	beq.n	8008172 <TIM_OC5_SetConfig+0x7a>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a14      	ldr	r2, [pc, #80]	; (80081b8 <TIM_OC5_SetConfig+0xc0>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d003      	beq.n	8008172 <TIM_OC5_SetConfig+0x7a>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a13      	ldr	r2, [pc, #76]	; (80081bc <TIM_OC5_SetConfig+0xc4>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d109      	bne.n	8008186 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008178:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	695b      	ldr	r3, [r3, #20]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	621a      	str	r2, [r3, #32]
}
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40013400 	.word	0x40013400
 80081b4:	40014000 	.word	0x40014000
 80081b8:	40014400 	.word	0x40014400
 80081bc:	40014800 	.word	0x40014800

080081c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008206:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	051b      	lsls	r3, r3, #20
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a18      	ldr	r2, [pc, #96]	; (8008278 <TIM_OC6_SetConfig+0xb8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00f      	beq.n	800823c <TIM_OC6_SetConfig+0x7c>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a17      	ldr	r2, [pc, #92]	; (800827c <TIM_OC6_SetConfig+0xbc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00b      	beq.n	800823c <TIM_OC6_SetConfig+0x7c>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a16      	ldr	r2, [pc, #88]	; (8008280 <TIM_OC6_SetConfig+0xc0>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d007      	beq.n	800823c <TIM_OC6_SetConfig+0x7c>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a15      	ldr	r2, [pc, #84]	; (8008284 <TIM_OC6_SetConfig+0xc4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d003      	beq.n	800823c <TIM_OC6_SetConfig+0x7c>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a14      	ldr	r2, [pc, #80]	; (8008288 <TIM_OC6_SetConfig+0xc8>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d109      	bne.n	8008250 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008242:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	029b      	lsls	r3, r3, #10
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40012c00 	.word	0x40012c00
 800827c:	40013400 	.word	0x40013400
 8008280:	40014000 	.word	0x40014000
 8008284:	40014400 	.word	0x40014400
 8008288:	40014800 	.word	0x40014800

0800828c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	f023 0201 	bic.w	r2, r3, #1
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	4a24      	ldr	r2, [pc, #144]	; (8008348 <TIM_TI1_SetConfig+0xbc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <TIM_TI1_SetConfig+0x56>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c0:	d00f      	beq.n	80082e2 <TIM_TI1_SetConfig+0x56>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a21      	ldr	r2, [pc, #132]	; (800834c <TIM_TI1_SetConfig+0xc0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <TIM_TI1_SetConfig+0x56>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4a20      	ldr	r2, [pc, #128]	; (8008350 <TIM_TI1_SetConfig+0xc4>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d007      	beq.n	80082e2 <TIM_TI1_SetConfig+0x56>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <TIM_TI1_SetConfig+0xc8>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_TI1_SetConfig+0x56>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	4a1e      	ldr	r2, [pc, #120]	; (8008358 <TIM_TI1_SetConfig+0xcc>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d101      	bne.n	80082e6 <TIM_TI1_SetConfig+0x5a>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <TIM_TI1_SetConfig+0x5c>
 80082e6:	2300      	movs	r3, #0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d008      	beq.n	80082fe <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f023 0303 	bic.w	r3, r3, #3
 80082f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	e003      	b.n	8008306 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f043 0301 	orr.w	r3, r3, #1
 8008304:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800830c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	011b      	lsls	r3, r3, #4
 8008312:	b2db      	uxtb	r3, r3
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	f023 030a 	bic.w	r3, r3, #10
 8008320:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	f003 030a 	and.w	r3, r3, #10
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	4313      	orrs	r3, r2
 800832c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	40012c00 	.word	0x40012c00
 800834c:	40000400 	.word	0x40000400
 8008350:	40000800 	.word	0x40000800
 8008354:	40013400 	.word	0x40013400
 8008358:	40014000 	.word	0x40014000

0800835c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	f023 0201 	bic.w	r2, r3, #1
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f023 030a 	bic.w	r3, r3, #10
 8008398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	621a      	str	r2, [r3, #32]
}
 80083ae:	bf00      	nop
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083ba:	b480      	push	{r7}
 80083bc:	b087      	sub	sp, #28
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
 80083c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f023 0210 	bic.w	r2, r3, #16
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	699b      	ldr	r3, [r3, #24]
 80083d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	031b      	lsls	r3, r3, #12
 80083fe:	b29b      	uxth	r3, r3
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800840c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	011b      	lsls	r3, r3, #4
 8008412:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	621a      	str	r2, [r3, #32]
}
 8008428:	bf00      	nop
 800842a:	371c      	adds	r7, #28
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008434:	b480      	push	{r7}
 8008436:	b087      	sub	sp, #28
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	f023 0210 	bic.w	r2, r3, #16
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800845e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	031b      	lsls	r3, r3, #12
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008470:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	4313      	orrs	r3, r2
 800847a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	697a      	ldr	r2, [r7, #20]
 8008480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	621a      	str	r2, [r3, #32]
}
 8008488:	bf00      	nop
 800848a:	371c      	adds	r7, #28
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f023 0303 	bic.w	r3, r3, #3
 80084c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	011b      	lsls	r3, r3, #4
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	4313      	orrs	r3, r2
 80084dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80084e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	621a      	str	r2, [r3, #32]
}
 8008500:	bf00      	nop
 8008502:	371c      	adds	r7, #28
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800850c:	b480      	push	{r7}
 800850e:	b087      	sub	sp, #28
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008538:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	4313      	orrs	r3, r2
 8008542:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800854a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	031b      	lsls	r3, r3, #12
 8008550:	b29b      	uxth	r3, r3
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	4313      	orrs	r3, r2
 8008556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800855e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	031b      	lsls	r3, r3, #12
 8008564:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	4313      	orrs	r3, r2
 800856c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	621a      	str	r2, [r3, #32]
}
 800857a:	bf00      	nop
 800857c:	371c      	adds	r7, #28
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr

08008586 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008586:	b480      	push	{r7}
 8008588:	b085      	sub	sp, #20
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800859c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f043 0307 	orr.w	r3, r3, #7
 80085a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	609a      	str	r2, [r3, #8]
}
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	021a      	lsls	r2, r3, #8
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	431a      	orrs	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	609a      	str	r2, [r3, #8]
}
 80085f0:	bf00      	nop
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f003 031f 	and.w	r3, r3, #31
 800860e:	2201      	movs	r2, #1
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a1a      	ldr	r2, [r3, #32]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	43db      	mvns	r3, r3
 800861e:	401a      	ands	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a1a      	ldr	r2, [r3, #32]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 031f 	and.w	r3, r3, #31
 800862e:	6879      	ldr	r1, [r7, #4]
 8008630:	fa01 f303 	lsl.w	r3, r1, r3
 8008634:	431a      	orrs	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	621a      	str	r2, [r3, #32]
}
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
	...

08008648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800865c:	2302      	movs	r3, #2
 800865e:	e063      	b.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a2b      	ldr	r2, [pc, #172]	; (8008734 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a2a      	ldr	r2, [pc, #168]	; (8008738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d108      	bne.n	80086a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800869a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	68fa      	ldr	r2, [r7, #12]
 80086b4:	4313      	orrs	r3, r2
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1b      	ldr	r2, [pc, #108]	; (8008734 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d018      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d2:	d013      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a18      	ldr	r2, [pc, #96]	; (800873c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d00e      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a17      	ldr	r2, [pc, #92]	; (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d009      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a12      	ldr	r2, [pc, #72]	; (8008738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d004      	beq.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a13      	ldr	r2, [pc, #76]	; (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d10c      	bne.n	8008716 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008702:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	4313      	orrs	r3, r2
 800870c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	40012c00 	.word	0x40012c00
 8008738:	40013400 	.word	0x40013400
 800873c:	40000400 	.word	0x40000400
 8008740:	40000800 	.word	0x40000800
 8008744:	40014000 	.word	0x40014000

08008748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800878c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008790:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008798:	b29a      	uxth	r2, r3
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	b29b      	uxth	r3, r3
 800879e:	43db      	mvns	r3, r3
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	4013      	ands	r3, r2
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr

080087ba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80087ba:	b084      	sub	sp, #16
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	f107 0014 	add.w	r0, r7, #20
 80087c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	b004      	add	sp, #16
 80087fa:	4770      	bx	lr

080087fc <malloc>:
 80087fc:	4b02      	ldr	r3, [pc, #8]	; (8008808 <malloc+0xc>)
 80087fe:	4601      	mov	r1, r0
 8008800:	6818      	ldr	r0, [r3, #0]
 8008802:	f000 b823 	b.w	800884c <_malloc_r>
 8008806:	bf00      	nop
 8008808:	200000d4 	.word	0x200000d4

0800880c <sbrk_aligned>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	4e0e      	ldr	r6, [pc, #56]	; (8008848 <sbrk_aligned+0x3c>)
 8008810:	460c      	mov	r4, r1
 8008812:	6831      	ldr	r1, [r6, #0]
 8008814:	4605      	mov	r5, r0
 8008816:	b911      	cbnz	r1, 800881e <sbrk_aligned+0x12>
 8008818:	f000 f8de 	bl	80089d8 <_sbrk_r>
 800881c:	6030      	str	r0, [r6, #0]
 800881e:	4621      	mov	r1, r4
 8008820:	4628      	mov	r0, r5
 8008822:	f000 f8d9 	bl	80089d8 <_sbrk_r>
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d00a      	beq.n	8008840 <sbrk_aligned+0x34>
 800882a:	1cc4      	adds	r4, r0, #3
 800882c:	f024 0403 	bic.w	r4, r4, #3
 8008830:	42a0      	cmp	r0, r4
 8008832:	d007      	beq.n	8008844 <sbrk_aligned+0x38>
 8008834:	1a21      	subs	r1, r4, r0
 8008836:	4628      	mov	r0, r5
 8008838:	f000 f8ce 	bl	80089d8 <_sbrk_r>
 800883c:	3001      	adds	r0, #1
 800883e:	d101      	bne.n	8008844 <sbrk_aligned+0x38>
<<<<<<< HEAD
 8008840:	f04f 34ff 	mov.w	r4, #4294967295
=======
 8008840:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8008844:	4620      	mov	r0, r4
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	200007e8 	.word	0x200007e8

0800884c <_malloc_r>:
 800884c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008850:	1ccd      	adds	r5, r1, #3
 8008852:	f025 0503 	bic.w	r5, r5, #3
 8008856:	3508      	adds	r5, #8
 8008858:	2d0c      	cmp	r5, #12
 800885a:	bf38      	it	cc
 800885c:	250c      	movcc	r5, #12
 800885e:	2d00      	cmp	r5, #0
 8008860:	4607      	mov	r7, r0
 8008862:	db01      	blt.n	8008868 <_malloc_r+0x1c>
 8008864:	42a9      	cmp	r1, r5
 8008866:	d905      	bls.n	8008874 <_malloc_r+0x28>
 8008868:	230c      	movs	r3, #12
 800886a:	603b      	str	r3, [r7, #0]
 800886c:	2600      	movs	r6, #0
 800886e:	4630      	mov	r0, r6
 8008870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008874:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008948 <_malloc_r+0xfc>
 8008878:	f000 f868 	bl	800894c <__malloc_lock>
 800887c:	f8d8 3000 	ldr.w	r3, [r8]
 8008880:	461c      	mov	r4, r3
 8008882:	bb5c      	cbnz	r4, 80088dc <_malloc_r+0x90>
 8008884:	4629      	mov	r1, r5
 8008886:	4638      	mov	r0, r7
 8008888:	f7ff ffc0 	bl	800880c <sbrk_aligned>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	4604      	mov	r4, r0
 8008890:	d155      	bne.n	800893e <_malloc_r+0xf2>
 8008892:	f8d8 4000 	ldr.w	r4, [r8]
 8008896:	4626      	mov	r6, r4
 8008898:	2e00      	cmp	r6, #0
 800889a:	d145      	bne.n	8008928 <_malloc_r+0xdc>
 800889c:	2c00      	cmp	r4, #0
 800889e:	d048      	beq.n	8008932 <_malloc_r+0xe6>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	4631      	mov	r1, r6
 80088a4:	4638      	mov	r0, r7
 80088a6:	eb04 0903 	add.w	r9, r4, r3
 80088aa:	f000 f895 	bl	80089d8 <_sbrk_r>
 80088ae:	4581      	cmp	r9, r0
 80088b0:	d13f      	bne.n	8008932 <_malloc_r+0xe6>
 80088b2:	6821      	ldr	r1, [r4, #0]
 80088b4:	1a6d      	subs	r5, r5, r1
 80088b6:	4629      	mov	r1, r5
 80088b8:	4638      	mov	r0, r7
 80088ba:	f7ff ffa7 	bl	800880c <sbrk_aligned>
 80088be:	3001      	adds	r0, #1
 80088c0:	d037      	beq.n	8008932 <_malloc_r+0xe6>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	442b      	add	r3, r5
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	f8d8 3000 	ldr.w	r3, [r8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d038      	beq.n	8008942 <_malloc_r+0xf6>
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	42a2      	cmp	r2, r4
 80088d4:	d12b      	bne.n	800892e <_malloc_r+0xe2>
 80088d6:	2200      	movs	r2, #0
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	e00f      	b.n	80088fc <_malloc_r+0xb0>
 80088dc:	6822      	ldr	r2, [r4, #0]
 80088de:	1b52      	subs	r2, r2, r5
 80088e0:	d41f      	bmi.n	8008922 <_malloc_r+0xd6>
 80088e2:	2a0b      	cmp	r2, #11
 80088e4:	d917      	bls.n	8008916 <_malloc_r+0xca>
 80088e6:	1961      	adds	r1, r4, r5
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	6025      	str	r5, [r4, #0]
 80088ec:	bf18      	it	ne
 80088ee:	6059      	strne	r1, [r3, #4]
 80088f0:	6863      	ldr	r3, [r4, #4]
 80088f2:	bf08      	it	eq
 80088f4:	f8c8 1000 	streq.w	r1, [r8]
 80088f8:	5162      	str	r2, [r4, r5]
 80088fa:	604b      	str	r3, [r1, #4]
 80088fc:	4638      	mov	r0, r7
 80088fe:	f104 060b 	add.w	r6, r4, #11
 8008902:	f000 f829 	bl	8008958 <__malloc_unlock>
 8008906:	f026 0607 	bic.w	r6, r6, #7
 800890a:	1d23      	adds	r3, r4, #4
 800890c:	1af2      	subs	r2, r6, r3
 800890e:	d0ae      	beq.n	800886e <_malloc_r+0x22>
 8008910:	1b9b      	subs	r3, r3, r6
 8008912:	50a3      	str	r3, [r4, r2]
 8008914:	e7ab      	b.n	800886e <_malloc_r+0x22>
 8008916:	42a3      	cmp	r3, r4
 8008918:	6862      	ldr	r2, [r4, #4]
 800891a:	d1dd      	bne.n	80088d8 <_malloc_r+0x8c>
 800891c:	f8c8 2000 	str.w	r2, [r8]
 8008920:	e7ec      	b.n	80088fc <_malloc_r+0xb0>
 8008922:	4623      	mov	r3, r4
 8008924:	6864      	ldr	r4, [r4, #4]
 8008926:	e7ac      	b.n	8008882 <_malloc_r+0x36>
 8008928:	4634      	mov	r4, r6
 800892a:	6876      	ldr	r6, [r6, #4]
 800892c:	e7b4      	b.n	8008898 <_malloc_r+0x4c>
 800892e:	4613      	mov	r3, r2
 8008930:	e7cc      	b.n	80088cc <_malloc_r+0x80>
 8008932:	230c      	movs	r3, #12
 8008934:	603b      	str	r3, [r7, #0]
 8008936:	4638      	mov	r0, r7
 8008938:	f000 f80e 	bl	8008958 <__malloc_unlock>
 800893c:	e797      	b.n	800886e <_malloc_r+0x22>
 800893e:	6025      	str	r5, [r4, #0]
 8008940:	e7dc      	b.n	80088fc <_malloc_r+0xb0>
 8008942:	605b      	str	r3, [r3, #4]
 8008944:	deff      	udf	#255	; 0xff
 8008946:	bf00      	nop
 8008948:	200007e4 	.word	0x200007e4

0800894c <__malloc_lock>:
 800894c:	4801      	ldr	r0, [pc, #4]	; (8008954 <__malloc_lock+0x8>)
 800894e:	f000 b87d 	b.w	8008a4c <__retarget_lock_acquire_recursive>
 8008952:	bf00      	nop
<<<<<<< HEAD
 8008954:	20000928 	.word	0x20000928
=======
 8008954:	20000924 	.word	0x20000924
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305

08008958 <__malloc_unlock>:
 8008958:	4801      	ldr	r0, [pc, #4]	; (8008960 <__malloc_unlock+0x8>)
 800895a:	f000 b878 	b.w	8008a4e <__retarget_lock_release_recursive>
 800895e:	bf00      	nop
<<<<<<< HEAD
 8008960:	20000928 	.word	0x20000928

08008964 <siprintf>:
 8008964:	b40e      	push	{r1, r2, r3}
 8008966:	b500      	push	{lr}
 8008968:	b09c      	sub	sp, #112	; 0x70
 800896a:	ab1d      	add	r3, sp, #116	; 0x74
 800896c:	9002      	str	r0, [sp, #8]
 800896e:	9006      	str	r0, [sp, #24]
 8008970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008974:	4809      	ldr	r0, [pc, #36]	; (800899c <siprintf+0x38>)
 8008976:	9107      	str	r1, [sp, #28]
 8008978:	9104      	str	r1, [sp, #16]
 800897a:	4909      	ldr	r1, [pc, #36]	; (80089a0 <siprintf+0x3c>)
 800897c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008980:	9105      	str	r1, [sp, #20]
 8008982:	6800      	ldr	r0, [r0, #0]
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	a902      	add	r1, sp, #8
 8008988:	f000 f908 	bl	8008b9c <_svfiprintf_r>
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	2200      	movs	r2, #0
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	b01c      	add	sp, #112	; 0x70
 8008994:	f85d eb04 	ldr.w	lr, [sp], #4
 8008998:	b003      	add	sp, #12
 800899a:	4770      	bx	lr
 800899c:	200000d4 	.word	0x200000d4
 80089a0:	ffff0208 	.word	0xffff0208

080089a4 <memset>:
 80089a4:	4402      	add	r2, r0
 80089a6:	4603      	mov	r3, r0
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d100      	bne.n	80089ae <memset+0xa>
 80089ac:	4770      	bx	lr
 80089ae:	f803 1b01 	strb.w	r1, [r3], #1
 80089b2:	e7f9      	b.n	80089a8 <memset+0x4>

080089b4 <strncmp>:
 80089b4:	b510      	push	{r4, lr}
 80089b6:	b16a      	cbz	r2, 80089d4 <strncmp+0x20>
 80089b8:	3901      	subs	r1, #1
 80089ba:	1884      	adds	r4, r0, r2
 80089bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d103      	bne.n	80089d0 <strncmp+0x1c>
 80089c8:	42a0      	cmp	r0, r4
 80089ca:	d001      	beq.n	80089d0 <strncmp+0x1c>
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	d1f5      	bne.n	80089bc <strncmp+0x8>
 80089d0:	1ad0      	subs	r0, r2, r3
 80089d2:	bd10      	pop	{r4, pc}
 80089d4:	4610      	mov	r0, r2
 80089d6:	e7fc      	b.n	80089d2 <strncmp+0x1e>

080089d8 <_sbrk_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	; (80089f4 <_sbrk_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f9 fe0c 	bl	8002600 <_sbrk>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_sbrk_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_sbrk_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20000924 	.word	0x20000924

080089f8 <__errno>:
 80089f8:	4b01      	ldr	r3, [pc, #4]	; (8008a00 <__errno+0x8>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	200000d4 	.word	0x200000d4

08008a04 <__libc_init_array>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	4d0d      	ldr	r5, [pc, #52]	; (8008a3c <__libc_init_array+0x38>)
 8008a08:	4c0d      	ldr	r4, [pc, #52]	; (8008a40 <__libc_init_array+0x3c>)
 8008a0a:	1b64      	subs	r4, r4, r5
 8008a0c:	10a4      	asrs	r4, r4, #2
 8008a0e:	2600      	movs	r6, #0
 8008a10:	42a6      	cmp	r6, r4
 8008a12:	d109      	bne.n	8008a28 <__libc_init_array+0x24>
 8008a14:	4d0b      	ldr	r5, [pc, #44]	; (8008a44 <__libc_init_array+0x40>)
 8008a16:	4c0c      	ldr	r4, [pc, #48]	; (8008a48 <__libc_init_array+0x44>)
 8008a18:	f001 fbee 	bl	800a1f8 <_init>
 8008a1c:	1b64      	subs	r4, r4, r5
 8008a1e:	10a4      	asrs	r4, r4, #2
 8008a20:	2600      	movs	r6, #0
 8008a22:	42a6      	cmp	r6, r4
 8008a24:	d105      	bne.n	8008a32 <__libc_init_array+0x2e>
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2c:	4798      	blx	r3
 8008a2e:	3601      	adds	r6, #1
 8008a30:	e7ee      	b.n	8008a10 <__libc_init_array+0xc>
 8008a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a36:	4798      	blx	r3
 8008a38:	3601      	adds	r6, #1
 8008a3a:	e7f2      	b.n	8008a22 <__libc_init_array+0x1e>
 8008a3c:	0800a4c0 	.word	0x0800a4c0
 8008a40:	0800a4c0 	.word	0x0800a4c0
 8008a44:	0800a4c0 	.word	0x0800a4c0
 8008a48:	0800a4c4 	.word	0x0800a4c4

08008a4c <__retarget_lock_acquire_recursive>:
 8008a4c:	4770      	bx	lr

08008a4e <__retarget_lock_release_recursive>:
 8008a4e:	4770      	bx	lr

08008a50 <_free_r>:
 8008a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a52:	2900      	cmp	r1, #0
 8008a54:	d044      	beq.n	8008ae0 <_free_r+0x90>
 8008a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a5a:	9001      	str	r0, [sp, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a62:	bfb8      	it	lt
 8008a64:	18e4      	addlt	r4, r4, r3
 8008a66:	f7ff ff71 	bl	800894c <__malloc_lock>
 8008a6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ae4 <_free_r+0x94>)
 8008a6c:	9801      	ldr	r0, [sp, #4]
 8008a6e:	6813      	ldr	r3, [r2, #0]
 8008a70:	b933      	cbnz	r3, 8008a80 <_free_r+0x30>
 8008a72:	6063      	str	r3, [r4, #4]
 8008a74:	6014      	str	r4, [r2, #0]
 8008a76:	b003      	add	sp, #12
 8008a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a7c:	f7ff bf6c 	b.w	8008958 <__malloc_unlock>
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	d908      	bls.n	8008a96 <_free_r+0x46>
 8008a84:	6825      	ldr	r5, [r4, #0]
 8008a86:	1961      	adds	r1, r4, r5
 8008a88:	428b      	cmp	r3, r1
 8008a8a:	bf01      	itttt	eq
 8008a8c:	6819      	ldreq	r1, [r3, #0]
 8008a8e:	685b      	ldreq	r3, [r3, #4]
 8008a90:	1949      	addeq	r1, r1, r5
 8008a92:	6021      	streq	r1, [r4, #0]
 8008a94:	e7ed      	b.n	8008a72 <_free_r+0x22>
 8008a96:	461a      	mov	r2, r3
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	b10b      	cbz	r3, 8008aa0 <_free_r+0x50>
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d9fa      	bls.n	8008a96 <_free_r+0x46>
 8008aa0:	6811      	ldr	r1, [r2, #0]
 8008aa2:	1855      	adds	r5, r2, r1
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d10b      	bne.n	8008ac0 <_free_r+0x70>
 8008aa8:	6824      	ldr	r4, [r4, #0]
 8008aaa:	4421      	add	r1, r4
 8008aac:	1854      	adds	r4, r2, r1
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	6011      	str	r1, [r2, #0]
 8008ab2:	d1e0      	bne.n	8008a76 <_free_r+0x26>
 8008ab4:	681c      	ldr	r4, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	6053      	str	r3, [r2, #4]
 8008aba:	440c      	add	r4, r1
 8008abc:	6014      	str	r4, [r2, #0]
 8008abe:	e7da      	b.n	8008a76 <_free_r+0x26>
 8008ac0:	d902      	bls.n	8008ac8 <_free_r+0x78>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	6003      	str	r3, [r0, #0]
 8008ac6:	e7d6      	b.n	8008a76 <_free_r+0x26>
 8008ac8:	6825      	ldr	r5, [r4, #0]
 8008aca:	1961      	adds	r1, r4, r5
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf04      	itt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	6063      	str	r3, [r4, #4]
 8008ad6:	bf04      	itt	eq
 8008ad8:	1949      	addeq	r1, r1, r5
 8008ada:	6021      	streq	r1, [r4, #0]
 8008adc:	6054      	str	r4, [r2, #4]
 8008ade:	e7ca      	b.n	8008a76 <_free_r+0x26>
 8008ae0:	b003      	add	sp, #12
 8008ae2:	bd30      	pop	{r4, r5, pc}
 8008ae4:	200007e4 	.word	0x200007e4

08008ae8 <__ssputs_r>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	688e      	ldr	r6, [r1, #8]
 8008aee:	461f      	mov	r7, r3
 8008af0:	42be      	cmp	r6, r7
 8008af2:	680b      	ldr	r3, [r1, #0]
 8008af4:	4682      	mov	sl, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	4690      	mov	r8, r2
 8008afa:	d82c      	bhi.n	8008b56 <__ssputs_r+0x6e>
 8008afc:	898a      	ldrh	r2, [r1, #12]
 8008afe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b02:	d026      	beq.n	8008b52 <__ssputs_r+0x6a>
 8008b04:	6965      	ldr	r5, [r4, #20]
 8008b06:	6909      	ldr	r1, [r1, #16]
 8008b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b0c:	eba3 0901 	sub.w	r9, r3, r1
 8008b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b14:	1c7b      	adds	r3, r7, #1
 8008b16:	444b      	add	r3, r9
 8008b18:	106d      	asrs	r5, r5, #1
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	bf38      	it	cc
 8008b1e:	461d      	movcc	r5, r3
 8008b20:	0553      	lsls	r3, r2, #21
 8008b22:	d527      	bpl.n	8008b74 <__ssputs_r+0x8c>
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7ff fe91 	bl	800884c <_malloc_r>
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	b360      	cbz	r0, 8008b88 <__ssputs_r+0xa0>
 8008b2e:	6921      	ldr	r1, [r4, #16]
 8008b30:	464a      	mov	r2, r9
 8008b32:	f000 fadb 	bl	80090ec <memcpy>
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	6126      	str	r6, [r4, #16]
 8008b44:	6165      	str	r5, [r4, #20]
 8008b46:	444e      	add	r6, r9
 8008b48:	eba5 0509 	sub.w	r5, r5, r9
 8008b4c:	6026      	str	r6, [r4, #0]
 8008b4e:	60a5      	str	r5, [r4, #8]
 8008b50:	463e      	mov	r6, r7
 8008b52:	42be      	cmp	r6, r7
 8008b54:	d900      	bls.n	8008b58 <__ssputs_r+0x70>
 8008b56:	463e      	mov	r6, r7
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	4641      	mov	r1, r8
 8008b5e:	f000 faab 	bl	80090b8 <memmove>
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	1b9b      	subs	r3, r3, r6
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	4433      	add	r3, r6
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	462a      	mov	r2, r5
 8008b76:	f000 fac7 	bl	8009108 <_realloc_r>
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d1e0      	bne.n	8008b42 <__ssputs_r+0x5a>
 8008b80:	6921      	ldr	r1, [r4, #16]
 8008b82:	4650      	mov	r0, sl
 8008b84:	f7ff ff64 	bl	8008a50 <_free_r>
 8008b88:	230c      	movs	r3, #12
 8008b8a:	f8ca 3000 	str.w	r3, [sl]
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295
 8008b9a:	e7e9      	b.n	8008b70 <__ssputs_r+0x88>

=======
 8008960:	20000924 	.word	0x20000924

08008964 <siprintf>:
 8008964:	b40e      	push	{r1, r2, r3}
 8008966:	b500      	push	{lr}
 8008968:	b09c      	sub	sp, #112	; 0x70
 800896a:	ab1d      	add	r3, sp, #116	; 0x74
 800896c:	9002      	str	r0, [sp, #8]
 800896e:	9006      	str	r0, [sp, #24]
 8008970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008974:	4809      	ldr	r0, [pc, #36]	; (800899c <siprintf+0x38>)
 8008976:	9107      	str	r1, [sp, #28]
 8008978:	9104      	str	r1, [sp, #16]
 800897a:	4909      	ldr	r1, [pc, #36]	; (80089a0 <siprintf+0x3c>)
 800897c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008980:	9105      	str	r1, [sp, #20]
 8008982:	6800      	ldr	r0, [r0, #0]
 8008984:	9301      	str	r3, [sp, #4]
 8008986:	a902      	add	r1, sp, #8
 8008988:	f000 f908 	bl	8008b9c <_svfiprintf_r>
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	2200      	movs	r2, #0
 8008990:	701a      	strb	r2, [r3, #0]
 8008992:	b01c      	add	sp, #112	; 0x70
 8008994:	f85d eb04 	ldr.w	lr, [sp], #4
 8008998:	b003      	add	sp, #12
 800899a:	4770      	bx	lr
 800899c:	200000d4 	.word	0x200000d4
 80089a0:	ffff0208 	.word	0xffff0208

080089a4 <strncmp>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	b16a      	cbz	r2, 80089c4 <strncmp+0x20>
 80089a8:	3901      	subs	r1, #1
 80089aa:	1884      	adds	r4, r0, r2
 80089ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d103      	bne.n	80089c0 <strncmp+0x1c>
 80089b8:	42a0      	cmp	r0, r4
 80089ba:	d001      	beq.n	80089c0 <strncmp+0x1c>
 80089bc:	2a00      	cmp	r2, #0
 80089be:	d1f5      	bne.n	80089ac <strncmp+0x8>
 80089c0:	1ad0      	subs	r0, r2, r3
 80089c2:	bd10      	pop	{r4, pc}
 80089c4:	4610      	mov	r0, r2
 80089c6:	e7fc      	b.n	80089c2 <strncmp+0x1e>

080089c8 <memset>:
 80089c8:	4402      	add	r2, r0
 80089ca:	4603      	mov	r3, r0
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d100      	bne.n	80089d2 <memset+0xa>
 80089d0:	4770      	bx	lr
 80089d2:	f803 1b01 	strb.w	r1, [r3], #1
 80089d6:	e7f9      	b.n	80089cc <memset+0x4>

080089d8 <_sbrk_r>:
 80089d8:	b538      	push	{r3, r4, r5, lr}
 80089da:	4d06      	ldr	r5, [pc, #24]	; (80089f4 <_sbrk_r+0x1c>)
 80089dc:	2300      	movs	r3, #0
 80089de:	4604      	mov	r4, r0
 80089e0:	4608      	mov	r0, r1
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	f7f9 fe0c 	bl	8002600 <_sbrk>
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d102      	bne.n	80089f2 <_sbrk_r+0x1a>
 80089ec:	682b      	ldr	r3, [r5, #0]
 80089ee:	b103      	cbz	r3, 80089f2 <_sbrk_r+0x1a>
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	bd38      	pop	{r3, r4, r5, pc}
 80089f4:	20000928 	.word	0x20000928

080089f8 <__errno>:
 80089f8:	4b01      	ldr	r3, [pc, #4]	; (8008a00 <__errno+0x8>)
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	200000d4 	.word	0x200000d4

08008a04 <__libc_init_array>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	4d0d      	ldr	r5, [pc, #52]	; (8008a3c <__libc_init_array+0x38>)
 8008a08:	4c0d      	ldr	r4, [pc, #52]	; (8008a40 <__libc_init_array+0x3c>)
 8008a0a:	1b64      	subs	r4, r4, r5
 8008a0c:	10a4      	asrs	r4, r4, #2
 8008a0e:	2600      	movs	r6, #0
 8008a10:	42a6      	cmp	r6, r4
 8008a12:	d109      	bne.n	8008a28 <__libc_init_array+0x24>
 8008a14:	4d0b      	ldr	r5, [pc, #44]	; (8008a44 <__libc_init_array+0x40>)
 8008a16:	4c0c      	ldr	r4, [pc, #48]	; (8008a48 <__libc_init_array+0x44>)
 8008a18:	f001 fbee 	bl	800a1f8 <_init>
 8008a1c:	1b64      	subs	r4, r4, r5
 8008a1e:	10a4      	asrs	r4, r4, #2
 8008a20:	2600      	movs	r6, #0
 8008a22:	42a6      	cmp	r6, r4
 8008a24:	d105      	bne.n	8008a32 <__libc_init_array+0x2e>
 8008a26:	bd70      	pop	{r4, r5, r6, pc}
 8008a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2c:	4798      	blx	r3
 8008a2e:	3601      	adds	r6, #1
 8008a30:	e7ee      	b.n	8008a10 <__libc_init_array+0xc>
 8008a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a36:	4798      	blx	r3
 8008a38:	3601      	adds	r6, #1
 8008a3a:	e7f2      	b.n	8008a22 <__libc_init_array+0x1e>
 8008a3c:	0800a4c0 	.word	0x0800a4c0
 8008a40:	0800a4c0 	.word	0x0800a4c0
 8008a44:	0800a4c0 	.word	0x0800a4c0
 8008a48:	0800a4c4 	.word	0x0800a4c4

08008a4c <__retarget_lock_acquire_recursive>:
 8008a4c:	4770      	bx	lr

08008a4e <__retarget_lock_release_recursive>:
 8008a4e:	4770      	bx	lr

08008a50 <_free_r>:
 8008a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a52:	2900      	cmp	r1, #0
 8008a54:	d044      	beq.n	8008ae0 <_free_r+0x90>
 8008a56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a5a:	9001      	str	r0, [sp, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a62:	bfb8      	it	lt
 8008a64:	18e4      	addlt	r4, r4, r3
 8008a66:	f7ff ff71 	bl	800894c <__malloc_lock>
 8008a6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ae4 <_free_r+0x94>)
 8008a6c:	9801      	ldr	r0, [sp, #4]
 8008a6e:	6813      	ldr	r3, [r2, #0]
 8008a70:	b933      	cbnz	r3, 8008a80 <_free_r+0x30>
 8008a72:	6063      	str	r3, [r4, #4]
 8008a74:	6014      	str	r4, [r2, #0]
 8008a76:	b003      	add	sp, #12
 8008a78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a7c:	f7ff bf6c 	b.w	8008958 <__malloc_unlock>
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	d908      	bls.n	8008a96 <_free_r+0x46>
 8008a84:	6825      	ldr	r5, [r4, #0]
 8008a86:	1961      	adds	r1, r4, r5
 8008a88:	428b      	cmp	r3, r1
 8008a8a:	bf01      	itttt	eq
 8008a8c:	6819      	ldreq	r1, [r3, #0]
 8008a8e:	685b      	ldreq	r3, [r3, #4]
 8008a90:	1949      	addeq	r1, r1, r5
 8008a92:	6021      	streq	r1, [r4, #0]
 8008a94:	e7ed      	b.n	8008a72 <_free_r+0x22>
 8008a96:	461a      	mov	r2, r3
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	b10b      	cbz	r3, 8008aa0 <_free_r+0x50>
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d9fa      	bls.n	8008a96 <_free_r+0x46>
 8008aa0:	6811      	ldr	r1, [r2, #0]
 8008aa2:	1855      	adds	r5, r2, r1
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d10b      	bne.n	8008ac0 <_free_r+0x70>
 8008aa8:	6824      	ldr	r4, [r4, #0]
 8008aaa:	4421      	add	r1, r4
 8008aac:	1854      	adds	r4, r2, r1
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	6011      	str	r1, [r2, #0]
 8008ab2:	d1e0      	bne.n	8008a76 <_free_r+0x26>
 8008ab4:	681c      	ldr	r4, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	6053      	str	r3, [r2, #4]
 8008aba:	440c      	add	r4, r1
 8008abc:	6014      	str	r4, [r2, #0]
 8008abe:	e7da      	b.n	8008a76 <_free_r+0x26>
 8008ac0:	d902      	bls.n	8008ac8 <_free_r+0x78>
 8008ac2:	230c      	movs	r3, #12
 8008ac4:	6003      	str	r3, [r0, #0]
 8008ac6:	e7d6      	b.n	8008a76 <_free_r+0x26>
 8008ac8:	6825      	ldr	r5, [r4, #0]
 8008aca:	1961      	adds	r1, r4, r5
 8008acc:	428b      	cmp	r3, r1
 8008ace:	bf04      	itt	eq
 8008ad0:	6819      	ldreq	r1, [r3, #0]
 8008ad2:	685b      	ldreq	r3, [r3, #4]
 8008ad4:	6063      	str	r3, [r4, #4]
 8008ad6:	bf04      	itt	eq
 8008ad8:	1949      	addeq	r1, r1, r5
 8008ada:	6021      	streq	r1, [r4, #0]
 8008adc:	6054      	str	r4, [r2, #4]
 8008ade:	e7ca      	b.n	8008a76 <_free_r+0x26>
 8008ae0:	b003      	add	sp, #12
 8008ae2:	bd30      	pop	{r4, r5, pc}
 8008ae4:	200007e4 	.word	0x200007e4

08008ae8 <__ssputs_r>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	688e      	ldr	r6, [r1, #8]
 8008aee:	461f      	mov	r7, r3
 8008af0:	42be      	cmp	r6, r7
 8008af2:	680b      	ldr	r3, [r1, #0]
 8008af4:	4682      	mov	sl, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	4690      	mov	r8, r2
 8008afa:	d82c      	bhi.n	8008b56 <__ssputs_r+0x6e>
 8008afc:	898a      	ldrh	r2, [r1, #12]
 8008afe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b02:	d026      	beq.n	8008b52 <__ssputs_r+0x6a>
 8008b04:	6965      	ldr	r5, [r4, #20]
 8008b06:	6909      	ldr	r1, [r1, #16]
 8008b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b0c:	eba3 0901 	sub.w	r9, r3, r1
 8008b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b14:	1c7b      	adds	r3, r7, #1
 8008b16:	444b      	add	r3, r9
 8008b18:	106d      	asrs	r5, r5, #1
 8008b1a:	429d      	cmp	r5, r3
 8008b1c:	bf38      	it	cc
 8008b1e:	461d      	movcc	r5, r3
 8008b20:	0553      	lsls	r3, r2, #21
 8008b22:	d527      	bpl.n	8008b74 <__ssputs_r+0x8c>
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7ff fe91 	bl	800884c <_malloc_r>
 8008b2a:	4606      	mov	r6, r0
 8008b2c:	b360      	cbz	r0, 8008b88 <__ssputs_r+0xa0>
 8008b2e:	6921      	ldr	r1, [r4, #16]
 8008b30:	464a      	mov	r2, r9
 8008b32:	f000 fb0a 	bl	800914a <memcpy>
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	6126      	str	r6, [r4, #16]
 8008b44:	6165      	str	r5, [r4, #20]
 8008b46:	444e      	add	r6, r9
 8008b48:	eba5 0509 	sub.w	r5, r5, r9
 8008b4c:	6026      	str	r6, [r4, #0]
 8008b4e:	60a5      	str	r5, [r4, #8]
 8008b50:	463e      	mov	r6, r7
 8008b52:	42be      	cmp	r6, r7
 8008b54:	d900      	bls.n	8008b58 <__ssputs_r+0x70>
 8008b56:	463e      	mov	r6, r7
 8008b58:	6820      	ldr	r0, [r4, #0]
 8008b5a:	4632      	mov	r2, r6
 8008b5c:	4641      	mov	r1, r8
 8008b5e:	f000 fada 	bl	8009116 <memmove>
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	1b9b      	subs	r3, r3, r6
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	6823      	ldr	r3, [r4, #0]
 8008b6a:	4433      	add	r3, r6
 8008b6c:	6023      	str	r3, [r4, #0]
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	462a      	mov	r2, r5
 8008b76:	f000 fa9f 	bl	80090b8 <_realloc_r>
 8008b7a:	4606      	mov	r6, r0
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d1e0      	bne.n	8008b42 <__ssputs_r+0x5a>
 8008b80:	6921      	ldr	r1, [r4, #16]
 8008b82:	4650      	mov	r0, sl
 8008b84:	f7ff ff64 	bl	8008a50 <_free_r>
 8008b88:	230c      	movs	r3, #12
 8008b8a:	f8ca 3000 	str.w	r3, [sl]
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b9a:	e7e9      	b.n	8008b70 <__ssputs_r+0x88>

>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
08008b9c <_svfiprintf_r>:
 8008b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba0:	4698      	mov	r8, r3
 8008ba2:	898b      	ldrh	r3, [r1, #12]
 8008ba4:	061b      	lsls	r3, r3, #24
 8008ba6:	b09d      	sub	sp, #116	; 0x74
 8008ba8:	4607      	mov	r7, r0
 8008baa:	460d      	mov	r5, r1
 8008bac:	4614      	mov	r4, r2
 8008bae:	d50e      	bpl.n	8008bce <_svfiprintf_r+0x32>
 8008bb0:	690b      	ldr	r3, [r1, #16]
 8008bb2:	b963      	cbnz	r3, 8008bce <_svfiprintf_r+0x32>
 8008bb4:	2140      	movs	r1, #64	; 0x40
 8008bb6:	f7ff fe49 	bl	800884c <_malloc_r>
 8008bba:	6028      	str	r0, [r5, #0]
 8008bbc:	6128      	str	r0, [r5, #16]
 8008bbe:	b920      	cbnz	r0, 8008bca <_svfiprintf_r+0x2e>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	603b      	str	r3, [r7, #0]
<<<<<<< HEAD
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295
=======
 8008bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8008bc8:	e0d0      	b.n	8008d6c <_svfiprintf_r+0x1d0>
 8008bca:	2340      	movs	r3, #64	; 0x40
 8008bcc:	616b      	str	r3, [r5, #20]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd2:	2320      	movs	r3, #32
 8008bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bdc:	2330      	movs	r3, #48	; 0x30
 8008bde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d84 <_svfiprintf_r+0x1e8>
 8008be2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008be6:	f04f 0901 	mov.w	r9, #1
 8008bea:	4623      	mov	r3, r4
 8008bec:	469a      	mov	sl, r3
 8008bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bf2:	b10a      	cbz	r2, 8008bf8 <_svfiprintf_r+0x5c>
 8008bf4:	2a25      	cmp	r2, #37	; 0x25
 8008bf6:	d1f9      	bne.n	8008bec <_svfiprintf_r+0x50>
 8008bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8008bfc:	d00b      	beq.n	8008c16 <_svfiprintf_r+0x7a>
 8008bfe:	465b      	mov	r3, fp
 8008c00:	4622      	mov	r2, r4
 8008c02:	4629      	mov	r1, r5
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff ff6f 	bl	8008ae8 <__ssputs_r>
 8008c0a:	3001      	adds	r0, #1
 8008c0c:	f000 80a9 	beq.w	8008d62 <_svfiprintf_r+0x1c6>
 8008c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c12:	445a      	add	r2, fp
 8008c14:	9209      	str	r2, [sp, #36]	; 0x24
 8008c16:	f89a 3000 	ldrb.w	r3, [sl]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 80a1 	beq.w	8008d62 <_svfiprintf_r+0x1c6>
 8008c20:	2300      	movs	r3, #0
<<<<<<< HEAD
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295
=======
 8008c22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8008c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c2a:	f10a 0a01 	add.w	sl, sl, #1
 8008c2e:	9304      	str	r3, [sp, #16]
 8008c30:	9307      	str	r3, [sp, #28]
 8008c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c36:	931a      	str	r3, [sp, #104]	; 0x68
 8008c38:	4654      	mov	r4, sl
 8008c3a:	2205      	movs	r2, #5
 8008c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c40:	4850      	ldr	r0, [pc, #320]	; (8008d84 <_svfiprintf_r+0x1e8>)
 8008c42:	f7f7 fac5 	bl	80001d0 <memchr>
 8008c46:	9a04      	ldr	r2, [sp, #16]
 8008c48:	b9d8      	cbnz	r0, 8008c82 <_svfiprintf_r+0xe6>
 8008c4a:	06d0      	lsls	r0, r2, #27
 8008c4c:	bf44      	itt	mi
 8008c4e:	2320      	movmi	r3, #32
 8008c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c54:	0711      	lsls	r1, r2, #28
 8008c56:	bf44      	itt	mi
 8008c58:	232b      	movmi	r3, #43	; 0x2b
 8008c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008c62:	2b2a      	cmp	r3, #42	; 0x2a
 8008c64:	d015      	beq.n	8008c92 <_svfiprintf_r+0xf6>
 8008c66:	9a07      	ldr	r2, [sp, #28]
 8008c68:	4654      	mov	r4, sl
 8008c6a:	2000      	movs	r0, #0
 8008c6c:	f04f 0c0a 	mov.w	ip, #10
 8008c70:	4621      	mov	r1, r4
 8008c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c76:	3b30      	subs	r3, #48	; 0x30
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d94d      	bls.n	8008d18 <_svfiprintf_r+0x17c>
 8008c7c:	b1b0      	cbz	r0, 8008cac <_svfiprintf_r+0x110>
 8008c7e:	9207      	str	r2, [sp, #28]
 8008c80:	e014      	b.n	8008cac <_svfiprintf_r+0x110>
 8008c82:	eba0 0308 	sub.w	r3, r0, r8
 8008c86:	fa09 f303 	lsl.w	r3, r9, r3
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	9304      	str	r3, [sp, #16]
 8008c8e:	46a2      	mov	sl, r4
 8008c90:	e7d2      	b.n	8008c38 <_svfiprintf_r+0x9c>
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	1d19      	adds	r1, r3, #4
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	9103      	str	r1, [sp, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	bfbb      	ittet	lt
 8008c9e:	425b      	neglt	r3, r3
 8008ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ca4:	9307      	strge	r3, [sp, #28]
 8008ca6:	9307      	strlt	r3, [sp, #28]
 8008ca8:	bfb8      	it	lt
 8008caa:	9204      	strlt	r2, [sp, #16]
 8008cac:	7823      	ldrb	r3, [r4, #0]
 8008cae:	2b2e      	cmp	r3, #46	; 0x2e
 8008cb0:	d10c      	bne.n	8008ccc <_svfiprintf_r+0x130>
 8008cb2:	7863      	ldrb	r3, [r4, #1]
 8008cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cb6:	d134      	bne.n	8008d22 <_svfiprintf_r+0x186>
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	1d1a      	adds	r2, r3, #4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	9203      	str	r2, [sp, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	bfb8      	it	lt
<<<<<<< HEAD
 8008cc4:	f04f 33ff 	movlt.w	r3, #4294967295
=======
 8008cc4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8008cc8:	3402      	adds	r4, #2
 8008cca:	9305      	str	r3, [sp, #20]
 8008ccc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d94 <_svfiprintf_r+0x1f8>
 8008cd0:	7821      	ldrb	r1, [r4, #0]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	4650      	mov	r0, sl
 8008cd6:	f7f7 fa7b 	bl	80001d0 <memchr>
 8008cda:	b138      	cbz	r0, 8008cec <_svfiprintf_r+0x150>
 8008cdc:	9b04      	ldr	r3, [sp, #16]
 8008cde:	eba0 000a 	sub.w	r0, r0, sl
 8008ce2:	2240      	movs	r2, #64	; 0x40
 8008ce4:	4082      	lsls	r2, r0
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	3401      	adds	r4, #1
 8008cea:	9304      	str	r3, [sp, #16]
 8008cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf0:	4825      	ldr	r0, [pc, #148]	; (8008d88 <_svfiprintf_r+0x1ec>)
 8008cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cf6:	2206      	movs	r2, #6
 8008cf8:	f7f7 fa6a 	bl	80001d0 <memchr>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d038      	beq.n	8008d72 <_svfiprintf_r+0x1d6>
 8008d00:	4b22      	ldr	r3, [pc, #136]	; (8008d8c <_svfiprintf_r+0x1f0>)
 8008d02:	bb1b      	cbnz	r3, 8008d4c <_svfiprintf_r+0x1b0>
 8008d04:	9b03      	ldr	r3, [sp, #12]
 8008d06:	3307      	adds	r3, #7
 8008d08:	f023 0307 	bic.w	r3, r3, #7
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	9303      	str	r3, [sp, #12]
 8008d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d12:	4433      	add	r3, r6
 8008d14:	9309      	str	r3, [sp, #36]	; 0x24
 8008d16:	e768      	b.n	8008bea <_svfiprintf_r+0x4e>
 8008d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d1c:	460c      	mov	r4, r1
 8008d1e:	2001      	movs	r0, #1
 8008d20:	e7a6      	b.n	8008c70 <_svfiprintf_r+0xd4>
 8008d22:	2300      	movs	r3, #0
 8008d24:	3401      	adds	r4, #1
 8008d26:	9305      	str	r3, [sp, #20]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f04f 0c0a 	mov.w	ip, #10
 8008d2e:	4620      	mov	r0, r4
 8008d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d34:	3a30      	subs	r2, #48	; 0x30
 8008d36:	2a09      	cmp	r2, #9
 8008d38:	d903      	bls.n	8008d42 <_svfiprintf_r+0x1a6>
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0c6      	beq.n	8008ccc <_svfiprintf_r+0x130>
 8008d3e:	9105      	str	r1, [sp, #20]
 8008d40:	e7c4      	b.n	8008ccc <_svfiprintf_r+0x130>
 8008d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d46:	4604      	mov	r4, r0
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7f0      	b.n	8008d2e <_svfiprintf_r+0x192>
 8008d4c:	ab03      	add	r3, sp, #12
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	462a      	mov	r2, r5
 8008d52:	4b0f      	ldr	r3, [pc, #60]	; (8008d90 <_svfiprintf_r+0x1f4>)
 8008d54:	a904      	add	r1, sp, #16
 8008d56:	4638      	mov	r0, r7
 8008d58:	f3af 8000 	nop.w
 8008d5c:	1c42      	adds	r2, r0, #1
 8008d5e:	4606      	mov	r6, r0
 8008d60:	d1d6      	bne.n	8008d10 <_svfiprintf_r+0x174>
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	065b      	lsls	r3, r3, #25
 8008d66:	f53f af2d 	bmi.w	8008bc4 <_svfiprintf_r+0x28>
 8008d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d6c:	b01d      	add	sp, #116	; 0x74
 8008d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d72:	ab03      	add	r3, sp, #12
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	462a      	mov	r2, r5
 8008d78:	4b05      	ldr	r3, [pc, #20]	; (8008d90 <_svfiprintf_r+0x1f4>)
 8008d7a:	a904      	add	r1, sp, #16
 8008d7c:	4638      	mov	r0, r7
 8008d7e:	f000 f879 	bl	8008e74 <_printf_i>
 8008d82:	e7eb      	b.n	8008d5c <_svfiprintf_r+0x1c0>
 8008d84:	0800a2b0 	.word	0x0800a2b0
 8008d88:	0800a2ba 	.word	0x0800a2ba
 8008d8c:	00000000 	.word	0x00000000
 8008d90:	08008ae9 	.word	0x08008ae9
 8008d94:	0800a2b6 	.word	0x0800a2b6

08008d98 <_printf_common>:
 8008d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d9c:	4616      	mov	r6, r2
 8008d9e:	4699      	mov	r9, r3
 8008da0:	688a      	ldr	r2, [r1, #8]
 8008da2:	690b      	ldr	r3, [r1, #16]
 8008da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008da8:	4293      	cmp	r3, r2
 8008daa:	bfb8      	it	lt
 8008dac:	4613      	movlt	r3, r2
 8008dae:	6033      	str	r3, [r6, #0]
 8008db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008db4:	4607      	mov	r7, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	b10a      	cbz	r2, 8008dbe <_printf_common+0x26>
 8008dba:	3301      	adds	r3, #1
 8008dbc:	6033      	str	r3, [r6, #0]
 8008dbe:	6823      	ldr	r3, [r4, #0]
 8008dc0:	0699      	lsls	r1, r3, #26
 8008dc2:	bf42      	ittt	mi
 8008dc4:	6833      	ldrmi	r3, [r6, #0]
 8008dc6:	3302      	addmi	r3, #2
 8008dc8:	6033      	strmi	r3, [r6, #0]
 8008dca:	6825      	ldr	r5, [r4, #0]
 8008dcc:	f015 0506 	ands.w	r5, r5, #6
 8008dd0:	d106      	bne.n	8008de0 <_printf_common+0x48>
 8008dd2:	f104 0a19 	add.w	sl, r4, #25
 8008dd6:	68e3      	ldr	r3, [r4, #12]
 8008dd8:	6832      	ldr	r2, [r6, #0]
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dc26      	bgt.n	8008e2e <_printf_common+0x96>
 8008de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008de4:	1e13      	subs	r3, r2, #0
 8008de6:	6822      	ldr	r2, [r4, #0]
 8008de8:	bf18      	it	ne
 8008dea:	2301      	movne	r3, #1
 8008dec:	0692      	lsls	r2, r2, #26
 8008dee:	d42b      	bmi.n	8008e48 <_printf_common+0xb0>
 8008df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008df4:	4649      	mov	r1, r9
 8008df6:	4638      	mov	r0, r7
 8008df8:	47c0      	blx	r8
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	d01e      	beq.n	8008e3c <_printf_common+0xa4>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	6922      	ldr	r2, [r4, #16]
 8008e02:	f003 0306 	and.w	r3, r3, #6
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	bf02      	ittt	eq
 8008e0a:	68e5      	ldreq	r5, [r4, #12]
 8008e0c:	6833      	ldreq	r3, [r6, #0]
 8008e0e:	1aed      	subeq	r5, r5, r3
 8008e10:	68a3      	ldr	r3, [r4, #8]
 8008e12:	bf0c      	ite	eq
 8008e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e18:	2500      	movne	r5, #0
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bfc4      	itt	gt
 8008e1e:	1a9b      	subgt	r3, r3, r2
 8008e20:	18ed      	addgt	r5, r5, r3
 8008e22:	2600      	movs	r6, #0
 8008e24:	341a      	adds	r4, #26
 8008e26:	42b5      	cmp	r5, r6
 8008e28:	d11a      	bne.n	8008e60 <_printf_common+0xc8>
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	e008      	b.n	8008e40 <_printf_common+0xa8>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4652      	mov	r2, sl
 8008e32:	4649      	mov	r1, r9
 8008e34:	4638      	mov	r0, r7
 8008e36:	47c0      	blx	r8
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d103      	bne.n	8008e44 <_printf_common+0xac>
<<<<<<< HEAD
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295
=======
 8008e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	3501      	adds	r5, #1
 8008e46:	e7c6      	b.n	8008dd6 <_printf_common+0x3e>
 8008e48:	18e1      	adds	r1, r4, r3
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	2030      	movs	r0, #48	; 0x30
 8008e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e52:	4422      	add	r2, r4
 8008e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	e7c7      	b.n	8008df0 <_printf_common+0x58>
 8008e60:	2301      	movs	r3, #1
 8008e62:	4622      	mov	r2, r4
 8008e64:	4649      	mov	r1, r9
 8008e66:	4638      	mov	r0, r7
 8008e68:	47c0      	blx	r8
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d0e6      	beq.n	8008e3c <_printf_common+0xa4>
 8008e6e:	3601      	adds	r6, #1
 8008e70:	e7d9      	b.n	8008e26 <_printf_common+0x8e>
	...

08008e74 <_printf_i>:
 8008e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	7e0f      	ldrb	r7, [r1, #24]
 8008e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008e7c:	2f78      	cmp	r7, #120	; 0x78
 8008e7e:	4691      	mov	r9, r2
 8008e80:	4680      	mov	r8, r0
 8008e82:	460c      	mov	r4, r1
 8008e84:	469a      	mov	sl, r3
 8008e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008e8a:	d807      	bhi.n	8008e9c <_printf_i+0x28>
 8008e8c:	2f62      	cmp	r7, #98	; 0x62
 8008e8e:	d80a      	bhi.n	8008ea6 <_printf_i+0x32>
 8008e90:	2f00      	cmp	r7, #0
 8008e92:	f000 80d4 	beq.w	800903e <_printf_i+0x1ca>
 8008e96:	2f58      	cmp	r7, #88	; 0x58
 8008e98:	f000 80c0 	beq.w	800901c <_printf_i+0x1a8>
 8008e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ea4:	e03a      	b.n	8008f1c <_printf_i+0xa8>
 8008ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eaa:	2b15      	cmp	r3, #21
 8008eac:	d8f6      	bhi.n	8008e9c <_printf_i+0x28>
 8008eae:	a101      	add	r1, pc, #4	; (adr r1, 8008eb4 <_printf_i+0x40>)
 8008eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eb4:	08008f0d 	.word	0x08008f0d
 8008eb8:	08008f21 	.word	0x08008f21
 8008ebc:	08008e9d 	.word	0x08008e9d
 8008ec0:	08008e9d 	.word	0x08008e9d
 8008ec4:	08008e9d 	.word	0x08008e9d
 8008ec8:	08008e9d 	.word	0x08008e9d
 8008ecc:	08008f21 	.word	0x08008f21
 8008ed0:	08008e9d 	.word	0x08008e9d
 8008ed4:	08008e9d 	.word	0x08008e9d
 8008ed8:	08008e9d 	.word	0x08008e9d
 8008edc:	08008e9d 	.word	0x08008e9d
 8008ee0:	08009025 	.word	0x08009025
 8008ee4:	08008f4d 	.word	0x08008f4d
 8008ee8:	08008fdf 	.word	0x08008fdf
 8008eec:	08008e9d 	.word	0x08008e9d
 8008ef0:	08008e9d 	.word	0x08008e9d
 8008ef4:	08009047 	.word	0x08009047
 8008ef8:	08008e9d 	.word	0x08008e9d
 8008efc:	08008f4d 	.word	0x08008f4d
 8008f00:	08008e9d 	.word	0x08008e9d
 8008f04:	08008e9d 	.word	0x08008e9d
 8008f08:	08008fe7 	.word	0x08008fe7
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	1d1a      	adds	r2, r3, #4
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	602a      	str	r2, [r5, #0]
 8008f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e09f      	b.n	8009060 <_printf_i+0x1ec>
 8008f20:	6820      	ldr	r0, [r4, #0]
 8008f22:	682b      	ldr	r3, [r5, #0]
 8008f24:	0607      	lsls	r7, r0, #24
 8008f26:	f103 0104 	add.w	r1, r3, #4
 8008f2a:	6029      	str	r1, [r5, #0]
 8008f2c:	d501      	bpl.n	8008f32 <_printf_i+0xbe>
 8008f2e:	681e      	ldr	r6, [r3, #0]
 8008f30:	e003      	b.n	8008f3a <_printf_i+0xc6>
 8008f32:	0646      	lsls	r6, r0, #25
 8008f34:	d5fb      	bpl.n	8008f2e <_printf_i+0xba>
 8008f36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f3a:	2e00      	cmp	r6, #0
 8008f3c:	da03      	bge.n	8008f46 <_printf_i+0xd2>
 8008f3e:	232d      	movs	r3, #45	; 0x2d
 8008f40:	4276      	negs	r6, r6
 8008f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f46:	485a      	ldr	r0, [pc, #360]	; (80090b0 <_printf_i+0x23c>)
 8008f48:	230a      	movs	r3, #10
 8008f4a:	e012      	b.n	8008f72 <_printf_i+0xfe>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	1d19      	adds	r1, r3, #4
 8008f52:	6029      	str	r1, [r5, #0]
 8008f54:	0605      	lsls	r5, r0, #24
 8008f56:	d501      	bpl.n	8008f5c <_printf_i+0xe8>
 8008f58:	681e      	ldr	r6, [r3, #0]
 8008f5a:	e002      	b.n	8008f62 <_printf_i+0xee>
 8008f5c:	0641      	lsls	r1, r0, #25
 8008f5e:	d5fb      	bpl.n	8008f58 <_printf_i+0xe4>
 8008f60:	881e      	ldrh	r6, [r3, #0]
 8008f62:	4853      	ldr	r0, [pc, #332]	; (80090b0 <_printf_i+0x23c>)
 8008f64:	2f6f      	cmp	r7, #111	; 0x6f
 8008f66:	bf0c      	ite	eq
 8008f68:	2308      	moveq	r3, #8
 8008f6a:	230a      	movne	r3, #10
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f72:	6865      	ldr	r5, [r4, #4]
 8008f74:	60a5      	str	r5, [r4, #8]
 8008f76:	2d00      	cmp	r5, #0
 8008f78:	bfa2      	ittt	ge
 8008f7a:	6821      	ldrge	r1, [r4, #0]
 8008f7c:	f021 0104 	bicge.w	r1, r1, #4
 8008f80:	6021      	strge	r1, [r4, #0]
 8008f82:	b90e      	cbnz	r6, 8008f88 <_printf_i+0x114>
 8008f84:	2d00      	cmp	r5, #0
 8008f86:	d04b      	beq.n	8009020 <_printf_i+0x1ac>
 8008f88:	4615      	mov	r5, r2
 8008f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8008f92:	5dc7      	ldrb	r7, [r0, r7]
 8008f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008f98:	4637      	mov	r7, r6
 8008f9a:	42bb      	cmp	r3, r7
 8008f9c:	460e      	mov	r6, r1
 8008f9e:	d9f4      	bls.n	8008f8a <_printf_i+0x116>
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d10b      	bne.n	8008fbc <_printf_i+0x148>
 8008fa4:	6823      	ldr	r3, [r4, #0]
 8008fa6:	07de      	lsls	r6, r3, #31
 8008fa8:	d508      	bpl.n	8008fbc <_printf_i+0x148>
 8008faa:	6923      	ldr	r3, [r4, #16]
 8008fac:	6861      	ldr	r1, [r4, #4]
 8008fae:	4299      	cmp	r1, r3
 8008fb0:	bfde      	ittt	le
 8008fb2:	2330      	movle	r3, #48	; 0x30
 8008fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
<<<<<<< HEAD
 8008fb8:	f105 35ff 	addle.w	r5, r5, #4294967295
=======
 8008fb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8008fbc:	1b52      	subs	r2, r2, r5
 8008fbe:	6122      	str	r2, [r4, #16]
 8008fc0:	f8cd a000 	str.w	sl, [sp]
 8008fc4:	464b      	mov	r3, r9
 8008fc6:	aa03      	add	r2, sp, #12
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4640      	mov	r0, r8
 8008fcc:	f7ff fee4 	bl	8008d98 <_printf_common>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d14a      	bne.n	800906a <_printf_i+0x1f6>
<<<<<<< HEAD
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
=======
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8008fd8:	b004      	add	sp, #16
 8008fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	f043 0320 	orr.w	r3, r3, #32
 8008fe4:	6023      	str	r3, [r4, #0]
 8008fe6:	4833      	ldr	r0, [pc, #204]	; (80090b4 <_printf_i+0x240>)
 8008fe8:	2778      	movs	r7, #120	; 0x78
 8008fea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008fee:	6823      	ldr	r3, [r4, #0]
 8008ff0:	6829      	ldr	r1, [r5, #0]
 8008ff2:	061f      	lsls	r7, r3, #24
 8008ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ff8:	d402      	bmi.n	8009000 <_printf_i+0x18c>
 8008ffa:	065f      	lsls	r7, r3, #25
 8008ffc:	bf48      	it	mi
 8008ffe:	b2b6      	uxthmi	r6, r6
 8009000:	07df      	lsls	r7, r3, #31
 8009002:	bf48      	it	mi
 8009004:	f043 0320 	orrmi.w	r3, r3, #32
 8009008:	6029      	str	r1, [r5, #0]
 800900a:	bf48      	it	mi
 800900c:	6023      	strmi	r3, [r4, #0]
 800900e:	b91e      	cbnz	r6, 8009018 <_printf_i+0x1a4>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	f023 0320 	bic.w	r3, r3, #32
 8009016:	6023      	str	r3, [r4, #0]
 8009018:	2310      	movs	r3, #16
 800901a:	e7a7      	b.n	8008f6c <_printf_i+0xf8>
 800901c:	4824      	ldr	r0, [pc, #144]	; (80090b0 <_printf_i+0x23c>)
 800901e:	e7e4      	b.n	8008fea <_printf_i+0x176>
 8009020:	4615      	mov	r5, r2
 8009022:	e7bd      	b.n	8008fa0 <_printf_i+0x12c>
 8009024:	682b      	ldr	r3, [r5, #0]
 8009026:	6826      	ldr	r6, [r4, #0]
 8009028:	6961      	ldr	r1, [r4, #20]
 800902a:	1d18      	adds	r0, r3, #4
 800902c:	6028      	str	r0, [r5, #0]
 800902e:	0635      	lsls	r5, r6, #24
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	d501      	bpl.n	8009038 <_printf_i+0x1c4>
 8009034:	6019      	str	r1, [r3, #0]
 8009036:	e002      	b.n	800903e <_printf_i+0x1ca>
 8009038:	0670      	lsls	r0, r6, #25
 800903a:	d5fb      	bpl.n	8009034 <_printf_i+0x1c0>
 800903c:	8019      	strh	r1, [r3, #0]
 800903e:	2300      	movs	r3, #0
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	4615      	mov	r5, r2
 8009044:	e7bc      	b.n	8008fc0 <_printf_i+0x14c>
 8009046:	682b      	ldr	r3, [r5, #0]
 8009048:	1d1a      	adds	r2, r3, #4
 800904a:	602a      	str	r2, [r5, #0]
 800904c:	681d      	ldr	r5, [r3, #0]
 800904e:	6862      	ldr	r2, [r4, #4]
 8009050:	2100      	movs	r1, #0
 8009052:	4628      	mov	r0, r5
 8009054:	f7f7 f8bc 	bl	80001d0 <memchr>
 8009058:	b108      	cbz	r0, 800905e <_printf_i+0x1ea>
 800905a:	1b40      	subs	r0, r0, r5
 800905c:	6060      	str	r0, [r4, #4]
 800905e:	6863      	ldr	r3, [r4, #4]
 8009060:	6123      	str	r3, [r4, #16]
 8009062:	2300      	movs	r3, #0
 8009064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009068:	e7aa      	b.n	8008fc0 <_printf_i+0x14c>
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	462a      	mov	r2, r5
 800906e:	4649      	mov	r1, r9
 8009070:	4640      	mov	r0, r8
 8009072:	47d0      	blx	sl
 8009074:	3001      	adds	r0, #1
 8009076:	d0ad      	beq.n	8008fd4 <_printf_i+0x160>
 8009078:	6823      	ldr	r3, [r4, #0]
 800907a:	079b      	lsls	r3, r3, #30
 800907c:	d413      	bmi.n	80090a6 <_printf_i+0x232>
 800907e:	68e0      	ldr	r0, [r4, #12]
 8009080:	9b03      	ldr	r3, [sp, #12]
 8009082:	4298      	cmp	r0, r3
 8009084:	bfb8      	it	lt
 8009086:	4618      	movlt	r0, r3
 8009088:	e7a6      	b.n	8008fd8 <_printf_i+0x164>
 800908a:	2301      	movs	r3, #1
 800908c:	4632      	mov	r2, r6
 800908e:	4649      	mov	r1, r9
 8009090:	4640      	mov	r0, r8
 8009092:	47d0      	blx	sl
 8009094:	3001      	adds	r0, #1
 8009096:	d09d      	beq.n	8008fd4 <_printf_i+0x160>
 8009098:	3501      	adds	r5, #1
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	9903      	ldr	r1, [sp, #12]
 800909e:	1a5b      	subs	r3, r3, r1
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	dcf2      	bgt.n	800908a <_printf_i+0x216>
 80090a4:	e7eb      	b.n	800907e <_printf_i+0x20a>
 80090a6:	2500      	movs	r5, #0
 80090a8:	f104 0619 	add.w	r6, r4, #25
 80090ac:	e7f5      	b.n	800909a <_printf_i+0x226>
 80090ae:	bf00      	nop
 80090b0:	0800a2c1 	.word	0x0800a2c1
 80090b4:	0800a2d2 	.word	0x0800a2d2

<<<<<<< HEAD
080090b8 <memmove>:
 80090b8:	4288      	cmp	r0, r1
 80090ba:	b510      	push	{r4, lr}
 80090bc:	eb01 0402 	add.w	r4, r1, r2
 80090c0:	d902      	bls.n	80090c8 <memmove+0x10>
 80090c2:	4284      	cmp	r4, r0
 80090c4:	4623      	mov	r3, r4
 80090c6:	d807      	bhi.n	80090d8 <memmove+0x20>
 80090c8:	1e43      	subs	r3, r0, #1
 80090ca:	42a1      	cmp	r1, r4
 80090cc:	d008      	beq.n	80090e0 <memmove+0x28>
 80090ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090d6:	e7f8      	b.n	80090ca <memmove+0x12>
 80090d8:	4402      	add	r2, r0
 80090da:	4601      	mov	r1, r0
 80090dc:	428a      	cmp	r2, r1
 80090de:	d100      	bne.n	80090e2 <memmove+0x2a>
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090ea:	e7f7      	b.n	80090dc <memmove+0x24>

080090ec <memcpy>:
 80090ec:	440a      	add	r2, r1
 80090ee:	4291      	cmp	r1, r2
 80090f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090f4:	d100      	bne.n	80090f8 <memcpy+0xc>
 80090f6:	4770      	bx	lr
 80090f8:	b510      	push	{r4, lr}
 80090fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009102:	4291      	cmp	r1, r2
 8009104:	d1f9      	bne.n	80090fa <memcpy+0xe>
 8009106:	bd10      	pop	{r4, pc}

08009108 <_realloc_r>:
 8009108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800910c:	4680      	mov	r8, r0
 800910e:	4614      	mov	r4, r2
 8009110:	460e      	mov	r6, r1
 8009112:	b921      	cbnz	r1, 800911e <_realloc_r+0x16>
 8009114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009118:	4611      	mov	r1, r2
 800911a:	f7ff bb97 	b.w	800884c <_malloc_r>
 800911e:	b92a      	cbnz	r2, 800912c <_realloc_r+0x24>
 8009120:	f7ff fc96 	bl	8008a50 <_free_r>
 8009124:	4625      	mov	r5, r4
 8009126:	4628      	mov	r0, r5
 8009128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800912c:	f000 f81b 	bl	8009166 <_malloc_usable_size_r>
 8009130:	4284      	cmp	r4, r0
 8009132:	4607      	mov	r7, r0
 8009134:	d802      	bhi.n	800913c <_realloc_r+0x34>
 8009136:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800913a:	d812      	bhi.n	8009162 <_realloc_r+0x5a>
 800913c:	4621      	mov	r1, r4
 800913e:	4640      	mov	r0, r8
 8009140:	f7ff fb84 	bl	800884c <_malloc_r>
 8009144:	4605      	mov	r5, r0
 8009146:	2800      	cmp	r0, #0
 8009148:	d0ed      	beq.n	8009126 <_realloc_r+0x1e>
 800914a:	42bc      	cmp	r4, r7
 800914c:	4622      	mov	r2, r4
 800914e:	4631      	mov	r1, r6
 8009150:	bf28      	it	cs
 8009152:	463a      	movcs	r2, r7
 8009154:	f7ff ffca 	bl	80090ec <memcpy>
 8009158:	4631      	mov	r1, r6
 800915a:	4640      	mov	r0, r8
 800915c:	f7ff fc78 	bl	8008a50 <_free_r>
 8009160:	e7e1      	b.n	8009126 <_realloc_r+0x1e>
 8009162:	4635      	mov	r5, r6
 8009164:	e7df      	b.n	8009126 <_realloc_r+0x1e>
=======
080090b8 <_realloc_r>:
 80090b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090bc:	4680      	mov	r8, r0
 80090be:	4614      	mov	r4, r2
 80090c0:	460e      	mov	r6, r1
 80090c2:	b921      	cbnz	r1, 80090ce <_realloc_r+0x16>
 80090c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c8:	4611      	mov	r1, r2
 80090ca:	f7ff bbbf 	b.w	800884c <_malloc_r>
 80090ce:	b92a      	cbnz	r2, 80090dc <_realloc_r+0x24>
 80090d0:	f7ff fcbe 	bl	8008a50 <_free_r>
 80090d4:	4625      	mov	r5, r4
 80090d6:	4628      	mov	r0, r5
 80090d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090dc:	f000 f843 	bl	8009166 <_malloc_usable_size_r>
 80090e0:	4284      	cmp	r4, r0
 80090e2:	4607      	mov	r7, r0
 80090e4:	d802      	bhi.n	80090ec <_realloc_r+0x34>
 80090e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090ea:	d812      	bhi.n	8009112 <_realloc_r+0x5a>
 80090ec:	4621      	mov	r1, r4
 80090ee:	4640      	mov	r0, r8
 80090f0:	f7ff fbac 	bl	800884c <_malloc_r>
 80090f4:	4605      	mov	r5, r0
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d0ed      	beq.n	80090d6 <_realloc_r+0x1e>
 80090fa:	42bc      	cmp	r4, r7
 80090fc:	4622      	mov	r2, r4
 80090fe:	4631      	mov	r1, r6
 8009100:	bf28      	it	cs
 8009102:	463a      	movcs	r2, r7
 8009104:	f000 f821 	bl	800914a <memcpy>
 8009108:	4631      	mov	r1, r6
 800910a:	4640      	mov	r0, r8
 800910c:	f7ff fca0 	bl	8008a50 <_free_r>
 8009110:	e7e1      	b.n	80090d6 <_realloc_r+0x1e>
 8009112:	4635      	mov	r5, r6
 8009114:	e7df      	b.n	80090d6 <_realloc_r+0x1e>

08009116 <memmove>:
 8009116:	4288      	cmp	r0, r1
 8009118:	b510      	push	{r4, lr}
 800911a:	eb01 0402 	add.w	r4, r1, r2
 800911e:	d902      	bls.n	8009126 <memmove+0x10>
 8009120:	4284      	cmp	r4, r0
 8009122:	4623      	mov	r3, r4
 8009124:	d807      	bhi.n	8009136 <memmove+0x20>
 8009126:	1e43      	subs	r3, r0, #1
 8009128:	42a1      	cmp	r1, r4
 800912a:	d008      	beq.n	800913e <memmove+0x28>
 800912c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009130:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009134:	e7f8      	b.n	8009128 <memmove+0x12>
 8009136:	4402      	add	r2, r0
 8009138:	4601      	mov	r1, r0
 800913a:	428a      	cmp	r2, r1
 800913c:	d100      	bne.n	8009140 <memmove+0x2a>
 800913e:	bd10      	pop	{r4, pc}
 8009140:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009144:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009148:	e7f7      	b.n	800913a <memmove+0x24>

0800914a <memcpy>:
 800914a:	440a      	add	r2, r1
 800914c:	4291      	cmp	r1, r2
 800914e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009152:	d100      	bne.n	8009156 <memcpy+0xc>
 8009154:	4770      	bx	lr
 8009156:	b510      	push	{r4, lr}
 8009158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800915c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009160:	4291      	cmp	r1, r2
 8009162:	d1f9      	bne.n	8009158 <memcpy+0xe>
 8009164:	bd10      	pop	{r4, pc}
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305

08009166 <_malloc_usable_size_r>:
 8009166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800916a:	1f18      	subs	r0, r3, #4
 800916c:	2b00      	cmp	r3, #0
 800916e:	bfbc      	itt	lt
 8009170:	580b      	ldrlt	r3, [r1, r0]
 8009172:	18c0      	addlt	r0, r0, r3
 8009174:	4770      	bx	lr
	...

08009178 <sin>:
 8009178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800917a:	ec53 2b10 	vmov	r2, r3, d0
 800917e:	4828      	ldr	r0, [pc, #160]	; (8009220 <sin+0xa8>)
 8009180:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009184:	4281      	cmp	r1, r0
 8009186:	dc07      	bgt.n	8009198 <sin+0x20>
 8009188:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009218 <sin+0xa0>
 800918c:	2000      	movs	r0, #0
 800918e:	b005      	add	sp, #20
 8009190:	f85d eb04 	ldr.w	lr, [sp], #4
<<<<<<< HEAD
 8009194:	f000 b910 	b.w	80093b8 <__kernel_sin>
=======
 8009194:	f000 be68 	b.w	8009e68 <__kernel_sin>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8009198:	4822      	ldr	r0, [pc, #136]	; (8009224 <sin+0xac>)
 800919a:	4281      	cmp	r1, r0
 800919c:	dd09      	ble.n	80091b2 <sin+0x3a>
 800919e:	ee10 0a10 	vmov	r0, s0
 80091a2:	4619      	mov	r1, r3
 80091a4:	f7f7 f868 	bl	8000278 <__aeabi_dsub>
 80091a8:	ec41 0b10 	vmov	d0, r0, r1
 80091ac:	b005      	add	sp, #20
 80091ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80091b2:	4668      	mov	r0, sp
<<<<<<< HEAD
 80091b4:	f000 f9c0 	bl	8009538 <__ieee754_rem_pio2>
=======
 80091b4:	f000 f838 	bl	8009228 <__ieee754_rem_pio2>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 80091b8:	f000 0003 	and.w	r0, r0, #3
 80091bc:	2801      	cmp	r0, #1
 80091be:	d00c      	beq.n	80091da <sin+0x62>
 80091c0:	2802      	cmp	r0, #2
 80091c2:	d011      	beq.n	80091e8 <sin+0x70>
 80091c4:	b9f0      	cbnz	r0, 8009204 <sin+0x8c>
 80091c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091ca:	ed9d 0b00 	vldr	d0, [sp]
 80091ce:	2001      	movs	r0, #1
<<<<<<< HEAD
 80091d0:	f000 f8f2 	bl	80093b8 <__kernel_sin>
=======
 80091d0:	f000 fe4a 	bl	8009e68 <__kernel_sin>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 80091d4:	ec51 0b10 	vmov	r0, r1, d0
 80091d8:	e7e6      	b.n	80091a8 <sin+0x30>
 80091da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091de:	ed9d 0b00 	vldr	d0, [sp]
<<<<<<< HEAD
 80091e2:	f000 f821 	bl	8009228 <__kernel_cos>
=======
 80091e2:	f000 fd79 	bl	8009cd8 <__kernel_cos>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 80091e6:	e7f5      	b.n	80091d4 <sin+0x5c>
 80091e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80091ec:	ed9d 0b00 	vldr	d0, [sp]
 80091f0:	2001      	movs	r0, #1
<<<<<<< HEAD
 80091f2:	f000 f8e1 	bl	80093b8 <__kernel_sin>
=======
 80091f2:	f000 fe39 	bl	8009e68 <__kernel_sin>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 80091f6:	ec53 2b10 	vmov	r2, r3, d0
 80091fa:	ee10 0a10 	vmov	r0, s0
 80091fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009202:	e7d1      	b.n	80091a8 <sin+0x30>
 8009204:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009208:	ed9d 0b00 	vldr	d0, [sp]
<<<<<<< HEAD
 800920c:	f000 f80c 	bl	8009228 <__kernel_cos>
=======
 800920c:	f000 fd64 	bl	8009cd8 <__kernel_cos>
>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
 8009210:	e7f1      	b.n	80091f6 <sin+0x7e>
 8009212:	bf00      	nop
 8009214:	f3af 8000 	nop.w
	...
 8009220:	3fe921fb 	.word	0x3fe921fb
 8009224:	7fefffff 	.word	0x7fefffff

<<<<<<< HEAD
08009228 <__kernel_cos>:
 8009228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	ec57 6b10 	vmov	r6, r7, d0
 8009230:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009234:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009238:	ed8d 1b00 	vstr	d1, [sp]
 800923c:	da07      	bge.n	800924e <__kernel_cos+0x26>
 800923e:	ee10 0a10 	vmov	r0, s0
 8009242:	4639      	mov	r1, r7
 8009244:	f7f7 fc6a 	bl	8000b1c <__aeabi_d2iz>
 8009248:	2800      	cmp	r0, #0
 800924a:	f000 8088 	beq.w	800935e <__kernel_cos+0x136>
 800924e:	4632      	mov	r2, r6
 8009250:	463b      	mov	r3, r7
 8009252:	4630      	mov	r0, r6
 8009254:	4639      	mov	r1, r7
 8009256:	f7f7 f9c7 	bl	80005e8 <__aeabi_dmul>
 800925a:	4b51      	ldr	r3, [pc, #324]	; (80093a0 <__kernel_cos+0x178>)
 800925c:	2200      	movs	r2, #0
 800925e:	4604      	mov	r4, r0
 8009260:	460d      	mov	r5, r1
 8009262:	f7f7 f9c1 	bl	80005e8 <__aeabi_dmul>
 8009266:	a340      	add	r3, pc, #256	; (adr r3, 8009368 <__kernel_cos+0x140>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	4682      	mov	sl, r0
 800926e:	468b      	mov	fp, r1
 8009270:	4620      	mov	r0, r4
 8009272:	4629      	mov	r1, r5
 8009274:	f7f7 f9b8 	bl	80005e8 <__aeabi_dmul>
 8009278:	a33d      	add	r3, pc, #244	; (adr r3, 8009370 <__kernel_cos+0x148>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f6 fffd 	bl	800027c <__adddf3>
 8009282:	4622      	mov	r2, r4
 8009284:	462b      	mov	r3, r5
 8009286:	f7f7 f9af 	bl	80005e8 <__aeabi_dmul>
 800928a:	a33b      	add	r3, pc, #236	; (adr r3, 8009378 <__kernel_cos+0x150>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f6 fff2 	bl	8000278 <__aeabi_dsub>
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	f7f7 f9a6 	bl	80005e8 <__aeabi_dmul>
 800929c:	a338      	add	r3, pc, #224	; (adr r3, 8009380 <__kernel_cos+0x158>)
 800929e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a2:	f7f6 ffeb 	bl	800027c <__adddf3>
 80092a6:	4622      	mov	r2, r4
 80092a8:	462b      	mov	r3, r5
 80092aa:	f7f7 f99d 	bl	80005e8 <__aeabi_dmul>
 80092ae:	a336      	add	r3, pc, #216	; (adr r3, 8009388 <__kernel_cos+0x160>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f6 ffe0 	bl	8000278 <__aeabi_dsub>
 80092b8:	4622      	mov	r2, r4
 80092ba:	462b      	mov	r3, r5
 80092bc:	f7f7 f994 	bl	80005e8 <__aeabi_dmul>
 80092c0:	a333      	add	r3, pc, #204	; (adr r3, 8009390 <__kernel_cos+0x168>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	f7f6 ffd9 	bl	800027c <__adddf3>
 80092ca:	4622      	mov	r2, r4
 80092cc:	462b      	mov	r3, r5
 80092ce:	f7f7 f98b 	bl	80005e8 <__aeabi_dmul>
 80092d2:	4622      	mov	r2, r4
 80092d4:	462b      	mov	r3, r5
 80092d6:	f7f7 f987 	bl	80005e8 <__aeabi_dmul>
 80092da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092de:	4604      	mov	r4, r0
 80092e0:	460d      	mov	r5, r1
 80092e2:	4630      	mov	r0, r6
 80092e4:	4639      	mov	r1, r7
 80092e6:	f7f7 f97f 	bl	80005e8 <__aeabi_dmul>
 80092ea:	460b      	mov	r3, r1
 80092ec:	4602      	mov	r2, r0
 80092ee:	4629      	mov	r1, r5
 80092f0:	4620      	mov	r0, r4
 80092f2:	f7f6 ffc1 	bl	8000278 <__aeabi_dsub>
 80092f6:	4b2b      	ldr	r3, [pc, #172]	; (80093a4 <__kernel_cos+0x17c>)
 80092f8:	4598      	cmp	r8, r3
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	dc10      	bgt.n	8009322 <__kernel_cos+0xfa>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	4650      	mov	r0, sl
 8009306:	4659      	mov	r1, fp
 8009308:	f7f6 ffb6 	bl	8000278 <__aeabi_dsub>
 800930c:	460b      	mov	r3, r1
 800930e:	4926      	ldr	r1, [pc, #152]	; (80093a8 <__kernel_cos+0x180>)
 8009310:	4602      	mov	r2, r0
 8009312:	2000      	movs	r0, #0
 8009314:	f7f6 ffb0 	bl	8000278 <__aeabi_dsub>
 8009318:	ec41 0b10 	vmov	d0, r0, r1
 800931c:	b003      	add	sp, #12
 800931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009322:	4b22      	ldr	r3, [pc, #136]	; (80093ac <__kernel_cos+0x184>)
 8009324:	4920      	ldr	r1, [pc, #128]	; (80093a8 <__kernel_cos+0x180>)
 8009326:	4598      	cmp	r8, r3
 8009328:	bfcc      	ite	gt
 800932a:	4d21      	ldrgt	r5, [pc, #132]	; (80093b0 <__kernel_cos+0x188>)
 800932c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009330:	2400      	movs	r4, #0
 8009332:	4622      	mov	r2, r4
 8009334:	462b      	mov	r3, r5
 8009336:	2000      	movs	r0, #0
 8009338:	f7f6 ff9e 	bl	8000278 <__aeabi_dsub>
 800933c:	4622      	mov	r2, r4
 800933e:	4680      	mov	r8, r0
 8009340:	4689      	mov	r9, r1
 8009342:	462b      	mov	r3, r5
 8009344:	4650      	mov	r0, sl
 8009346:	4659      	mov	r1, fp
 8009348:	f7f6 ff96 	bl	8000278 <__aeabi_dsub>
 800934c:	4632      	mov	r2, r6
 800934e:	463b      	mov	r3, r7
 8009350:	f7f6 ff92 	bl	8000278 <__aeabi_dsub>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4640      	mov	r0, r8
 800935a:	4649      	mov	r1, r9
 800935c:	e7da      	b.n	8009314 <__kernel_cos+0xec>
 800935e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009398 <__kernel_cos+0x170>
 8009362:	e7db      	b.n	800931c <__kernel_cos+0xf4>
 8009364:	f3af 8000 	nop.w
 8009368:	be8838d4 	.word	0xbe8838d4
 800936c:	bda8fae9 	.word	0xbda8fae9
 8009370:	bdb4b1c4 	.word	0xbdb4b1c4
 8009374:	3e21ee9e 	.word	0x3e21ee9e
 8009378:	809c52ad 	.word	0x809c52ad
 800937c:	3e927e4f 	.word	0x3e927e4f
 8009380:	19cb1590 	.word	0x19cb1590
 8009384:	3efa01a0 	.word	0x3efa01a0
 8009388:	16c15177 	.word	0x16c15177
 800938c:	3f56c16c 	.word	0x3f56c16c
 8009390:	5555554c 	.word	0x5555554c
 8009394:	3fa55555 	.word	0x3fa55555
 8009398:	00000000 	.word	0x00000000
 800939c:	3ff00000 	.word	0x3ff00000
 80093a0:	3fe00000 	.word	0x3fe00000
 80093a4:	3fd33332 	.word	0x3fd33332
 80093a8:	3ff00000 	.word	0x3ff00000
 80093ac:	3fe90000 	.word	0x3fe90000
 80093b0:	3fd20000 	.word	0x3fd20000
 80093b4:	00000000 	.word	0x00000000

080093b8 <__kernel_sin>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	ed2d 8b04 	vpush	{d8-d9}
 80093c0:	eeb0 8a41 	vmov.f32	s16, s2
 80093c4:	eef0 8a61 	vmov.f32	s17, s3
 80093c8:	ec55 4b10 	vmov	r4, r5, d0
 80093cc:	b083      	sub	sp, #12
 80093ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80093d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80093d6:	9001      	str	r0, [sp, #4]
 80093d8:	da06      	bge.n	80093e8 <__kernel_sin+0x30>
 80093da:	ee10 0a10 	vmov	r0, s0
 80093de:	4629      	mov	r1, r5
 80093e0:	f7f7 fb9c 	bl	8000b1c <__aeabi_d2iz>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d051      	beq.n	800948c <__kernel_sin+0xd4>
 80093e8:	4622      	mov	r2, r4
 80093ea:	462b      	mov	r3, r5
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f7f7 f8fa 	bl	80005e8 <__aeabi_dmul>
 80093f4:	4682      	mov	sl, r0
 80093f6:	468b      	mov	fp, r1
 80093f8:	4602      	mov	r2, r0
 80093fa:	460b      	mov	r3, r1
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f7 f8f2 	bl	80005e8 <__aeabi_dmul>
 8009404:	a341      	add	r3, pc, #260	; (adr r3, 800950c <__kernel_sin+0x154>)
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	4680      	mov	r8, r0
 800940c:	4689      	mov	r9, r1
 800940e:	4650      	mov	r0, sl
 8009410:	4659      	mov	r1, fp
 8009412:	f7f7 f8e9 	bl	80005e8 <__aeabi_dmul>
 8009416:	a33f      	add	r3, pc, #252	; (adr r3, 8009514 <__kernel_sin+0x15c>)
 8009418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941c:	f7f6 ff2c 	bl	8000278 <__aeabi_dsub>
 8009420:	4652      	mov	r2, sl
 8009422:	465b      	mov	r3, fp
 8009424:	f7f7 f8e0 	bl	80005e8 <__aeabi_dmul>
 8009428:	a33c      	add	r3, pc, #240	; (adr r3, 800951c <__kernel_sin+0x164>)
 800942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942e:	f7f6 ff25 	bl	800027c <__adddf3>
 8009432:	4652      	mov	r2, sl
 8009434:	465b      	mov	r3, fp
 8009436:	f7f7 f8d7 	bl	80005e8 <__aeabi_dmul>
 800943a:	a33a      	add	r3, pc, #232	; (adr r3, 8009524 <__kernel_sin+0x16c>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f6 ff1a 	bl	8000278 <__aeabi_dsub>
 8009444:	4652      	mov	r2, sl
 8009446:	465b      	mov	r3, fp
 8009448:	f7f7 f8ce 	bl	80005e8 <__aeabi_dmul>
 800944c:	a337      	add	r3, pc, #220	; (adr r3, 800952c <__kernel_sin+0x174>)
 800944e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009452:	f7f6 ff13 	bl	800027c <__adddf3>
 8009456:	9b01      	ldr	r3, [sp, #4]
 8009458:	4606      	mov	r6, r0
 800945a:	460f      	mov	r7, r1
 800945c:	b9eb      	cbnz	r3, 800949a <__kernel_sin+0xe2>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4650      	mov	r0, sl
 8009464:	4659      	mov	r1, fp
 8009466:	f7f7 f8bf 	bl	80005e8 <__aeabi_dmul>
 800946a:	a325      	add	r3, pc, #148	; (adr r3, 8009500 <__kernel_sin+0x148>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f6 ff02 	bl	8000278 <__aeabi_dsub>
 8009474:	4642      	mov	r2, r8
 8009476:	464b      	mov	r3, r9
 8009478:	f7f7 f8b6 	bl	80005e8 <__aeabi_dmul>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f6 fefa 	bl	800027c <__adddf3>
 8009488:	4604      	mov	r4, r0
 800948a:	460d      	mov	r5, r1
 800948c:	ec45 4b10 	vmov	d0, r4, r5
 8009490:	b003      	add	sp, #12
 8009492:	ecbd 8b04 	vpop	{d8-d9}
 8009496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949a:	4b1b      	ldr	r3, [pc, #108]	; (8009508 <__kernel_sin+0x150>)
 800949c:	ec51 0b18 	vmov	r0, r1, d8
 80094a0:	2200      	movs	r2, #0
 80094a2:	f7f7 f8a1 	bl	80005e8 <__aeabi_dmul>
 80094a6:	4632      	mov	r2, r6
 80094a8:	ec41 0b19 	vmov	d9, r0, r1
 80094ac:	463b      	mov	r3, r7
 80094ae:	4640      	mov	r0, r8
 80094b0:	4649      	mov	r1, r9
 80094b2:	f7f7 f899 	bl	80005e8 <__aeabi_dmul>
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	ec51 0b19 	vmov	r0, r1, d9
 80094be:	f7f6 fedb 	bl	8000278 <__aeabi_dsub>
 80094c2:	4652      	mov	r2, sl
 80094c4:	465b      	mov	r3, fp
 80094c6:	f7f7 f88f 	bl	80005e8 <__aeabi_dmul>
 80094ca:	ec53 2b18 	vmov	r2, r3, d8
 80094ce:	f7f6 fed3 	bl	8000278 <__aeabi_dsub>
 80094d2:	a30b      	add	r3, pc, #44	; (adr r3, 8009500 <__kernel_sin+0x148>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	4606      	mov	r6, r0
 80094da:	460f      	mov	r7, r1
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	f7f7 f882 	bl	80005e8 <__aeabi_dmul>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4630      	mov	r0, r6
 80094ea:	4639      	mov	r1, r7
 80094ec:	f7f6 fec6 	bl	800027c <__adddf3>
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	4620      	mov	r0, r4
 80094f6:	4629      	mov	r1, r5
 80094f8:	f7f6 febe 	bl	8000278 <__aeabi_dsub>
 80094fc:	e7c4      	b.n	8009488 <__kernel_sin+0xd0>
 80094fe:	bf00      	nop
 8009500:	55555549 	.word	0x55555549
 8009504:	3fc55555 	.word	0x3fc55555
 8009508:	3fe00000 	.word	0x3fe00000
 800950c:	5acfd57c 	.word	0x5acfd57c
 8009510:	3de5d93a 	.word	0x3de5d93a
 8009514:	8a2b9ceb 	.word	0x8a2b9ceb
 8009518:	3e5ae5e6 	.word	0x3e5ae5e6
 800951c:	57b1fe7d 	.word	0x57b1fe7d
 8009520:	3ec71de3 	.word	0x3ec71de3
 8009524:	19c161d5 	.word	0x19c161d5
 8009528:	3f2a01a0 	.word	0x3f2a01a0
 800952c:	1110f8a6 	.word	0x1110f8a6
 8009530:	3f811111 	.word	0x3f811111
 8009534:	00000000 	.word	0x00000000

08009538 <__ieee754_rem_pio2>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	ed2d 8b02 	vpush	{d8}
 8009540:	ec55 4b10 	vmov	r4, r5, d0
 8009544:	4bca      	ldr	r3, [pc, #808]	; (8009870 <__ieee754_rem_pio2+0x338>)
 8009546:	b08b      	sub	sp, #44	; 0x2c
 8009548:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800954c:	4598      	cmp	r8, r3
 800954e:	4682      	mov	sl, r0
 8009550:	9502      	str	r5, [sp, #8]
 8009552:	dc08      	bgt.n	8009566 <__ieee754_rem_pio2+0x2e>
 8009554:	2200      	movs	r2, #0
 8009556:	2300      	movs	r3, #0
 8009558:	ed80 0b00 	vstr	d0, [r0]
 800955c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009560:	f04f 0b00 	mov.w	fp, #0
 8009564:	e028      	b.n	80095b8 <__ieee754_rem_pio2+0x80>
 8009566:	4bc3      	ldr	r3, [pc, #780]	; (8009874 <__ieee754_rem_pio2+0x33c>)
 8009568:	4598      	cmp	r8, r3
 800956a:	dc78      	bgt.n	800965e <__ieee754_rem_pio2+0x126>
 800956c:	9b02      	ldr	r3, [sp, #8]
 800956e:	4ec2      	ldr	r6, [pc, #776]	; (8009878 <__ieee754_rem_pio2+0x340>)
 8009570:	2b00      	cmp	r3, #0
 8009572:	ee10 0a10 	vmov	r0, s0
 8009576:	a3b0      	add	r3, pc, #704	; (adr r3, 8009838 <__ieee754_rem_pio2+0x300>)
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	4629      	mov	r1, r5
 800957e:	dd39      	ble.n	80095f4 <__ieee754_rem_pio2+0xbc>
 8009580:	f7f6 fe7a 	bl	8000278 <__aeabi_dsub>
 8009584:	45b0      	cmp	r8, r6
 8009586:	4604      	mov	r4, r0
 8009588:	460d      	mov	r5, r1
 800958a:	d01b      	beq.n	80095c4 <__ieee754_rem_pio2+0x8c>
 800958c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009840 <__ieee754_rem_pio2+0x308>)
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	f7f6 fe71 	bl	8000278 <__aeabi_dsub>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	e9ca 2300 	strd	r2, r3, [sl]
 800959e:	4620      	mov	r0, r4
 80095a0:	4629      	mov	r1, r5
 80095a2:	f7f6 fe69 	bl	8000278 <__aeabi_dsub>
 80095a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009840 <__ieee754_rem_pio2+0x308>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f6 fe64 	bl	8000278 <__aeabi_dsub>
 80095b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80095b4:	f04f 0b01 	mov.w	fp, #1
 80095b8:	4658      	mov	r0, fp
 80095ba:	b00b      	add	sp, #44	; 0x2c
 80095bc:	ecbd 8b02 	vpop	{d8}
 80095c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009848 <__ieee754_rem_pio2+0x310>)
 80095c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ca:	f7f6 fe55 	bl	8000278 <__aeabi_dsub>
 80095ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8009850 <__ieee754_rem_pio2+0x318>)
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	4604      	mov	r4, r0
 80095d6:	460d      	mov	r5, r1
 80095d8:	f7f6 fe4e 	bl	8000278 <__aeabi_dsub>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	e9ca 2300 	strd	r2, r3, [sl]
 80095e4:	4620      	mov	r0, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	f7f6 fe46 	bl	8000278 <__aeabi_dsub>
 80095ec:	a398      	add	r3, pc, #608	; (adr r3, 8009850 <__ieee754_rem_pio2+0x318>)
 80095ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f2:	e7db      	b.n	80095ac <__ieee754_rem_pio2+0x74>
 80095f4:	f7f6 fe42 	bl	800027c <__adddf3>
 80095f8:	45b0      	cmp	r8, r6
 80095fa:	4604      	mov	r4, r0
 80095fc:	460d      	mov	r5, r1
 80095fe:	d016      	beq.n	800962e <__ieee754_rem_pio2+0xf6>
 8009600:	a38f      	add	r3, pc, #572	; (adr r3, 8009840 <__ieee754_rem_pio2+0x308>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fe39 	bl	800027c <__adddf3>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	e9ca 2300 	strd	r2, r3, [sl]
 8009612:	4620      	mov	r0, r4
 8009614:	4629      	mov	r1, r5
 8009616:	f7f6 fe2f 	bl	8000278 <__aeabi_dsub>
 800961a:	a389      	add	r3, pc, #548	; (adr r3, 8009840 <__ieee754_rem_pio2+0x308>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f7f6 fe2c 	bl	800027c <__adddf3>
 8009624:	f04f 3bff 	mov.w	fp, #4294967295
 8009628:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800962c:	e7c4      	b.n	80095b8 <__ieee754_rem_pio2+0x80>
 800962e:	a386      	add	r3, pc, #536	; (adr r3, 8009848 <__ieee754_rem_pio2+0x310>)
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	f7f6 fe22 	bl	800027c <__adddf3>
 8009638:	a385      	add	r3, pc, #532	; (adr r3, 8009850 <__ieee754_rem_pio2+0x318>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	4604      	mov	r4, r0
 8009640:	460d      	mov	r5, r1
 8009642:	f7f6 fe1b 	bl	800027c <__adddf3>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	e9ca 2300 	strd	r2, r3, [sl]
 800964e:	4620      	mov	r0, r4
 8009650:	4629      	mov	r1, r5
 8009652:	f7f6 fe11 	bl	8000278 <__aeabi_dsub>
 8009656:	a37e      	add	r3, pc, #504	; (adr r3, 8009850 <__ieee754_rem_pio2+0x318>)
 8009658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800965c:	e7e0      	b.n	8009620 <__ieee754_rem_pio2+0xe8>
 800965e:	4b87      	ldr	r3, [pc, #540]	; (800987c <__ieee754_rem_pio2+0x344>)
 8009660:	4598      	cmp	r8, r3
 8009662:	f300 80d8 	bgt.w	8009816 <__ieee754_rem_pio2+0x2de>
 8009666:	f000 f96d 	bl	8009944 <fabs>
 800966a:	ec55 4b10 	vmov	r4, r5, d0
 800966e:	ee10 0a10 	vmov	r0, s0
 8009672:	a379      	add	r3, pc, #484	; (adr r3, 8009858 <__ieee754_rem_pio2+0x320>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	4629      	mov	r1, r5
 800967a:	f7f6 ffb5 	bl	80005e8 <__aeabi_dmul>
 800967e:	4b80      	ldr	r3, [pc, #512]	; (8009880 <__ieee754_rem_pio2+0x348>)
 8009680:	2200      	movs	r2, #0
 8009682:	f7f6 fdfb 	bl	800027c <__adddf3>
 8009686:	f7f7 fa49 	bl	8000b1c <__aeabi_d2iz>
 800968a:	4683      	mov	fp, r0
 800968c:	f7f6 ff42 	bl	8000514 <__aeabi_i2d>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	ec43 2b18 	vmov	d8, r2, r3
 8009698:	a367      	add	r3, pc, #412	; (adr r3, 8009838 <__ieee754_rem_pio2+0x300>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	f7f6 ffa3 	bl	80005e8 <__aeabi_dmul>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4620      	mov	r0, r4
 80096a8:	4629      	mov	r1, r5
 80096aa:	f7f6 fde5 	bl	8000278 <__aeabi_dsub>
 80096ae:	a364      	add	r3, pc, #400	; (adr r3, 8009840 <__ieee754_rem_pio2+0x308>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	4606      	mov	r6, r0
 80096b6:	460f      	mov	r7, r1
 80096b8:	ec51 0b18 	vmov	r0, r1, d8
 80096bc:	f7f6 ff94 	bl	80005e8 <__aeabi_dmul>
 80096c0:	f1bb 0f1f 	cmp.w	fp, #31
 80096c4:	4604      	mov	r4, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	dc0d      	bgt.n	80096e6 <__ieee754_rem_pio2+0x1ae>
 80096ca:	4b6e      	ldr	r3, [pc, #440]	; (8009884 <__ieee754_rem_pio2+0x34c>)
 80096cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80096d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d4:	4543      	cmp	r3, r8
 80096d6:	d006      	beq.n	80096e6 <__ieee754_rem_pio2+0x1ae>
 80096d8:	4622      	mov	r2, r4
 80096da:	462b      	mov	r3, r5
 80096dc:	4630      	mov	r0, r6
 80096de:	4639      	mov	r1, r7
 80096e0:	f7f6 fdca 	bl	8000278 <__aeabi_dsub>
 80096e4:	e00e      	b.n	8009704 <__ieee754_rem_pio2+0x1cc>
 80096e6:	462b      	mov	r3, r5
 80096e8:	4622      	mov	r2, r4
 80096ea:	4630      	mov	r0, r6
 80096ec:	4639      	mov	r1, r7
 80096ee:	f7f6 fdc3 	bl	8000278 <__aeabi_dsub>
 80096f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80096f6:	9303      	str	r3, [sp, #12]
 80096f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80096fc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009700:	2b10      	cmp	r3, #16
 8009702:	dc02      	bgt.n	800970a <__ieee754_rem_pio2+0x1d2>
 8009704:	e9ca 0100 	strd	r0, r1, [sl]
 8009708:	e039      	b.n	800977e <__ieee754_rem_pio2+0x246>
 800970a:	a34f      	add	r3, pc, #316	; (adr r3, 8009848 <__ieee754_rem_pio2+0x310>)
 800970c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009710:	ec51 0b18 	vmov	r0, r1, d8
 8009714:	f7f6 ff68 	bl	80005e8 <__aeabi_dmul>
 8009718:	4604      	mov	r4, r0
 800971a:	460d      	mov	r5, r1
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4630      	mov	r0, r6
 8009722:	4639      	mov	r1, r7
 8009724:	f7f6 fda8 	bl	8000278 <__aeabi_dsub>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4680      	mov	r8, r0
 800972e:	4689      	mov	r9, r1
 8009730:	4630      	mov	r0, r6
 8009732:	4639      	mov	r1, r7
 8009734:	f7f6 fda0 	bl	8000278 <__aeabi_dsub>
 8009738:	4622      	mov	r2, r4
 800973a:	462b      	mov	r3, r5
 800973c:	f7f6 fd9c 	bl	8000278 <__aeabi_dsub>
 8009740:	a343      	add	r3, pc, #268	; (adr r3, 8009850 <__ieee754_rem_pio2+0x318>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	4604      	mov	r4, r0
 8009748:	460d      	mov	r5, r1
 800974a:	ec51 0b18 	vmov	r0, r1, d8
 800974e:	f7f6 ff4b 	bl	80005e8 <__aeabi_dmul>
 8009752:	4622      	mov	r2, r4
 8009754:	462b      	mov	r3, r5
 8009756:	f7f6 fd8f 	bl	8000278 <__aeabi_dsub>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	4604      	mov	r4, r0
 8009760:	460d      	mov	r5, r1
 8009762:	4640      	mov	r0, r8
 8009764:	4649      	mov	r1, r9
 8009766:	f7f6 fd87 	bl	8000278 <__aeabi_dsub>
 800976a:	9a03      	ldr	r2, [sp, #12]
 800976c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	2b31      	cmp	r3, #49	; 0x31
 8009774:	dc24      	bgt.n	80097c0 <__ieee754_rem_pio2+0x288>
 8009776:	e9ca 0100 	strd	r0, r1, [sl]
 800977a:	4646      	mov	r6, r8
 800977c:	464f      	mov	r7, r9
 800977e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009782:	4630      	mov	r0, r6
 8009784:	4642      	mov	r2, r8
 8009786:	464b      	mov	r3, r9
 8009788:	4639      	mov	r1, r7
 800978a:	f7f6 fd75 	bl	8000278 <__aeabi_dsub>
 800978e:	462b      	mov	r3, r5
 8009790:	4622      	mov	r2, r4
 8009792:	f7f6 fd71 	bl	8000278 <__aeabi_dsub>
 8009796:	9b02      	ldr	r3, [sp, #8]
 8009798:	2b00      	cmp	r3, #0
 800979a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800979e:	f6bf af0b 	bge.w	80095b8 <__ieee754_rem_pio2+0x80>
 80097a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80097a6:	f8ca 3004 	str.w	r3, [sl, #4]
 80097aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097ae:	f8ca 8000 	str.w	r8, [sl]
 80097b2:	f8ca 0008 	str.w	r0, [sl, #8]
 80097b6:	f8ca 300c 	str.w	r3, [sl, #12]
 80097ba:	f1cb 0b00 	rsb	fp, fp, #0
 80097be:	e6fb      	b.n	80095b8 <__ieee754_rem_pio2+0x80>
 80097c0:	a327      	add	r3, pc, #156	; (adr r3, 8009860 <__ieee754_rem_pio2+0x328>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	ec51 0b18 	vmov	r0, r1, d8
 80097ca:	f7f6 ff0d 	bl	80005e8 <__aeabi_dmul>
 80097ce:	4604      	mov	r4, r0
 80097d0:	460d      	mov	r5, r1
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4640      	mov	r0, r8
 80097d8:	4649      	mov	r1, r9
 80097da:	f7f6 fd4d 	bl	8000278 <__aeabi_dsub>
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	4606      	mov	r6, r0
 80097e4:	460f      	mov	r7, r1
 80097e6:	4640      	mov	r0, r8
 80097e8:	4649      	mov	r1, r9
 80097ea:	f7f6 fd45 	bl	8000278 <__aeabi_dsub>
 80097ee:	4622      	mov	r2, r4
 80097f0:	462b      	mov	r3, r5
 80097f2:	f7f6 fd41 	bl	8000278 <__aeabi_dsub>
 80097f6:	a31c      	add	r3, pc, #112	; (adr r3, 8009868 <__ieee754_rem_pio2+0x330>)
 80097f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fc:	4604      	mov	r4, r0
 80097fe:	460d      	mov	r5, r1
 8009800:	ec51 0b18 	vmov	r0, r1, d8
 8009804:	f7f6 fef0 	bl	80005e8 <__aeabi_dmul>
 8009808:	4622      	mov	r2, r4
 800980a:	462b      	mov	r3, r5
 800980c:	f7f6 fd34 	bl	8000278 <__aeabi_dsub>
 8009810:	4604      	mov	r4, r0
 8009812:	460d      	mov	r5, r1
 8009814:	e760      	b.n	80096d8 <__ieee754_rem_pio2+0x1a0>
 8009816:	4b1c      	ldr	r3, [pc, #112]	; (8009888 <__ieee754_rem_pio2+0x350>)
 8009818:	4598      	cmp	r8, r3
 800981a:	dd37      	ble.n	800988c <__ieee754_rem_pio2+0x354>
 800981c:	ee10 2a10 	vmov	r2, s0
 8009820:	462b      	mov	r3, r5
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7f6 fd27 	bl	8000278 <__aeabi_dsub>
 800982a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800982e:	e9ca 0100 	strd	r0, r1, [sl]
 8009832:	e695      	b.n	8009560 <__ieee754_rem_pio2+0x28>
 8009834:	f3af 8000 	nop.w
 8009838:	54400000 	.word	0x54400000
 800983c:	3ff921fb 	.word	0x3ff921fb
 8009840:	1a626331 	.word	0x1a626331
 8009844:	3dd0b461 	.word	0x3dd0b461
 8009848:	1a600000 	.word	0x1a600000
 800984c:	3dd0b461 	.word	0x3dd0b461
 8009850:	2e037073 	.word	0x2e037073
 8009854:	3ba3198a 	.word	0x3ba3198a
 8009858:	6dc9c883 	.word	0x6dc9c883
 800985c:	3fe45f30 	.word	0x3fe45f30
 8009860:	2e000000 	.word	0x2e000000
 8009864:	3ba3198a 	.word	0x3ba3198a
 8009868:	252049c1 	.word	0x252049c1
 800986c:	397b839a 	.word	0x397b839a
 8009870:	3fe921fb 	.word	0x3fe921fb
 8009874:	4002d97b 	.word	0x4002d97b
 8009878:	3ff921fb 	.word	0x3ff921fb
 800987c:	413921fb 	.word	0x413921fb
 8009880:	3fe00000 	.word	0x3fe00000
 8009884:	0800a2e4 	.word	0x0800a2e4
 8009888:	7fefffff 	.word	0x7fefffff
 800988c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8009890:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8009894:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8009898:	4620      	mov	r0, r4
 800989a:	460d      	mov	r5, r1
 800989c:	f7f7 f93e 	bl	8000b1c <__aeabi_d2iz>
 80098a0:	f7f6 fe38 	bl	8000514 <__aeabi_i2d>
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	4620      	mov	r0, r4
 80098aa:	4629      	mov	r1, r5
 80098ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098b0:	f7f6 fce2 	bl	8000278 <__aeabi_dsub>
 80098b4:	4b21      	ldr	r3, [pc, #132]	; (800993c <__ieee754_rem_pio2+0x404>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	f7f6 fe96 	bl	80005e8 <__aeabi_dmul>
 80098bc:	460d      	mov	r5, r1
 80098be:	4604      	mov	r4, r0
 80098c0:	f7f7 f92c 	bl	8000b1c <__aeabi_d2iz>
 80098c4:	f7f6 fe26 	bl	8000514 <__aeabi_i2d>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4620      	mov	r0, r4
 80098ce:	4629      	mov	r1, r5
 80098d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80098d4:	f7f6 fcd0 	bl	8000278 <__aeabi_dsub>
 80098d8:	4b18      	ldr	r3, [pc, #96]	; (800993c <__ieee754_rem_pio2+0x404>)
 80098da:	2200      	movs	r2, #0
 80098dc:	f7f6 fe84 	bl	80005e8 <__aeabi_dmul>
 80098e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80098e4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80098e8:	2703      	movs	r7, #3
 80098ea:	2400      	movs	r4, #0
 80098ec:	2500      	movs	r5, #0
 80098ee:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80098f2:	4622      	mov	r2, r4
 80098f4:	462b      	mov	r3, r5
 80098f6:	46b9      	mov	r9, r7
 80098f8:	3f01      	subs	r7, #1
 80098fa:	f7f7 f8dd 	bl	8000ab8 <__aeabi_dcmpeq>
 80098fe:	2800      	cmp	r0, #0
 8009900:	d1f5      	bne.n	80098ee <__ieee754_rem_pio2+0x3b6>
 8009902:	4b0f      	ldr	r3, [pc, #60]	; (8009940 <__ieee754_rem_pio2+0x408>)
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	2302      	movs	r3, #2
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	4632      	mov	r2, r6
 800990c:	464b      	mov	r3, r9
 800990e:	4651      	mov	r1, sl
 8009910:	a804      	add	r0, sp, #16
 8009912:	f000 f821 	bl	8009958 <__kernel_rem_pio2>
 8009916:	9b02      	ldr	r3, [sp, #8]
 8009918:	2b00      	cmp	r3, #0
 800991a:	4683      	mov	fp, r0
 800991c:	f6bf ae4c 	bge.w	80095b8 <__ieee754_rem_pio2+0x80>
 8009920:	e9da 2100 	ldrd	r2, r1, [sl]
 8009924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009928:	e9ca 2300 	strd	r2, r3, [sl]
 800992c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009934:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009938:	e73f      	b.n	80097ba <__ieee754_rem_pio2+0x282>
 800993a:	bf00      	nop
 800993c:	41700000 	.word	0x41700000
 8009940:	0800a364 	.word	0x0800a364

08009944 <fabs>:
 8009944:	ec51 0b10 	vmov	r0, r1, d0
 8009948:	ee10 2a10 	vmov	r2, s0
 800994c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009950:	ec43 2b10 	vmov	d0, r2, r3
 8009954:	4770      	bx	lr
	...

08009958 <__kernel_rem_pio2>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	ed2d 8b02 	vpush	{d8}
 8009960:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009964:	f112 0f14 	cmn.w	r2, #20
 8009968:	9306      	str	r3, [sp, #24]
 800996a:	9104      	str	r1, [sp, #16]
 800996c:	4bc2      	ldr	r3, [pc, #776]	; (8009c78 <__kernel_rem_pio2+0x320>)
 800996e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009970:	9009      	str	r0, [sp, #36]	; 0x24
 8009972:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	9b06      	ldr	r3, [sp, #24]
 800997a:	f103 33ff 	add.w	r3, r3, #4294967295
 800997e:	bfa8      	it	ge
 8009980:	1ed4      	subge	r4, r2, #3
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	bfb2      	itee	lt
 8009986:	2400      	movlt	r4, #0
 8009988:	2318      	movge	r3, #24
 800998a:	fb94 f4f3 	sdivge	r4, r4, r3
 800998e:	f06f 0317 	mvn.w	r3, #23
 8009992:	fb04 3303 	mla	r3, r4, r3, r3
 8009996:	eb03 0a02 	add.w	sl, r3, r2
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	9a05      	ldr	r2, [sp, #20]
 800999e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8009c68 <__kernel_rem_pio2+0x310>
 80099a2:	eb03 0802 	add.w	r8, r3, r2
 80099a6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80099a8:	1aa7      	subs	r7, r4, r2
 80099aa:	ae20      	add	r6, sp, #128	; 0x80
 80099ac:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80099b0:	2500      	movs	r5, #0
 80099b2:	4545      	cmp	r5, r8
 80099b4:	dd13      	ble.n	80099de <__kernel_rem_pio2+0x86>
 80099b6:	9b06      	ldr	r3, [sp, #24]
 80099b8:	aa20      	add	r2, sp, #128	; 0x80
 80099ba:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80099be:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80099c2:	f04f 0800 	mov.w	r8, #0
 80099c6:	9b00      	ldr	r3, [sp, #0]
 80099c8:	4598      	cmp	r8, r3
 80099ca:	dc31      	bgt.n	8009a30 <__kernel_rem_pio2+0xd8>
 80099cc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8009c68 <__kernel_rem_pio2+0x310>
 80099d0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80099d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80099d8:	462f      	mov	r7, r5
 80099da:	2600      	movs	r6, #0
 80099dc:	e01b      	b.n	8009a16 <__kernel_rem_pio2+0xbe>
 80099de:	42ef      	cmn	r7, r5
 80099e0:	d407      	bmi.n	80099f2 <__kernel_rem_pio2+0x9a>
 80099e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80099e6:	f7f6 fd95 	bl	8000514 <__aeabi_i2d>
 80099ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80099ee:	3501      	adds	r5, #1
 80099f0:	e7df      	b.n	80099b2 <__kernel_rem_pio2+0x5a>
 80099f2:	ec51 0b18 	vmov	r0, r1, d8
 80099f6:	e7f8      	b.n	80099ea <__kernel_rem_pio2+0x92>
 80099f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009a00:	f7f6 fdf2 	bl	80005e8 <__aeabi_dmul>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a0c:	f7f6 fc36 	bl	800027c <__adddf3>
 8009a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a14:	3601      	adds	r6, #1
 8009a16:	9b05      	ldr	r3, [sp, #20]
 8009a18:	429e      	cmp	r6, r3
 8009a1a:	f1a7 0708 	sub.w	r7, r7, #8
 8009a1e:	ddeb      	ble.n	80099f8 <__kernel_rem_pio2+0xa0>
 8009a20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a24:	f108 0801 	add.w	r8, r8, #1
 8009a28:	ecab 7b02 	vstmia	fp!, {d7}
 8009a2c:	3508      	adds	r5, #8
 8009a2e:	e7ca      	b.n	80099c6 <__kernel_rem_pio2+0x6e>
 8009a30:	9b00      	ldr	r3, [sp, #0]
 8009a32:	aa0c      	add	r2, sp, #48	; 0x30
 8009a34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009a38:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a3a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009a3c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009a40:	9c00      	ldr	r4, [sp, #0]
 8009a42:	930a      	str	r3, [sp, #40]	; 0x28
 8009a44:	00e3      	lsls	r3, r4, #3
 8009a46:	9308      	str	r3, [sp, #32]
 8009a48:	ab98      	add	r3, sp, #608	; 0x260
 8009a4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a4e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009a52:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009a56:	ab70      	add	r3, sp, #448	; 0x1c0
 8009a58:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8009a5c:	46c3      	mov	fp, r8
 8009a5e:	46a1      	mov	r9, r4
 8009a60:	f1b9 0f00 	cmp.w	r9, #0
 8009a64:	f1a5 0508 	sub.w	r5, r5, #8
 8009a68:	dc77      	bgt.n	8009b5a <__kernel_rem_pio2+0x202>
 8009a6a:	ec47 6b10 	vmov	d0, r6, r7
 8009a6e:	4650      	mov	r0, sl
 8009a70:	f000 fac2 	bl	8009ff8 <scalbn>
 8009a74:	ec57 6b10 	vmov	r6, r7, d0
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009a7e:	ee10 0a10 	vmov	r0, s0
 8009a82:	4639      	mov	r1, r7
 8009a84:	f7f6 fdb0 	bl	80005e8 <__aeabi_dmul>
 8009a88:	ec41 0b10 	vmov	d0, r0, r1
 8009a8c:	f000 fb34 	bl	800a0f8 <floor>
 8009a90:	4b7a      	ldr	r3, [pc, #488]	; (8009c7c <__kernel_rem_pio2+0x324>)
 8009a92:	ec51 0b10 	vmov	r0, r1, d0
 8009a96:	2200      	movs	r2, #0
 8009a98:	f7f6 fda6 	bl	80005e8 <__aeabi_dmul>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	f7f6 fbe8 	bl	8000278 <__aeabi_dsub>
 8009aa8:	460f      	mov	r7, r1
 8009aaa:	4606      	mov	r6, r0
 8009aac:	f7f7 f836 	bl	8000b1c <__aeabi_d2iz>
 8009ab0:	9002      	str	r0, [sp, #8]
 8009ab2:	f7f6 fd2f 	bl	8000514 <__aeabi_i2d>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4630      	mov	r0, r6
 8009abc:	4639      	mov	r1, r7
 8009abe:	f7f6 fbdb 	bl	8000278 <__aeabi_dsub>
 8009ac2:	f1ba 0f00 	cmp.w	sl, #0
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	dd6d      	ble.n	8009ba8 <__kernel_rem_pio2+0x250>
 8009acc:	1e61      	subs	r1, r4, #1
 8009ace:	ab0c      	add	r3, sp, #48	; 0x30
 8009ad0:	9d02      	ldr	r5, [sp, #8]
 8009ad2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ad6:	f1ca 0018 	rsb	r0, sl, #24
 8009ada:	fa43 f200 	asr.w	r2, r3, r0
 8009ade:	4415      	add	r5, r2
 8009ae0:	4082      	lsls	r2, r0
 8009ae2:	1a9b      	subs	r3, r3, r2
 8009ae4:	aa0c      	add	r2, sp, #48	; 0x30
 8009ae6:	9502      	str	r5, [sp, #8]
 8009ae8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009aec:	f1ca 0217 	rsb	r2, sl, #23
 8009af0:	fa43 fb02 	asr.w	fp, r3, r2
 8009af4:	f1bb 0f00 	cmp.w	fp, #0
 8009af8:	dd65      	ble.n	8009bc6 <__kernel_rem_pio2+0x26e>
 8009afa:	9b02      	ldr	r3, [sp, #8]
 8009afc:	2200      	movs	r2, #0
 8009afe:	3301      	adds	r3, #1
 8009b00:	9302      	str	r3, [sp, #8]
 8009b02:	4615      	mov	r5, r2
 8009b04:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009b08:	4294      	cmp	r4, r2
 8009b0a:	f300 809f 	bgt.w	8009c4c <__kernel_rem_pio2+0x2f4>
 8009b0e:	f1ba 0f00 	cmp.w	sl, #0
 8009b12:	dd07      	ble.n	8009b24 <__kernel_rem_pio2+0x1cc>
 8009b14:	f1ba 0f01 	cmp.w	sl, #1
 8009b18:	f000 80c1 	beq.w	8009c9e <__kernel_rem_pio2+0x346>
 8009b1c:	f1ba 0f02 	cmp.w	sl, #2
 8009b20:	f000 80c7 	beq.w	8009cb2 <__kernel_rem_pio2+0x35a>
 8009b24:	f1bb 0f02 	cmp.w	fp, #2
 8009b28:	d14d      	bne.n	8009bc6 <__kernel_rem_pio2+0x26e>
 8009b2a:	4632      	mov	r2, r6
 8009b2c:	463b      	mov	r3, r7
 8009b2e:	4954      	ldr	r1, [pc, #336]	; (8009c80 <__kernel_rem_pio2+0x328>)
 8009b30:	2000      	movs	r0, #0
 8009b32:	f7f6 fba1 	bl	8000278 <__aeabi_dsub>
 8009b36:	4606      	mov	r6, r0
 8009b38:	460f      	mov	r7, r1
 8009b3a:	2d00      	cmp	r5, #0
 8009b3c:	d043      	beq.n	8009bc6 <__kernel_rem_pio2+0x26e>
 8009b3e:	4650      	mov	r0, sl
 8009b40:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8009c70 <__kernel_rem_pio2+0x318>
 8009b44:	f000 fa58 	bl	8009ff8 <scalbn>
 8009b48:	4630      	mov	r0, r6
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	ec53 2b10 	vmov	r2, r3, d0
 8009b50:	f7f6 fb92 	bl	8000278 <__aeabi_dsub>
 8009b54:	4606      	mov	r6, r0
 8009b56:	460f      	mov	r7, r1
 8009b58:	e035      	b.n	8009bc6 <__kernel_rem_pio2+0x26e>
 8009b5a:	4b4a      	ldr	r3, [pc, #296]	; (8009c84 <__kernel_rem_pio2+0x32c>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	f7f6 fd41 	bl	80005e8 <__aeabi_dmul>
 8009b66:	f7f6 ffd9 	bl	8000b1c <__aeabi_d2iz>
 8009b6a:	f7f6 fcd3 	bl	8000514 <__aeabi_i2d>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	ec43 2b18 	vmov	d8, r2, r3
 8009b76:	4b44      	ldr	r3, [pc, #272]	; (8009c88 <__kernel_rem_pio2+0x330>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f7f6 fd35 	bl	80005e8 <__aeabi_dmul>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4630      	mov	r0, r6
 8009b84:	4639      	mov	r1, r7
 8009b86:	f7f6 fb77 	bl	8000278 <__aeabi_dsub>
 8009b8a:	f7f6 ffc7 	bl	8000b1c <__aeabi_d2iz>
 8009b8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b92:	f84b 0b04 	str.w	r0, [fp], #4
 8009b96:	ec51 0b18 	vmov	r0, r1, d8
 8009b9a:	f7f6 fb6f 	bl	800027c <__adddf3>
 8009b9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	e75b      	b.n	8009a60 <__kernel_rem_pio2+0x108>
 8009ba8:	d106      	bne.n	8009bb8 <__kernel_rem_pio2+0x260>
 8009baa:	1e63      	subs	r3, r4, #1
 8009bac:	aa0c      	add	r2, sp, #48	; 0x30
 8009bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bb2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8009bb6:	e79d      	b.n	8009af4 <__kernel_rem_pio2+0x19c>
 8009bb8:	4b34      	ldr	r3, [pc, #208]	; (8009c8c <__kernel_rem_pio2+0x334>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7f6 ff9a 	bl	8000af4 <__aeabi_dcmpge>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d140      	bne.n	8009c46 <__kernel_rem_pio2+0x2ee>
 8009bc4:	4683      	mov	fp, r0
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4630      	mov	r0, r6
 8009bcc:	4639      	mov	r1, r7
 8009bce:	f7f6 ff73 	bl	8000ab8 <__aeabi_dcmpeq>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	f000 80c1 	beq.w	8009d5a <__kernel_rem_pio2+0x402>
 8009bd8:	1e65      	subs	r5, r4, #1
 8009bda:	462b      	mov	r3, r5
 8009bdc:	2200      	movs	r2, #0
 8009bde:	9900      	ldr	r1, [sp, #0]
 8009be0:	428b      	cmp	r3, r1
 8009be2:	da6d      	bge.n	8009cc0 <__kernel_rem_pio2+0x368>
 8009be4:	2a00      	cmp	r2, #0
 8009be6:	f000 808a 	beq.w	8009cfe <__kernel_rem_pio2+0x3a6>
 8009bea:	ab0c      	add	r3, sp, #48	; 0x30
 8009bec:	f1aa 0a18 	sub.w	sl, sl, #24
 8009bf0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 80ae 	beq.w	8009d56 <__kernel_rem_pio2+0x3fe>
 8009bfa:	4650      	mov	r0, sl
 8009bfc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009c70 <__kernel_rem_pio2+0x318>
 8009c00:	f000 f9fa 	bl	8009ff8 <scalbn>
 8009c04:	1c6b      	adds	r3, r5, #1
 8009c06:	00da      	lsls	r2, r3, #3
 8009c08:	9205      	str	r2, [sp, #20]
 8009c0a:	ec57 6b10 	vmov	r6, r7, d0
 8009c0e:	aa70      	add	r2, sp, #448	; 0x1c0
 8009c10:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009c84 <__kernel_rem_pio2+0x32c>
 8009c14:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009c18:	462c      	mov	r4, r5
 8009c1a:	f04f 0800 	mov.w	r8, #0
 8009c1e:	2c00      	cmp	r4, #0
 8009c20:	f280 80d4 	bge.w	8009dcc <__kernel_rem_pio2+0x474>
 8009c24:	462c      	mov	r4, r5
 8009c26:	2c00      	cmp	r4, #0
 8009c28:	f2c0 8102 	blt.w	8009e30 <__kernel_rem_pio2+0x4d8>
 8009c2c:	4b18      	ldr	r3, [pc, #96]	; (8009c90 <__kernel_rem_pio2+0x338>)
 8009c2e:	461e      	mov	r6, r3
 8009c30:	ab70      	add	r3, sp, #448	; 0x1c0
 8009c32:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8009c36:	1b2b      	subs	r3, r5, r4
 8009c38:	f04f 0900 	mov.w	r9, #0
 8009c3c:	f04f 0a00 	mov.w	sl, #0
 8009c40:	2700      	movs	r7, #0
 8009c42:	9306      	str	r3, [sp, #24]
 8009c44:	e0e6      	b.n	8009e14 <__kernel_rem_pio2+0x4bc>
 8009c46:	f04f 0b02 	mov.w	fp, #2
 8009c4a:	e756      	b.n	8009afa <__kernel_rem_pio2+0x1a2>
 8009c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c50:	bb05      	cbnz	r5, 8009c94 <__kernel_rem_pio2+0x33c>
 8009c52:	b123      	cbz	r3, 8009c5e <__kernel_rem_pio2+0x306>
 8009c54:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009c58:	f8c8 3000 	str.w	r3, [r8]
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	3201      	adds	r2, #1
 8009c60:	f108 0804 	add.w	r8, r8, #4
 8009c64:	461d      	mov	r5, r3
 8009c66:	e74f      	b.n	8009b08 <__kernel_rem_pio2+0x1b0>
	...
 8009c74:	3ff00000 	.word	0x3ff00000
 8009c78:	0800a4b0 	.word	0x0800a4b0
 8009c7c:	40200000 	.word	0x40200000
 8009c80:	3ff00000 	.word	0x3ff00000
 8009c84:	3e700000 	.word	0x3e700000
 8009c88:	41700000 	.word	0x41700000
 8009c8c:	3fe00000 	.word	0x3fe00000
 8009c90:	0800a470 	.word	0x0800a470
 8009c94:	1acb      	subs	r3, r1, r3
 8009c96:	f8c8 3000 	str.w	r3, [r8]
 8009c9a:	462b      	mov	r3, r5
 8009c9c:	e7df      	b.n	8009c5e <__kernel_rem_pio2+0x306>
 8009c9e:	1e62      	subs	r2, r4, #1
 8009ca0:	ab0c      	add	r3, sp, #48	; 0x30
 8009ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009caa:	a90c      	add	r1, sp, #48	; 0x30
 8009cac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009cb0:	e738      	b.n	8009b24 <__kernel_rem_pio2+0x1cc>
 8009cb2:	1e62      	subs	r2, r4, #1
 8009cb4:	ab0c      	add	r3, sp, #48	; 0x30
 8009cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cba:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009cbe:	e7f4      	b.n	8009caa <__kernel_rem_pio2+0x352>
 8009cc0:	a90c      	add	r1, sp, #48	; 0x30
 8009cc2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009cc6:	3b01      	subs	r3, #1
 8009cc8:	430a      	orrs	r2, r1
 8009cca:	e788      	b.n	8009bde <__kernel_rem_pio2+0x286>
 8009ccc:	3301      	adds	r3, #1
 8009cce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009cd2:	2900      	cmp	r1, #0
 8009cd4:	d0fa      	beq.n	8009ccc <__kernel_rem_pio2+0x374>
 8009cd6:	9a08      	ldr	r2, [sp, #32]
 8009cd8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8009cdc:	446a      	add	r2, sp
 8009cde:	3a98      	subs	r2, #152	; 0x98
 8009ce0:	9208      	str	r2, [sp, #32]
 8009ce2:	9a06      	ldr	r2, [sp, #24]
 8009ce4:	a920      	add	r1, sp, #128	; 0x80
 8009ce6:	18a2      	adds	r2, r4, r2
 8009ce8:	18e3      	adds	r3, r4, r3
 8009cea:	f104 0801 	add.w	r8, r4, #1
 8009cee:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009cf2:	9302      	str	r3, [sp, #8]
 8009cf4:	9b02      	ldr	r3, [sp, #8]
 8009cf6:	4543      	cmp	r3, r8
 8009cf8:	da04      	bge.n	8009d04 <__kernel_rem_pio2+0x3ac>
 8009cfa:	461c      	mov	r4, r3
 8009cfc:	e6a2      	b.n	8009a44 <__kernel_rem_pio2+0xec>
 8009cfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d00:	2301      	movs	r3, #1
 8009d02:	e7e4      	b.n	8009cce <__kernel_rem_pio2+0x376>
 8009d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d06:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009d0a:	f7f6 fc03 	bl	8000514 <__aeabi_i2d>
 8009d0e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d14:	46ab      	mov	fp, r5
 8009d16:	461c      	mov	r4, r3
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	2600      	movs	r6, #0
 8009d1e:	2700      	movs	r7, #0
 8009d20:	9b05      	ldr	r3, [sp, #20]
 8009d22:	4599      	cmp	r9, r3
 8009d24:	dd06      	ble.n	8009d34 <__kernel_rem_pio2+0x3dc>
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009d2c:	f108 0801 	add.w	r8, r8, #1
 8009d30:	9308      	str	r3, [sp, #32]
 8009d32:	e7df      	b.n	8009cf4 <__kernel_rem_pio2+0x39c>
 8009d34:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009d38:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009d3c:	f7f6 fc54 	bl	80005e8 <__aeabi_dmul>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4630      	mov	r0, r6
 8009d46:	4639      	mov	r1, r7
 8009d48:	f7f6 fa98 	bl	800027c <__adddf3>
 8009d4c:	f109 0901 	add.w	r9, r9, #1
 8009d50:	4606      	mov	r6, r0
 8009d52:	460f      	mov	r7, r1
 8009d54:	e7e4      	b.n	8009d20 <__kernel_rem_pio2+0x3c8>
 8009d56:	3d01      	subs	r5, #1
 8009d58:	e747      	b.n	8009bea <__kernel_rem_pio2+0x292>
 8009d5a:	ec47 6b10 	vmov	d0, r6, r7
 8009d5e:	f1ca 0000 	rsb	r0, sl, #0
 8009d62:	f000 f949 	bl	8009ff8 <scalbn>
 8009d66:	ec57 6b10 	vmov	r6, r7, d0
 8009d6a:	4ba0      	ldr	r3, [pc, #640]	; (8009fec <__kernel_rem_pio2+0x694>)
 8009d6c:	ee10 0a10 	vmov	r0, s0
 8009d70:	2200      	movs	r2, #0
 8009d72:	4639      	mov	r1, r7
 8009d74:	f7f6 febe 	bl	8000af4 <__aeabi_dcmpge>
 8009d78:	b1f8      	cbz	r0, 8009dba <__kernel_rem_pio2+0x462>
 8009d7a:	4b9d      	ldr	r3, [pc, #628]	; (8009ff0 <__kernel_rem_pio2+0x698>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4630      	mov	r0, r6
 8009d80:	4639      	mov	r1, r7
 8009d82:	f7f6 fc31 	bl	80005e8 <__aeabi_dmul>
 8009d86:	f7f6 fec9 	bl	8000b1c <__aeabi_d2iz>
 8009d8a:	4680      	mov	r8, r0
 8009d8c:	f7f6 fbc2 	bl	8000514 <__aeabi_i2d>
 8009d90:	4b96      	ldr	r3, [pc, #600]	; (8009fec <__kernel_rem_pio2+0x694>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	f7f6 fc28 	bl	80005e8 <__aeabi_dmul>
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	4639      	mov	r1, r7
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7f6 fa6a 	bl	8000278 <__aeabi_dsub>
 8009da4:	f7f6 feba 	bl	8000b1c <__aeabi_d2iz>
 8009da8:	1c65      	adds	r5, r4, #1
 8009daa:	ab0c      	add	r3, sp, #48	; 0x30
 8009dac:	f10a 0a18 	add.w	sl, sl, #24
 8009db0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009db4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009db8:	e71f      	b.n	8009bfa <__kernel_rem_pio2+0x2a2>
 8009dba:	4630      	mov	r0, r6
 8009dbc:	4639      	mov	r1, r7
 8009dbe:	f7f6 fead 	bl	8000b1c <__aeabi_d2iz>
 8009dc2:	ab0c      	add	r3, sp, #48	; 0x30
 8009dc4:	4625      	mov	r5, r4
 8009dc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009dca:	e716      	b.n	8009bfa <__kernel_rem_pio2+0x2a2>
 8009dcc:	ab0c      	add	r3, sp, #48	; 0x30
 8009dce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009dd2:	f7f6 fb9f 	bl	8000514 <__aeabi_i2d>
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	463b      	mov	r3, r7
 8009dda:	f7f6 fc05 	bl	80005e8 <__aeabi_dmul>
 8009dde:	4642      	mov	r2, r8
 8009de0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009de4:	464b      	mov	r3, r9
 8009de6:	4630      	mov	r0, r6
 8009de8:	4639      	mov	r1, r7
 8009dea:	f7f6 fbfd 	bl	80005e8 <__aeabi_dmul>
 8009dee:	3c01      	subs	r4, #1
 8009df0:	4606      	mov	r6, r0
 8009df2:	460f      	mov	r7, r1
 8009df4:	e713      	b.n	8009c1e <__kernel_rem_pio2+0x2c6>
 8009df6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009dfa:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009dfe:	f7f6 fbf3 	bl	80005e8 <__aeabi_dmul>
 8009e02:	4602      	mov	r2, r0
 8009e04:	460b      	mov	r3, r1
 8009e06:	4648      	mov	r0, r9
 8009e08:	4651      	mov	r1, sl
 8009e0a:	f7f6 fa37 	bl	800027c <__adddf3>
 8009e0e:	3701      	adds	r7, #1
 8009e10:	4681      	mov	r9, r0
 8009e12:	468a      	mov	sl, r1
 8009e14:	9b00      	ldr	r3, [sp, #0]
 8009e16:	429f      	cmp	r7, r3
 8009e18:	dc02      	bgt.n	8009e20 <__kernel_rem_pio2+0x4c8>
 8009e1a:	9b06      	ldr	r3, [sp, #24]
 8009e1c:	429f      	cmp	r7, r3
 8009e1e:	ddea      	ble.n	8009df6 <__kernel_rem_pio2+0x49e>
 8009e20:	9a06      	ldr	r2, [sp, #24]
 8009e22:	ab48      	add	r3, sp, #288	; 0x120
 8009e24:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009e28:	e9c6 9a00 	strd	r9, sl, [r6]
 8009e2c:	3c01      	subs	r4, #1
 8009e2e:	e6fa      	b.n	8009c26 <__kernel_rem_pio2+0x2ce>
 8009e30:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	dc0b      	bgt.n	8009e4e <__kernel_rem_pio2+0x4f6>
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dc39      	bgt.n	8009eae <__kernel_rem_pio2+0x556>
 8009e3a:	d05d      	beq.n	8009ef8 <__kernel_rem_pio2+0x5a0>
 8009e3c:	9b02      	ldr	r3, [sp, #8]
 8009e3e:	f003 0007 	and.w	r0, r3, #7
 8009e42:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009e46:	ecbd 8b02 	vpop	{d8}
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d1f3      	bne.n	8009e3c <__kernel_rem_pio2+0x4e4>
 8009e54:	9b05      	ldr	r3, [sp, #20]
 8009e56:	9500      	str	r5, [sp, #0]
 8009e58:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009e5c:	eb0d 0403 	add.w	r4, sp, r3
 8009e60:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009e64:	46a2      	mov	sl, r4
 8009e66:	9b00      	ldr	r3, [sp, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	f1aa 0a08 	sub.w	sl, sl, #8
 8009e6e:	dc69      	bgt.n	8009f44 <__kernel_rem_pio2+0x5ec>
 8009e70:	46aa      	mov	sl, r5
 8009e72:	f1ba 0f01 	cmp.w	sl, #1
 8009e76:	f1a4 0408 	sub.w	r4, r4, #8
 8009e7a:	f300 8083 	bgt.w	8009f84 <__kernel_rem_pio2+0x62c>
 8009e7e:	9c05      	ldr	r4, [sp, #20]
 8009e80:	ab48      	add	r3, sp, #288	; 0x120
 8009e82:	441c      	add	r4, r3
 8009e84:	2000      	movs	r0, #0
 8009e86:	2100      	movs	r1, #0
 8009e88:	2d01      	cmp	r5, #1
 8009e8a:	f300 809a 	bgt.w	8009fc2 <__kernel_rem_pio2+0x66a>
 8009e8e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009e92:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009e96:	f1bb 0f00 	cmp.w	fp, #0
 8009e9a:	f040 8098 	bne.w	8009fce <__kernel_rem_pio2+0x676>
 8009e9e:	9b04      	ldr	r3, [sp, #16]
 8009ea0:	e9c3 7800 	strd	r7, r8, [r3]
 8009ea4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009ea8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009eac:	e7c6      	b.n	8009e3c <__kernel_rem_pio2+0x4e4>
 8009eae:	9e05      	ldr	r6, [sp, #20]
 8009eb0:	ab48      	add	r3, sp, #288	; 0x120
 8009eb2:	441e      	add	r6, r3
 8009eb4:	462c      	mov	r4, r5
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	2100      	movs	r1, #0
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	da33      	bge.n	8009f26 <__kernel_rem_pio2+0x5ce>
 8009ebe:	f1bb 0f00 	cmp.w	fp, #0
 8009ec2:	d036      	beq.n	8009f32 <__kernel_rem_pio2+0x5da>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eca:	9c04      	ldr	r4, [sp, #16]
 8009ecc:	e9c4 2300 	strd	r2, r3, [r4]
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009ed8:	f7f6 f9ce 	bl	8000278 <__aeabi_dsub>
 8009edc:	ae4a      	add	r6, sp, #296	; 0x128
 8009ede:	2401      	movs	r4, #1
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	da29      	bge.n	8009f38 <__kernel_rem_pio2+0x5e0>
 8009ee4:	f1bb 0f00 	cmp.w	fp, #0
 8009ee8:	d002      	beq.n	8009ef0 <__kernel_rem_pio2+0x598>
 8009eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009eee:	4619      	mov	r1, r3
 8009ef0:	9b04      	ldr	r3, [sp, #16]
 8009ef2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009ef6:	e7a1      	b.n	8009e3c <__kernel_rem_pio2+0x4e4>
 8009ef8:	9c05      	ldr	r4, [sp, #20]
 8009efa:	ab48      	add	r3, sp, #288	; 0x120
 8009efc:	441c      	add	r4, r3
 8009efe:	2000      	movs	r0, #0
 8009f00:	2100      	movs	r1, #0
 8009f02:	2d00      	cmp	r5, #0
 8009f04:	da09      	bge.n	8009f1a <__kernel_rem_pio2+0x5c2>
 8009f06:	f1bb 0f00 	cmp.w	fp, #0
 8009f0a:	d002      	beq.n	8009f12 <__kernel_rem_pio2+0x5ba>
 8009f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f10:	4619      	mov	r1, r3
 8009f12:	9b04      	ldr	r3, [sp, #16]
 8009f14:	e9c3 0100 	strd	r0, r1, [r3]
 8009f18:	e790      	b.n	8009e3c <__kernel_rem_pio2+0x4e4>
 8009f1a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009f1e:	f7f6 f9ad 	bl	800027c <__adddf3>
 8009f22:	3d01      	subs	r5, #1
 8009f24:	e7ed      	b.n	8009f02 <__kernel_rem_pio2+0x5aa>
 8009f26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009f2a:	f7f6 f9a7 	bl	800027c <__adddf3>
 8009f2e:	3c01      	subs	r4, #1
 8009f30:	e7c3      	b.n	8009eba <__kernel_rem_pio2+0x562>
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	e7c8      	b.n	8009eca <__kernel_rem_pio2+0x572>
 8009f38:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009f3c:	f7f6 f99e 	bl	800027c <__adddf3>
 8009f40:	3401      	adds	r4, #1
 8009f42:	e7cd      	b.n	8009ee0 <__kernel_rem_pio2+0x588>
 8009f44:	e9da 8900 	ldrd	r8, r9, [sl]
 8009f48:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009f4c:	9b00      	ldr	r3, [sp, #0]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	4632      	mov	r2, r6
 8009f54:	463b      	mov	r3, r7
 8009f56:	4640      	mov	r0, r8
 8009f58:	4649      	mov	r1, r9
 8009f5a:	f7f6 f98f 	bl	800027c <__adddf3>
 8009f5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4640      	mov	r0, r8
 8009f68:	4649      	mov	r1, r9
 8009f6a:	f7f6 f985 	bl	8000278 <__aeabi_dsub>
 8009f6e:	4632      	mov	r2, r6
 8009f70:	463b      	mov	r3, r7
 8009f72:	f7f6 f983 	bl	800027c <__adddf3>
 8009f76:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009f7a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f7e:	ed8a 7b00 	vstr	d7, [sl]
 8009f82:	e770      	b.n	8009e66 <__kernel_rem_pio2+0x50e>
 8009f84:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009f88:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4632      	mov	r2, r6
 8009f90:	463b      	mov	r3, r7
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 f972 	bl	800027c <__adddf3>
 8009f98:	e9cd 0100 	strd	r0, r1, [sp]
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	f7f6 f968 	bl	8000278 <__aeabi_dsub>
 8009fa8:	4632      	mov	r2, r6
 8009faa:	463b      	mov	r3, r7
 8009fac:	f7f6 f966 	bl	800027c <__adddf3>
 8009fb0:	ed9d 7b00 	vldr	d7, [sp]
 8009fb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009fb8:	ed84 7b00 	vstr	d7, [r4]
 8009fbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fc0:	e757      	b.n	8009e72 <__kernel_rem_pio2+0x51a>
 8009fc2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009fc6:	f7f6 f959 	bl	800027c <__adddf3>
 8009fca:	3d01      	subs	r5, #1
 8009fcc:	e75c      	b.n	8009e88 <__kernel_rem_pio2+0x530>
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	9a04      	ldr	r2, [sp, #16]
 8009fd2:	601f      	str	r7, [r3, #0]
 8009fd4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009fd8:	605c      	str	r4, [r3, #4]
 8009fda:	609d      	str	r5, [r3, #8]
 8009fdc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009fe0:	60d3      	str	r3, [r2, #12]
 8009fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fe6:	6110      	str	r0, [r2, #16]
 8009fe8:	6153      	str	r3, [r2, #20]
 8009fea:	e727      	b.n	8009e3c <__kernel_rem_pio2+0x4e4>
 8009fec:	41700000 	.word	0x41700000
 8009ff0:	3e700000 	.word	0x3e700000
 8009ff4:	00000000 	.word	0x00000000

08009ff8 <scalbn>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	ec55 4b10 	vmov	r4, r5, d0
 8009ffe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a002:	4606      	mov	r6, r0
 800a004:	462b      	mov	r3, r5
 800a006:	b999      	cbnz	r1, 800a030 <scalbn+0x38>
 800a008:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a00c:	4323      	orrs	r3, r4
 800a00e:	d03f      	beq.n	800a090 <scalbn+0x98>
 800a010:	4b35      	ldr	r3, [pc, #212]	; (800a0e8 <scalbn+0xf0>)
 800a012:	4629      	mov	r1, r5
 800a014:	ee10 0a10 	vmov	r0, s0
 800a018:	2200      	movs	r2, #0
 800a01a:	f7f6 fae5 	bl	80005e8 <__aeabi_dmul>
 800a01e:	4b33      	ldr	r3, [pc, #204]	; (800a0ec <scalbn+0xf4>)
 800a020:	429e      	cmp	r6, r3
 800a022:	4604      	mov	r4, r0
 800a024:	460d      	mov	r5, r1
 800a026:	da10      	bge.n	800a04a <scalbn+0x52>
 800a028:	a327      	add	r3, pc, #156	; (adr r3, 800a0c8 <scalbn+0xd0>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	e01f      	b.n	800a070 <scalbn+0x78>
 800a030:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a034:	4291      	cmp	r1, r2
 800a036:	d10c      	bne.n	800a052 <scalbn+0x5a>
 800a038:	ee10 2a10 	vmov	r2, s0
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 f91c 	bl	800027c <__adddf3>
 800a044:	4604      	mov	r4, r0
 800a046:	460d      	mov	r5, r1
 800a048:	e022      	b.n	800a090 <scalbn+0x98>
 800a04a:	460b      	mov	r3, r1
 800a04c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a050:	3936      	subs	r1, #54	; 0x36
 800a052:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a056:	4296      	cmp	r6, r2
 800a058:	dd0d      	ble.n	800a076 <scalbn+0x7e>
 800a05a:	2d00      	cmp	r5, #0
 800a05c:	a11c      	add	r1, pc, #112	; (adr r1, 800a0d0 <scalbn+0xd8>)
 800a05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a062:	da02      	bge.n	800a06a <scalbn+0x72>
 800a064:	a11c      	add	r1, pc, #112	; (adr r1, 800a0d8 <scalbn+0xe0>)
 800a066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a06a:	a319      	add	r3, pc, #100	; (adr r3, 800a0d0 <scalbn+0xd8>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7f6 faba 	bl	80005e8 <__aeabi_dmul>
 800a074:	e7e6      	b.n	800a044 <scalbn+0x4c>
 800a076:	1872      	adds	r2, r6, r1
 800a078:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a07c:	428a      	cmp	r2, r1
 800a07e:	dcec      	bgt.n	800a05a <scalbn+0x62>
 800a080:	2a00      	cmp	r2, #0
 800a082:	dd08      	ble.n	800a096 <scalbn+0x9e>
 800a084:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a088:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a08c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a090:	ec45 4b10 	vmov	d0, r4, r5
 800a094:	bd70      	pop	{r4, r5, r6, pc}
 800a096:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a09a:	da08      	bge.n	800a0ae <scalbn+0xb6>
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	a10a      	add	r1, pc, #40	; (adr r1, 800a0c8 <scalbn+0xd0>)
 800a0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a4:	dac0      	bge.n	800a028 <scalbn+0x30>
 800a0a6:	a10e      	add	r1, pc, #56	; (adr r1, 800a0e0 <scalbn+0xe8>)
 800a0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ac:	e7bc      	b.n	800a028 <scalbn+0x30>
 800a0ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0b2:	3236      	adds	r2, #54	; 0x36
 800a0b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a0bc:	4620      	mov	r0, r4
 800a0be:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <scalbn+0xf8>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	e7d5      	b.n	800a070 <scalbn+0x78>
 800a0c4:	f3af 8000 	nop.w
 800a0c8:	c2f8f359 	.word	0xc2f8f359
 800a0cc:	01a56e1f 	.word	0x01a56e1f
 800a0d0:	8800759c 	.word	0x8800759c
 800a0d4:	7e37e43c 	.word	0x7e37e43c
 800a0d8:	8800759c 	.word	0x8800759c
 800a0dc:	fe37e43c 	.word	0xfe37e43c
 800a0e0:	c2f8f359 	.word	0xc2f8f359
 800a0e4:	81a56e1f 	.word	0x81a56e1f
 800a0e8:	43500000 	.word	0x43500000
 800a0ec:	ffff3cb0 	.word	0xffff3cb0
 800a0f0:	3c900000 	.word	0x3c900000
 800a0f4:	00000000 	.word	0x00000000

0800a0f8 <floor>:
 800a0f8:	ec51 0b10 	vmov	r0, r1, d0
 800a0fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800a108:	2e13      	cmp	r6, #19
 800a10a:	ee10 5a10 	vmov	r5, s0
 800a10e:	ee10 8a10 	vmov	r8, s0
 800a112:	460c      	mov	r4, r1
 800a114:	dc31      	bgt.n	800a17a <floor+0x82>
 800a116:	2e00      	cmp	r6, #0
 800a118:	da14      	bge.n	800a144 <floor+0x4c>
 800a11a:	a333      	add	r3, pc, #204	; (adr r3, 800a1e8 <floor+0xf0>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f7f6 f8ac 	bl	800027c <__adddf3>
 800a124:	2200      	movs	r2, #0
 800a126:	2300      	movs	r3, #0
 800a128:	f7f6 fcee 	bl	8000b08 <__aeabi_dcmpgt>
 800a12c:	b138      	cbz	r0, 800a13e <floor+0x46>
 800a12e:	2c00      	cmp	r4, #0
 800a130:	da53      	bge.n	800a1da <floor+0xe2>
 800a132:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a136:	4325      	orrs	r5, r4
 800a138:	d052      	beq.n	800a1e0 <floor+0xe8>
 800a13a:	4c2d      	ldr	r4, [pc, #180]	; (800a1f0 <floor+0xf8>)
 800a13c:	2500      	movs	r5, #0
 800a13e:	4621      	mov	r1, r4
 800a140:	4628      	mov	r0, r5
 800a142:	e024      	b.n	800a18e <floor+0x96>
 800a144:	4f2b      	ldr	r7, [pc, #172]	; (800a1f4 <floor+0xfc>)
 800a146:	4137      	asrs	r7, r6
 800a148:	ea01 0307 	and.w	r3, r1, r7
 800a14c:	4303      	orrs	r3, r0
 800a14e:	d01e      	beq.n	800a18e <floor+0x96>
 800a150:	a325      	add	r3, pc, #148	; (adr r3, 800a1e8 <floor+0xf0>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f7f6 f891 	bl	800027c <__adddf3>
 800a15a:	2200      	movs	r2, #0
 800a15c:	2300      	movs	r3, #0
 800a15e:	f7f6 fcd3 	bl	8000b08 <__aeabi_dcmpgt>
 800a162:	2800      	cmp	r0, #0
 800a164:	d0eb      	beq.n	800a13e <floor+0x46>
 800a166:	2c00      	cmp	r4, #0
 800a168:	bfbe      	ittt	lt
 800a16a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a16e:	4133      	asrlt	r3, r6
 800a170:	18e4      	addlt	r4, r4, r3
 800a172:	ea24 0407 	bic.w	r4, r4, r7
 800a176:	2500      	movs	r5, #0
 800a178:	e7e1      	b.n	800a13e <floor+0x46>
 800a17a:	2e33      	cmp	r6, #51	; 0x33
 800a17c:	dd0b      	ble.n	800a196 <floor+0x9e>
 800a17e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a182:	d104      	bne.n	800a18e <floor+0x96>
 800a184:	ee10 2a10 	vmov	r2, s0
 800a188:	460b      	mov	r3, r1
 800a18a:	f7f6 f877 	bl	800027c <__adddf3>
 800a18e:	ec41 0b10 	vmov	d0, r0, r1
 800a192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a196:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800a19a:	f04f 37ff 	mov.w	r7, #4294967295
 800a19e:	40df      	lsrs	r7, r3
 800a1a0:	4238      	tst	r0, r7
 800a1a2:	d0f4      	beq.n	800a18e <floor+0x96>
 800a1a4:	a310      	add	r3, pc, #64	; (adr r3, 800a1e8 <floor+0xf0>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	f7f6 f867 	bl	800027c <__adddf3>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f7f6 fca9 	bl	8000b08 <__aeabi_dcmpgt>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d0c1      	beq.n	800a13e <floor+0x46>
 800a1ba:	2c00      	cmp	r4, #0
 800a1bc:	da0a      	bge.n	800a1d4 <floor+0xdc>
 800a1be:	2e14      	cmp	r6, #20
 800a1c0:	d101      	bne.n	800a1c6 <floor+0xce>
 800a1c2:	3401      	adds	r4, #1
 800a1c4:	e006      	b.n	800a1d4 <floor+0xdc>
 800a1c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	40b3      	lsls	r3, r6
 800a1ce:	441d      	add	r5, r3
 800a1d0:	45a8      	cmp	r8, r5
 800a1d2:	d8f6      	bhi.n	800a1c2 <floor+0xca>
 800a1d4:	ea25 0507 	bic.w	r5, r5, r7
 800a1d8:	e7b1      	b.n	800a13e <floor+0x46>
 800a1da:	2500      	movs	r5, #0
 800a1dc:	462c      	mov	r4, r5
 800a1de:	e7ae      	b.n	800a13e <floor+0x46>
 800a1e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a1e4:	e7ab      	b.n	800a13e <floor+0x46>
 800a1e6:	bf00      	nop
 800a1e8:	8800759c 	.word	0x8800759c
 800a1ec:	7e37e43c 	.word	0x7e37e43c
 800a1f0:	bff00000 	.word	0xbff00000
 800a1f4:	000fffff 	.word	0x000fffff

0800a1f8 <_init>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr

=======
08009228 <__ieee754_rem_pio2>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	ed2d 8b02 	vpush	{d8}
 8009230:	ec55 4b10 	vmov	r4, r5, d0
 8009234:	4bca      	ldr	r3, [pc, #808]	; (8009560 <__ieee754_rem_pio2+0x338>)
 8009236:	b08b      	sub	sp, #44	; 0x2c
 8009238:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800923c:	4598      	cmp	r8, r3
 800923e:	4682      	mov	sl, r0
 8009240:	9502      	str	r5, [sp, #8]
 8009242:	dc08      	bgt.n	8009256 <__ieee754_rem_pio2+0x2e>
 8009244:	2200      	movs	r2, #0
 8009246:	2300      	movs	r3, #0
 8009248:	ed80 0b00 	vstr	d0, [r0]
 800924c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009250:	f04f 0b00 	mov.w	fp, #0
 8009254:	e028      	b.n	80092a8 <__ieee754_rem_pio2+0x80>
 8009256:	4bc3      	ldr	r3, [pc, #780]	; (8009564 <__ieee754_rem_pio2+0x33c>)
 8009258:	4598      	cmp	r8, r3
 800925a:	dc78      	bgt.n	800934e <__ieee754_rem_pio2+0x126>
 800925c:	9b02      	ldr	r3, [sp, #8]
 800925e:	4ec2      	ldr	r6, [pc, #776]	; (8009568 <__ieee754_rem_pio2+0x340>)
 8009260:	2b00      	cmp	r3, #0
 8009262:	ee10 0a10 	vmov	r0, s0
 8009266:	a3b0      	add	r3, pc, #704	; (adr r3, 8009528 <__ieee754_rem_pio2+0x300>)
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	4629      	mov	r1, r5
 800926e:	dd39      	ble.n	80092e4 <__ieee754_rem_pio2+0xbc>
 8009270:	f7f7 f802 	bl	8000278 <__aeabi_dsub>
 8009274:	45b0      	cmp	r8, r6
 8009276:	4604      	mov	r4, r0
 8009278:	460d      	mov	r5, r1
 800927a:	d01b      	beq.n	80092b4 <__ieee754_rem_pio2+0x8c>
 800927c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009530 <__ieee754_rem_pio2+0x308>)
 800927e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009282:	f7f6 fff9 	bl	8000278 <__aeabi_dsub>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	e9ca 2300 	strd	r2, r3, [sl]
 800928e:	4620      	mov	r0, r4
 8009290:	4629      	mov	r1, r5
 8009292:	f7f6 fff1 	bl	8000278 <__aeabi_dsub>
 8009296:	a3a6      	add	r3, pc, #664	; (adr r3, 8009530 <__ieee754_rem_pio2+0x308>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	f7f6 ffec 	bl	8000278 <__aeabi_dsub>
 80092a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092a4:	f04f 0b01 	mov.w	fp, #1
 80092a8:	4658      	mov	r0, fp
 80092aa:	b00b      	add	sp, #44	; 0x2c
 80092ac:	ecbd 8b02 	vpop	{d8}
 80092b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b4:	a3a0      	add	r3, pc, #640	; (adr r3, 8009538 <__ieee754_rem_pio2+0x310>)
 80092b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ba:	f7f6 ffdd 	bl	8000278 <__aeabi_dsub>
 80092be:	a3a0      	add	r3, pc, #640	; (adr r3, 8009540 <__ieee754_rem_pio2+0x318>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	4604      	mov	r4, r0
 80092c6:	460d      	mov	r5, r1
 80092c8:	f7f6 ffd6 	bl	8000278 <__aeabi_dsub>
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	e9ca 2300 	strd	r2, r3, [sl]
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	f7f6 ffce 	bl	8000278 <__aeabi_dsub>
 80092dc:	a398      	add	r3, pc, #608	; (adr r3, 8009540 <__ieee754_rem_pio2+0x318>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	e7db      	b.n	800929c <__ieee754_rem_pio2+0x74>
 80092e4:	f7f6 ffca 	bl	800027c <__adddf3>
 80092e8:	45b0      	cmp	r8, r6
 80092ea:	4604      	mov	r4, r0
 80092ec:	460d      	mov	r5, r1
 80092ee:	d016      	beq.n	800931e <__ieee754_rem_pio2+0xf6>
 80092f0:	a38f      	add	r3, pc, #572	; (adr r3, 8009530 <__ieee754_rem_pio2+0x308>)
 80092f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f6:	f7f6 ffc1 	bl	800027c <__adddf3>
 80092fa:	4602      	mov	r2, r0
 80092fc:	460b      	mov	r3, r1
 80092fe:	e9ca 2300 	strd	r2, r3, [sl]
 8009302:	4620      	mov	r0, r4
 8009304:	4629      	mov	r1, r5
 8009306:	f7f6 ffb7 	bl	8000278 <__aeabi_dsub>
 800930a:	a389      	add	r3, pc, #548	; (adr r3, 8009530 <__ieee754_rem_pio2+0x308>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f6 ffb4 	bl	800027c <__adddf3>
 8009314:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009318:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800931c:	e7c4      	b.n	80092a8 <__ieee754_rem_pio2+0x80>
 800931e:	a386      	add	r3, pc, #536	; (adr r3, 8009538 <__ieee754_rem_pio2+0x310>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7f6 ffaa 	bl	800027c <__adddf3>
 8009328:	a385      	add	r3, pc, #532	; (adr r3, 8009540 <__ieee754_rem_pio2+0x318>)
 800932a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932e:	4604      	mov	r4, r0
 8009330:	460d      	mov	r5, r1
 8009332:	f7f6 ffa3 	bl	800027c <__adddf3>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	e9ca 2300 	strd	r2, r3, [sl]
 800933e:	4620      	mov	r0, r4
 8009340:	4629      	mov	r1, r5
 8009342:	f7f6 ff99 	bl	8000278 <__aeabi_dsub>
 8009346:	a37e      	add	r3, pc, #504	; (adr r3, 8009540 <__ieee754_rem_pio2+0x318>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	e7e0      	b.n	8009310 <__ieee754_rem_pio2+0xe8>
 800934e:	4b87      	ldr	r3, [pc, #540]	; (800956c <__ieee754_rem_pio2+0x344>)
 8009350:	4598      	cmp	r8, r3
 8009352:	f300 80d8 	bgt.w	8009506 <__ieee754_rem_pio2+0x2de>
 8009356:	f000 fe45 	bl	8009fe4 <fabs>
 800935a:	ec55 4b10 	vmov	r4, r5, d0
 800935e:	ee10 0a10 	vmov	r0, s0
 8009362:	a379      	add	r3, pc, #484	; (adr r3, 8009548 <__ieee754_rem_pio2+0x320>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	4629      	mov	r1, r5
 800936a:	f7f7 f93d 	bl	80005e8 <__aeabi_dmul>
 800936e:	4b80      	ldr	r3, [pc, #512]	; (8009570 <__ieee754_rem_pio2+0x348>)
 8009370:	2200      	movs	r2, #0
 8009372:	f7f6 ff83 	bl	800027c <__adddf3>
 8009376:	f7f7 fbd1 	bl	8000b1c <__aeabi_d2iz>
 800937a:	4683      	mov	fp, r0
 800937c:	f7f7 f8ca 	bl	8000514 <__aeabi_i2d>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	ec43 2b18 	vmov	d8, r2, r3
 8009388:	a367      	add	r3, pc, #412	; (adr r3, 8009528 <__ieee754_rem_pio2+0x300>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f7f7 f92b 	bl	80005e8 <__aeabi_dmul>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4620      	mov	r0, r4
 8009398:	4629      	mov	r1, r5
 800939a:	f7f6 ff6d 	bl	8000278 <__aeabi_dsub>
 800939e:	a364      	add	r3, pc, #400	; (adr r3, 8009530 <__ieee754_rem_pio2+0x308>)
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	4606      	mov	r6, r0
 80093a6:	460f      	mov	r7, r1
 80093a8:	ec51 0b18 	vmov	r0, r1, d8
 80093ac:	f7f7 f91c 	bl	80005e8 <__aeabi_dmul>
 80093b0:	f1bb 0f1f 	cmp.w	fp, #31
 80093b4:	4604      	mov	r4, r0
 80093b6:	460d      	mov	r5, r1
 80093b8:	dc0d      	bgt.n	80093d6 <__ieee754_rem_pio2+0x1ae>
 80093ba:	4b6e      	ldr	r3, [pc, #440]	; (8009574 <__ieee754_rem_pio2+0x34c>)
 80093bc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	4543      	cmp	r3, r8
 80093c6:	d006      	beq.n	80093d6 <__ieee754_rem_pio2+0x1ae>
 80093c8:	4622      	mov	r2, r4
 80093ca:	462b      	mov	r3, r5
 80093cc:	4630      	mov	r0, r6
 80093ce:	4639      	mov	r1, r7
 80093d0:	f7f6 ff52 	bl	8000278 <__aeabi_dsub>
 80093d4:	e00e      	b.n	80093f4 <__ieee754_rem_pio2+0x1cc>
 80093d6:	462b      	mov	r3, r5
 80093d8:	4622      	mov	r2, r4
 80093da:	4630      	mov	r0, r6
 80093dc:	4639      	mov	r1, r7
 80093de:	f7f6 ff4b 	bl	8000278 <__aeabi_dsub>
 80093e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80093e6:	9303      	str	r3, [sp, #12]
 80093e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093ec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80093f0:	2b10      	cmp	r3, #16
 80093f2:	dc02      	bgt.n	80093fa <__ieee754_rem_pio2+0x1d2>
 80093f4:	e9ca 0100 	strd	r0, r1, [sl]
 80093f8:	e039      	b.n	800946e <__ieee754_rem_pio2+0x246>
 80093fa:	a34f      	add	r3, pc, #316	; (adr r3, 8009538 <__ieee754_rem_pio2+0x310>)
 80093fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009400:	ec51 0b18 	vmov	r0, r1, d8
 8009404:	f7f7 f8f0 	bl	80005e8 <__aeabi_dmul>
 8009408:	4604      	mov	r4, r0
 800940a:	460d      	mov	r5, r1
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4630      	mov	r0, r6
 8009412:	4639      	mov	r1, r7
 8009414:	f7f6 ff30 	bl	8000278 <__aeabi_dsub>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	4680      	mov	r8, r0
 800941e:	4689      	mov	r9, r1
 8009420:	4630      	mov	r0, r6
 8009422:	4639      	mov	r1, r7
 8009424:	f7f6 ff28 	bl	8000278 <__aeabi_dsub>
 8009428:	4622      	mov	r2, r4
 800942a:	462b      	mov	r3, r5
 800942c:	f7f6 ff24 	bl	8000278 <__aeabi_dsub>
 8009430:	a343      	add	r3, pc, #268	; (adr r3, 8009540 <__ieee754_rem_pio2+0x318>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	4604      	mov	r4, r0
 8009438:	460d      	mov	r5, r1
 800943a:	ec51 0b18 	vmov	r0, r1, d8
 800943e:	f7f7 f8d3 	bl	80005e8 <__aeabi_dmul>
 8009442:	4622      	mov	r2, r4
 8009444:	462b      	mov	r3, r5
 8009446:	f7f6 ff17 	bl	8000278 <__aeabi_dsub>
 800944a:	4602      	mov	r2, r0
 800944c:	460b      	mov	r3, r1
 800944e:	4604      	mov	r4, r0
 8009450:	460d      	mov	r5, r1
 8009452:	4640      	mov	r0, r8
 8009454:	4649      	mov	r1, r9
 8009456:	f7f6 ff0f 	bl	8000278 <__aeabi_dsub>
 800945a:	9a03      	ldr	r2, [sp, #12]
 800945c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009460:	1ad3      	subs	r3, r2, r3
 8009462:	2b31      	cmp	r3, #49	; 0x31
 8009464:	dc24      	bgt.n	80094b0 <__ieee754_rem_pio2+0x288>
 8009466:	e9ca 0100 	strd	r0, r1, [sl]
 800946a:	4646      	mov	r6, r8
 800946c:	464f      	mov	r7, r9
 800946e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009472:	4630      	mov	r0, r6
 8009474:	4642      	mov	r2, r8
 8009476:	464b      	mov	r3, r9
 8009478:	4639      	mov	r1, r7
 800947a:	f7f6 fefd 	bl	8000278 <__aeabi_dsub>
 800947e:	462b      	mov	r3, r5
 8009480:	4622      	mov	r2, r4
 8009482:	f7f6 fef9 	bl	8000278 <__aeabi_dsub>
 8009486:	9b02      	ldr	r3, [sp, #8]
 8009488:	2b00      	cmp	r3, #0
 800948a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800948e:	f6bf af0b 	bge.w	80092a8 <__ieee754_rem_pio2+0x80>
 8009492:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009496:	f8ca 3004 	str.w	r3, [sl, #4]
 800949a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800949e:	f8ca 8000 	str.w	r8, [sl]
 80094a2:	f8ca 0008 	str.w	r0, [sl, #8]
 80094a6:	f8ca 300c 	str.w	r3, [sl, #12]
 80094aa:	f1cb 0b00 	rsb	fp, fp, #0
 80094ae:	e6fb      	b.n	80092a8 <__ieee754_rem_pio2+0x80>
 80094b0:	a327      	add	r3, pc, #156	; (adr r3, 8009550 <__ieee754_rem_pio2+0x328>)
 80094b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b6:	ec51 0b18 	vmov	r0, r1, d8
 80094ba:	f7f7 f895 	bl	80005e8 <__aeabi_dmul>
 80094be:	4604      	mov	r4, r0
 80094c0:	460d      	mov	r5, r1
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f7f6 fed5 	bl	8000278 <__aeabi_dsub>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4606      	mov	r6, r0
 80094d4:	460f      	mov	r7, r1
 80094d6:	4640      	mov	r0, r8
 80094d8:	4649      	mov	r1, r9
 80094da:	f7f6 fecd 	bl	8000278 <__aeabi_dsub>
 80094de:	4622      	mov	r2, r4
 80094e0:	462b      	mov	r3, r5
 80094e2:	f7f6 fec9 	bl	8000278 <__aeabi_dsub>
 80094e6:	a31c      	add	r3, pc, #112	; (adr r3, 8009558 <__ieee754_rem_pio2+0x330>)
 80094e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ec:	4604      	mov	r4, r0
 80094ee:	460d      	mov	r5, r1
 80094f0:	ec51 0b18 	vmov	r0, r1, d8
 80094f4:	f7f7 f878 	bl	80005e8 <__aeabi_dmul>
 80094f8:	4622      	mov	r2, r4
 80094fa:	462b      	mov	r3, r5
 80094fc:	f7f6 febc 	bl	8000278 <__aeabi_dsub>
 8009500:	4604      	mov	r4, r0
 8009502:	460d      	mov	r5, r1
 8009504:	e760      	b.n	80093c8 <__ieee754_rem_pio2+0x1a0>
 8009506:	4b1c      	ldr	r3, [pc, #112]	; (8009578 <__ieee754_rem_pio2+0x350>)
 8009508:	4598      	cmp	r8, r3
 800950a:	dd37      	ble.n	800957c <__ieee754_rem_pio2+0x354>
 800950c:	ee10 2a10 	vmov	r2, s0
 8009510:	462b      	mov	r3, r5
 8009512:	4620      	mov	r0, r4
 8009514:	4629      	mov	r1, r5
 8009516:	f7f6 feaf 	bl	8000278 <__aeabi_dsub>
 800951a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800951e:	e9ca 0100 	strd	r0, r1, [sl]
 8009522:	e695      	b.n	8009250 <__ieee754_rem_pio2+0x28>
 8009524:	f3af 8000 	nop.w
 8009528:	54400000 	.word	0x54400000
 800952c:	3ff921fb 	.word	0x3ff921fb
 8009530:	1a626331 	.word	0x1a626331
 8009534:	3dd0b461 	.word	0x3dd0b461
 8009538:	1a600000 	.word	0x1a600000
 800953c:	3dd0b461 	.word	0x3dd0b461
 8009540:	2e037073 	.word	0x2e037073
 8009544:	3ba3198a 	.word	0x3ba3198a
 8009548:	6dc9c883 	.word	0x6dc9c883
 800954c:	3fe45f30 	.word	0x3fe45f30
 8009550:	2e000000 	.word	0x2e000000
 8009554:	3ba3198a 	.word	0x3ba3198a
 8009558:	252049c1 	.word	0x252049c1
 800955c:	397b839a 	.word	0x397b839a
 8009560:	3fe921fb 	.word	0x3fe921fb
 8009564:	4002d97b 	.word	0x4002d97b
 8009568:	3ff921fb 	.word	0x3ff921fb
 800956c:	413921fb 	.word	0x413921fb
 8009570:	3fe00000 	.word	0x3fe00000
 8009574:	0800a2e4 	.word	0x0800a2e4
 8009578:	7fefffff 	.word	0x7fefffff
 800957c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8009580:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8009584:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8009588:	4620      	mov	r0, r4
 800958a:	460d      	mov	r5, r1
 800958c:	f7f7 fac6 	bl	8000b1c <__aeabi_d2iz>
 8009590:	f7f6 ffc0 	bl	8000514 <__aeabi_i2d>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4620      	mov	r0, r4
 800959a:	4629      	mov	r1, r5
 800959c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095a0:	f7f6 fe6a 	bl	8000278 <__aeabi_dsub>
 80095a4:	4b21      	ldr	r3, [pc, #132]	; (800962c <__ieee754_rem_pio2+0x404>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	f7f7 f81e 	bl	80005e8 <__aeabi_dmul>
 80095ac:	460d      	mov	r5, r1
 80095ae:	4604      	mov	r4, r0
 80095b0:	f7f7 fab4 	bl	8000b1c <__aeabi_d2iz>
 80095b4:	f7f6 ffae 	bl	8000514 <__aeabi_i2d>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4620      	mov	r0, r4
 80095be:	4629      	mov	r1, r5
 80095c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095c4:	f7f6 fe58 	bl	8000278 <__aeabi_dsub>
 80095c8:	4b18      	ldr	r3, [pc, #96]	; (800962c <__ieee754_rem_pio2+0x404>)
 80095ca:	2200      	movs	r2, #0
 80095cc:	f7f7 f80c 	bl	80005e8 <__aeabi_dmul>
 80095d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80095d8:	2703      	movs	r7, #3
 80095da:	2400      	movs	r4, #0
 80095dc:	2500      	movs	r5, #0
 80095de:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80095e2:	4622      	mov	r2, r4
 80095e4:	462b      	mov	r3, r5
 80095e6:	46b9      	mov	r9, r7
 80095e8:	3f01      	subs	r7, #1
 80095ea:	f7f7 fa65 	bl	8000ab8 <__aeabi_dcmpeq>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d1f5      	bne.n	80095de <__ieee754_rem_pio2+0x3b6>
 80095f2:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <__ieee754_rem_pio2+0x408>)
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	2302      	movs	r3, #2
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	4632      	mov	r2, r6
 80095fc:	464b      	mov	r3, r9
 80095fe:	4651      	mov	r1, sl
 8009600:	a804      	add	r0, sp, #16
 8009602:	f000 f819 	bl	8009638 <__kernel_rem_pio2>
 8009606:	9b02      	ldr	r3, [sp, #8]
 8009608:	2b00      	cmp	r3, #0
 800960a:	4683      	mov	fp, r0
 800960c:	f6bf ae4c 	bge.w	80092a8 <__ieee754_rem_pio2+0x80>
 8009610:	e9da 2100 	ldrd	r2, r1, [sl]
 8009614:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009618:	e9ca 2300 	strd	r2, r3, [sl]
 800961c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009620:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009624:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009628:	e73f      	b.n	80094aa <__ieee754_rem_pio2+0x282>
 800962a:	bf00      	nop
 800962c:	41700000 	.word	0x41700000
 8009630:	0800a364 	.word	0x0800a364
 8009634:	00000000 	.word	0x00000000

08009638 <__kernel_rem_pio2>:
 8009638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963c:	ed2d 8b02 	vpush	{d8}
 8009640:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009644:	f112 0f14 	cmn.w	r2, #20
 8009648:	9306      	str	r3, [sp, #24]
 800964a:	9104      	str	r1, [sp, #16]
 800964c:	4bc2      	ldr	r3, [pc, #776]	; (8009958 <__kernel_rem_pio2+0x320>)
 800964e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8009650:	9009      	str	r0, [sp, #36]	; 0x24
 8009652:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800965e:	bfa8      	it	ge
 8009660:	1ed4      	subge	r4, r2, #3
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	bfb2      	itee	lt
 8009666:	2400      	movlt	r4, #0
 8009668:	2318      	movge	r3, #24
 800966a:	fb94 f4f3 	sdivge	r4, r4, r3
 800966e:	f06f 0317 	mvn.w	r3, #23
 8009672:	fb04 3303 	mla	r3, r4, r3, r3
 8009676:	eb03 0a02 	add.w	sl, r3, r2
 800967a:	9b00      	ldr	r3, [sp, #0]
 800967c:	9a05      	ldr	r2, [sp, #20]
 800967e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8009948 <__kernel_rem_pio2+0x310>
 8009682:	eb03 0802 	add.w	r8, r3, r2
 8009686:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8009688:	1aa7      	subs	r7, r4, r2
 800968a:	ae20      	add	r6, sp, #128	; 0x80
 800968c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009690:	2500      	movs	r5, #0
 8009692:	4545      	cmp	r5, r8
 8009694:	dd13      	ble.n	80096be <__kernel_rem_pio2+0x86>
 8009696:	9b06      	ldr	r3, [sp, #24]
 8009698:	aa20      	add	r2, sp, #128	; 0x80
 800969a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800969e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80096a2:	f04f 0800 	mov.w	r8, #0
 80096a6:	9b00      	ldr	r3, [sp, #0]
 80096a8:	4598      	cmp	r8, r3
 80096aa:	dc31      	bgt.n	8009710 <__kernel_rem_pio2+0xd8>
 80096ac:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8009948 <__kernel_rem_pio2+0x310>
 80096b0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80096b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096b8:	462f      	mov	r7, r5
 80096ba:	2600      	movs	r6, #0
 80096bc:	e01b      	b.n	80096f6 <__kernel_rem_pio2+0xbe>
 80096be:	42ef      	cmn	r7, r5
 80096c0:	d407      	bmi.n	80096d2 <__kernel_rem_pio2+0x9a>
 80096c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80096c6:	f7f6 ff25 	bl	8000514 <__aeabi_i2d>
 80096ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80096ce:	3501      	adds	r5, #1
 80096d0:	e7df      	b.n	8009692 <__kernel_rem_pio2+0x5a>
 80096d2:	ec51 0b18 	vmov	r0, r1, d8
 80096d6:	e7f8      	b.n	80096ca <__kernel_rem_pio2+0x92>
 80096d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80096e0:	f7f6 ff82 	bl	80005e8 <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ec:	f7f6 fdc6 	bl	800027c <__adddf3>
 80096f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096f4:	3601      	adds	r6, #1
 80096f6:	9b05      	ldr	r3, [sp, #20]
 80096f8:	429e      	cmp	r6, r3
 80096fa:	f1a7 0708 	sub.w	r7, r7, #8
 80096fe:	ddeb      	ble.n	80096d8 <__kernel_rem_pio2+0xa0>
 8009700:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009704:	f108 0801 	add.w	r8, r8, #1
 8009708:	ecab 7b02 	vstmia	fp!, {d7}
 800970c:	3508      	adds	r5, #8
 800970e:	e7ca      	b.n	80096a6 <__kernel_rem_pio2+0x6e>
 8009710:	9b00      	ldr	r3, [sp, #0]
 8009712:	aa0c      	add	r2, sp, #48	; 0x30
 8009714:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009718:	930b      	str	r3, [sp, #44]	; 0x2c
 800971a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800971c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009720:	9c00      	ldr	r4, [sp, #0]
 8009722:	930a      	str	r3, [sp, #40]	; 0x28
 8009724:	00e3      	lsls	r3, r4, #3
 8009726:	9308      	str	r3, [sp, #32]
 8009728:	ab98      	add	r3, sp, #608	; 0x260
 800972a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800972e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009732:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009736:	ab70      	add	r3, sp, #448	; 0x1c0
 8009738:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800973c:	46c3      	mov	fp, r8
 800973e:	46a1      	mov	r9, r4
 8009740:	f1b9 0f00 	cmp.w	r9, #0
 8009744:	f1a5 0508 	sub.w	r5, r5, #8
 8009748:	dc77      	bgt.n	800983a <__kernel_rem_pio2+0x202>
 800974a:	ec47 6b10 	vmov	d0, r6, r7
 800974e:	4650      	mov	r0, sl
 8009750:	f000 fc52 	bl	8009ff8 <scalbn>
 8009754:	ec57 6b10 	vmov	r6, r7, d0
 8009758:	2200      	movs	r2, #0
 800975a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800975e:	ee10 0a10 	vmov	r0, s0
 8009762:	4639      	mov	r1, r7
 8009764:	f7f6 ff40 	bl	80005e8 <__aeabi_dmul>
 8009768:	ec41 0b10 	vmov	d0, r0, r1
 800976c:	f000 fcc4 	bl	800a0f8 <floor>
 8009770:	4b7a      	ldr	r3, [pc, #488]	; (800995c <__kernel_rem_pio2+0x324>)
 8009772:	ec51 0b10 	vmov	r0, r1, d0
 8009776:	2200      	movs	r2, #0
 8009778:	f7f6 ff36 	bl	80005e8 <__aeabi_dmul>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4630      	mov	r0, r6
 8009782:	4639      	mov	r1, r7
 8009784:	f7f6 fd78 	bl	8000278 <__aeabi_dsub>
 8009788:	460f      	mov	r7, r1
 800978a:	4606      	mov	r6, r0
 800978c:	f7f7 f9c6 	bl	8000b1c <__aeabi_d2iz>
 8009790:	9002      	str	r0, [sp, #8]
 8009792:	f7f6 febf 	bl	8000514 <__aeabi_i2d>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4630      	mov	r0, r6
 800979c:	4639      	mov	r1, r7
 800979e:	f7f6 fd6b 	bl	8000278 <__aeabi_dsub>
 80097a2:	f1ba 0f00 	cmp.w	sl, #0
 80097a6:	4606      	mov	r6, r0
 80097a8:	460f      	mov	r7, r1
 80097aa:	dd6d      	ble.n	8009888 <__kernel_rem_pio2+0x250>
 80097ac:	1e61      	subs	r1, r4, #1
 80097ae:	ab0c      	add	r3, sp, #48	; 0x30
 80097b0:	9d02      	ldr	r5, [sp, #8]
 80097b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097b6:	f1ca 0018 	rsb	r0, sl, #24
 80097ba:	fa43 f200 	asr.w	r2, r3, r0
 80097be:	4415      	add	r5, r2
 80097c0:	4082      	lsls	r2, r0
 80097c2:	1a9b      	subs	r3, r3, r2
 80097c4:	aa0c      	add	r2, sp, #48	; 0x30
 80097c6:	9502      	str	r5, [sp, #8]
 80097c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80097cc:	f1ca 0217 	rsb	r2, sl, #23
 80097d0:	fa43 fb02 	asr.w	fp, r3, r2
 80097d4:	f1bb 0f00 	cmp.w	fp, #0
 80097d8:	dd65      	ble.n	80098a6 <__kernel_rem_pio2+0x26e>
 80097da:	9b02      	ldr	r3, [sp, #8]
 80097dc:	2200      	movs	r2, #0
 80097de:	3301      	adds	r3, #1
 80097e0:	9302      	str	r3, [sp, #8]
 80097e2:	4615      	mov	r5, r2
 80097e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80097e8:	4294      	cmp	r4, r2
 80097ea:	f300 809f 	bgt.w	800992c <__kernel_rem_pio2+0x2f4>
 80097ee:	f1ba 0f00 	cmp.w	sl, #0
 80097f2:	dd07      	ble.n	8009804 <__kernel_rem_pio2+0x1cc>
 80097f4:	f1ba 0f01 	cmp.w	sl, #1
 80097f8:	f000 80c1 	beq.w	800997e <__kernel_rem_pio2+0x346>
 80097fc:	f1ba 0f02 	cmp.w	sl, #2
 8009800:	f000 80c7 	beq.w	8009992 <__kernel_rem_pio2+0x35a>
 8009804:	f1bb 0f02 	cmp.w	fp, #2
 8009808:	d14d      	bne.n	80098a6 <__kernel_rem_pio2+0x26e>
 800980a:	4632      	mov	r2, r6
 800980c:	463b      	mov	r3, r7
 800980e:	4954      	ldr	r1, [pc, #336]	; (8009960 <__kernel_rem_pio2+0x328>)
 8009810:	2000      	movs	r0, #0
 8009812:	f7f6 fd31 	bl	8000278 <__aeabi_dsub>
 8009816:	4606      	mov	r6, r0
 8009818:	460f      	mov	r7, r1
 800981a:	2d00      	cmp	r5, #0
 800981c:	d043      	beq.n	80098a6 <__kernel_rem_pio2+0x26e>
 800981e:	4650      	mov	r0, sl
 8009820:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8009950 <__kernel_rem_pio2+0x318>
 8009824:	f000 fbe8 	bl	8009ff8 <scalbn>
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	ec53 2b10 	vmov	r2, r3, d0
 8009830:	f7f6 fd22 	bl	8000278 <__aeabi_dsub>
 8009834:	4606      	mov	r6, r0
 8009836:	460f      	mov	r7, r1
 8009838:	e035      	b.n	80098a6 <__kernel_rem_pio2+0x26e>
 800983a:	4b4a      	ldr	r3, [pc, #296]	; (8009964 <__kernel_rem_pio2+0x32c>)
 800983c:	2200      	movs	r2, #0
 800983e:	4630      	mov	r0, r6
 8009840:	4639      	mov	r1, r7
 8009842:	f7f6 fed1 	bl	80005e8 <__aeabi_dmul>
 8009846:	f7f7 f969 	bl	8000b1c <__aeabi_d2iz>
 800984a:	f7f6 fe63 	bl	8000514 <__aeabi_i2d>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	ec43 2b18 	vmov	d8, r2, r3
 8009856:	4b44      	ldr	r3, [pc, #272]	; (8009968 <__kernel_rem_pio2+0x330>)
 8009858:	2200      	movs	r2, #0
 800985a:	f7f6 fec5 	bl	80005e8 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4630      	mov	r0, r6
 8009864:	4639      	mov	r1, r7
 8009866:	f7f6 fd07 	bl	8000278 <__aeabi_dsub>
 800986a:	f7f7 f957 	bl	8000b1c <__aeabi_d2iz>
 800986e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009872:	f84b 0b04 	str.w	r0, [fp], #4
 8009876:	ec51 0b18 	vmov	r0, r1, d8
 800987a:	f7f6 fcff 	bl	800027c <__adddf3>
 800987e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	e75b      	b.n	8009740 <__kernel_rem_pio2+0x108>
 8009888:	d106      	bne.n	8009898 <__kernel_rem_pio2+0x260>
 800988a:	1e63      	subs	r3, r4, #1
 800988c:	aa0c      	add	r2, sp, #48	; 0x30
 800988e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009892:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8009896:	e79d      	b.n	80097d4 <__kernel_rem_pio2+0x19c>
 8009898:	4b34      	ldr	r3, [pc, #208]	; (800996c <__kernel_rem_pio2+0x334>)
 800989a:	2200      	movs	r2, #0
 800989c:	f7f7 f92a 	bl	8000af4 <__aeabi_dcmpge>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d140      	bne.n	8009926 <__kernel_rem_pio2+0x2ee>
 80098a4:	4683      	mov	fp, r0
 80098a6:	2200      	movs	r2, #0
 80098a8:	2300      	movs	r3, #0
 80098aa:	4630      	mov	r0, r6
 80098ac:	4639      	mov	r1, r7
 80098ae:	f7f7 f903 	bl	8000ab8 <__aeabi_dcmpeq>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f000 80c1 	beq.w	8009a3a <__kernel_rem_pio2+0x402>
 80098b8:	1e65      	subs	r5, r4, #1
 80098ba:	462b      	mov	r3, r5
 80098bc:	2200      	movs	r2, #0
 80098be:	9900      	ldr	r1, [sp, #0]
 80098c0:	428b      	cmp	r3, r1
 80098c2:	da6d      	bge.n	80099a0 <__kernel_rem_pio2+0x368>
 80098c4:	2a00      	cmp	r2, #0
 80098c6:	f000 808a 	beq.w	80099de <__kernel_rem_pio2+0x3a6>
 80098ca:	ab0c      	add	r3, sp, #48	; 0x30
 80098cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80098d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 80ae 	beq.w	8009a36 <__kernel_rem_pio2+0x3fe>
 80098da:	4650      	mov	r0, sl
 80098dc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009950 <__kernel_rem_pio2+0x318>
 80098e0:	f000 fb8a 	bl	8009ff8 <scalbn>
 80098e4:	1c6b      	adds	r3, r5, #1
 80098e6:	00da      	lsls	r2, r3, #3
 80098e8:	9205      	str	r2, [sp, #20]
 80098ea:	ec57 6b10 	vmov	r6, r7, d0
 80098ee:	aa70      	add	r2, sp, #448	; 0x1c0
 80098f0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8009964 <__kernel_rem_pio2+0x32c>
 80098f4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80098f8:	462c      	mov	r4, r5
 80098fa:	f04f 0800 	mov.w	r8, #0
 80098fe:	2c00      	cmp	r4, #0
 8009900:	f280 80d4 	bge.w	8009aac <__kernel_rem_pio2+0x474>
 8009904:	462c      	mov	r4, r5
 8009906:	2c00      	cmp	r4, #0
 8009908:	f2c0 8102 	blt.w	8009b10 <__kernel_rem_pio2+0x4d8>
 800990c:	4b18      	ldr	r3, [pc, #96]	; (8009970 <__kernel_rem_pio2+0x338>)
 800990e:	461e      	mov	r6, r3
 8009910:	ab70      	add	r3, sp, #448	; 0x1c0
 8009912:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8009916:	1b2b      	subs	r3, r5, r4
 8009918:	f04f 0900 	mov.w	r9, #0
 800991c:	f04f 0a00 	mov.w	sl, #0
 8009920:	2700      	movs	r7, #0
 8009922:	9306      	str	r3, [sp, #24]
 8009924:	e0e6      	b.n	8009af4 <__kernel_rem_pio2+0x4bc>
 8009926:	f04f 0b02 	mov.w	fp, #2
 800992a:	e756      	b.n	80097da <__kernel_rem_pio2+0x1a2>
 800992c:	f8d8 3000 	ldr.w	r3, [r8]
 8009930:	bb05      	cbnz	r5, 8009974 <__kernel_rem_pio2+0x33c>
 8009932:	b123      	cbz	r3, 800993e <__kernel_rem_pio2+0x306>
 8009934:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009938:	f8c8 3000 	str.w	r3, [r8]
 800993c:	2301      	movs	r3, #1
 800993e:	3201      	adds	r2, #1
 8009940:	f108 0804 	add.w	r8, r8, #4
 8009944:	461d      	mov	r5, r3
 8009946:	e74f      	b.n	80097e8 <__kernel_rem_pio2+0x1b0>
	...
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	0800a4b0 	.word	0x0800a4b0
 800995c:	40200000 	.word	0x40200000
 8009960:	3ff00000 	.word	0x3ff00000
 8009964:	3e700000 	.word	0x3e700000
 8009968:	41700000 	.word	0x41700000
 800996c:	3fe00000 	.word	0x3fe00000
 8009970:	0800a470 	.word	0x0800a470
 8009974:	1acb      	subs	r3, r1, r3
 8009976:	f8c8 3000 	str.w	r3, [r8]
 800997a:	462b      	mov	r3, r5
 800997c:	e7df      	b.n	800993e <__kernel_rem_pio2+0x306>
 800997e:	1e62      	subs	r2, r4, #1
 8009980:	ab0c      	add	r3, sp, #48	; 0x30
 8009982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009986:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800998a:	a90c      	add	r1, sp, #48	; 0x30
 800998c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009990:	e738      	b.n	8009804 <__kernel_rem_pio2+0x1cc>
 8009992:	1e62      	subs	r2, r4, #1
 8009994:	ab0c      	add	r3, sp, #48	; 0x30
 8009996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800999a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800999e:	e7f4      	b.n	800998a <__kernel_rem_pio2+0x352>
 80099a0:	a90c      	add	r1, sp, #48	; 0x30
 80099a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	430a      	orrs	r2, r1
 80099aa:	e788      	b.n	80098be <__kernel_rem_pio2+0x286>
 80099ac:	3301      	adds	r3, #1
 80099ae:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80099b2:	2900      	cmp	r1, #0
 80099b4:	d0fa      	beq.n	80099ac <__kernel_rem_pio2+0x374>
 80099b6:	9a08      	ldr	r2, [sp, #32]
 80099b8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80099bc:	446a      	add	r2, sp
 80099be:	3a98      	subs	r2, #152	; 0x98
 80099c0:	9208      	str	r2, [sp, #32]
 80099c2:	9a06      	ldr	r2, [sp, #24]
 80099c4:	a920      	add	r1, sp, #128	; 0x80
 80099c6:	18a2      	adds	r2, r4, r2
 80099c8:	18e3      	adds	r3, r4, r3
 80099ca:	f104 0801 	add.w	r8, r4, #1
 80099ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80099d2:	9302      	str	r3, [sp, #8]
 80099d4:	9b02      	ldr	r3, [sp, #8]
 80099d6:	4543      	cmp	r3, r8
 80099d8:	da04      	bge.n	80099e4 <__kernel_rem_pio2+0x3ac>
 80099da:	461c      	mov	r4, r3
 80099dc:	e6a2      	b.n	8009724 <__kernel_rem_pio2+0xec>
 80099de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099e0:	2301      	movs	r3, #1
 80099e2:	e7e4      	b.n	80099ae <__kernel_rem_pio2+0x376>
 80099e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80099ea:	f7f6 fd93 	bl	8000514 <__aeabi_i2d>
 80099ee:	e8e5 0102 	strd	r0, r1, [r5], #8
 80099f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f4:	46ab      	mov	fp, r5
 80099f6:	461c      	mov	r4, r3
 80099f8:	f04f 0900 	mov.w	r9, #0
 80099fc:	2600      	movs	r6, #0
 80099fe:	2700      	movs	r7, #0
 8009a00:	9b05      	ldr	r3, [sp, #20]
 8009a02:	4599      	cmp	r9, r3
 8009a04:	dd06      	ble.n	8009a14 <__kernel_rem_pio2+0x3dc>
 8009a06:	9b08      	ldr	r3, [sp, #32]
 8009a08:	e8e3 6702 	strd	r6, r7, [r3], #8
 8009a0c:	f108 0801 	add.w	r8, r8, #1
 8009a10:	9308      	str	r3, [sp, #32]
 8009a12:	e7df      	b.n	80099d4 <__kernel_rem_pio2+0x39c>
 8009a14:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009a18:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009a1c:	f7f6 fde4 	bl	80005e8 <__aeabi_dmul>
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f6 fc28 	bl	800027c <__adddf3>
 8009a2c:	f109 0901 	add.w	r9, r9, #1
 8009a30:	4606      	mov	r6, r0
 8009a32:	460f      	mov	r7, r1
 8009a34:	e7e4      	b.n	8009a00 <__kernel_rem_pio2+0x3c8>
 8009a36:	3d01      	subs	r5, #1
 8009a38:	e747      	b.n	80098ca <__kernel_rem_pio2+0x292>
 8009a3a:	ec47 6b10 	vmov	d0, r6, r7
 8009a3e:	f1ca 0000 	rsb	r0, sl, #0
 8009a42:	f000 fad9 	bl	8009ff8 <scalbn>
 8009a46:	ec57 6b10 	vmov	r6, r7, d0
 8009a4a:	4ba0      	ldr	r3, [pc, #640]	; (8009ccc <__kernel_rem_pio2+0x694>)
 8009a4c:	ee10 0a10 	vmov	r0, s0
 8009a50:	2200      	movs	r2, #0
 8009a52:	4639      	mov	r1, r7
 8009a54:	f7f7 f84e 	bl	8000af4 <__aeabi_dcmpge>
 8009a58:	b1f8      	cbz	r0, 8009a9a <__kernel_rem_pio2+0x462>
 8009a5a:	4b9d      	ldr	r3, [pc, #628]	; (8009cd0 <__kernel_rem_pio2+0x698>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	4630      	mov	r0, r6
 8009a60:	4639      	mov	r1, r7
 8009a62:	f7f6 fdc1 	bl	80005e8 <__aeabi_dmul>
 8009a66:	f7f7 f859 	bl	8000b1c <__aeabi_d2iz>
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	f7f6 fd52 	bl	8000514 <__aeabi_i2d>
 8009a70:	4b96      	ldr	r3, [pc, #600]	; (8009ccc <__kernel_rem_pio2+0x694>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	f7f6 fdb8 	bl	80005e8 <__aeabi_dmul>
 8009a78:	460b      	mov	r3, r1
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f7f6 fbfa 	bl	8000278 <__aeabi_dsub>
 8009a84:	f7f7 f84a 	bl	8000b1c <__aeabi_d2iz>
 8009a88:	1c65      	adds	r5, r4, #1
 8009a8a:	ab0c      	add	r3, sp, #48	; 0x30
 8009a8c:	f10a 0a18 	add.w	sl, sl, #24
 8009a90:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a94:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009a98:	e71f      	b.n	80098da <__kernel_rem_pio2+0x2a2>
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	f7f7 f83d 	bl	8000b1c <__aeabi_d2iz>
 8009aa2:	ab0c      	add	r3, sp, #48	; 0x30
 8009aa4:	4625      	mov	r5, r4
 8009aa6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009aaa:	e716      	b.n	80098da <__kernel_rem_pio2+0x2a2>
 8009aac:	ab0c      	add	r3, sp, #48	; 0x30
 8009aae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009ab2:	f7f6 fd2f 	bl	8000514 <__aeabi_i2d>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	463b      	mov	r3, r7
 8009aba:	f7f6 fd95 	bl	80005e8 <__aeabi_dmul>
 8009abe:	4642      	mov	r2, r8
 8009ac0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009ac4:	464b      	mov	r3, r9
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	4639      	mov	r1, r7
 8009aca:	f7f6 fd8d 	bl	80005e8 <__aeabi_dmul>
 8009ace:	3c01      	subs	r4, #1
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	460f      	mov	r7, r1
 8009ad4:	e713      	b.n	80098fe <__kernel_rem_pio2+0x2c6>
 8009ad6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009ada:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009ade:	f7f6 fd83 	bl	80005e8 <__aeabi_dmul>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	4648      	mov	r0, r9
 8009ae8:	4651      	mov	r1, sl
 8009aea:	f7f6 fbc7 	bl	800027c <__adddf3>
 8009aee:	3701      	adds	r7, #1
 8009af0:	4681      	mov	r9, r0
 8009af2:	468a      	mov	sl, r1
 8009af4:	9b00      	ldr	r3, [sp, #0]
 8009af6:	429f      	cmp	r7, r3
 8009af8:	dc02      	bgt.n	8009b00 <__kernel_rem_pio2+0x4c8>
 8009afa:	9b06      	ldr	r3, [sp, #24]
 8009afc:	429f      	cmp	r7, r3
 8009afe:	ddea      	ble.n	8009ad6 <__kernel_rem_pio2+0x49e>
 8009b00:	9a06      	ldr	r2, [sp, #24]
 8009b02:	ab48      	add	r3, sp, #288	; 0x120
 8009b04:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009b08:	e9c6 9a00 	strd	r9, sl, [r6]
 8009b0c:	3c01      	subs	r4, #1
 8009b0e:	e6fa      	b.n	8009906 <__kernel_rem_pio2+0x2ce>
 8009b10:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	dc0b      	bgt.n	8009b2e <__kernel_rem_pio2+0x4f6>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dc39      	bgt.n	8009b8e <__kernel_rem_pio2+0x556>
 8009b1a:	d05d      	beq.n	8009bd8 <__kernel_rem_pio2+0x5a0>
 8009b1c:	9b02      	ldr	r3, [sp, #8]
 8009b1e:	f003 0007 	and.w	r0, r3, #7
 8009b22:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009b26:	ecbd 8b02 	vpop	{d8}
 8009b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b2e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d1f3      	bne.n	8009b1c <__kernel_rem_pio2+0x4e4>
 8009b34:	9b05      	ldr	r3, [sp, #20]
 8009b36:	9500      	str	r5, [sp, #0]
 8009b38:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009b3c:	eb0d 0403 	add.w	r4, sp, r3
 8009b40:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009b44:	46a2      	mov	sl, r4
 8009b46:	9b00      	ldr	r3, [sp, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	f1aa 0a08 	sub.w	sl, sl, #8
 8009b4e:	dc69      	bgt.n	8009c24 <__kernel_rem_pio2+0x5ec>
 8009b50:	46aa      	mov	sl, r5
 8009b52:	f1ba 0f01 	cmp.w	sl, #1
 8009b56:	f1a4 0408 	sub.w	r4, r4, #8
 8009b5a:	f300 8083 	bgt.w	8009c64 <__kernel_rem_pio2+0x62c>
 8009b5e:	9c05      	ldr	r4, [sp, #20]
 8009b60:	ab48      	add	r3, sp, #288	; 0x120
 8009b62:	441c      	add	r4, r3
 8009b64:	2000      	movs	r0, #0
 8009b66:	2100      	movs	r1, #0
 8009b68:	2d01      	cmp	r5, #1
 8009b6a:	f300 809a 	bgt.w	8009ca2 <__kernel_rem_pio2+0x66a>
 8009b6e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009b72:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009b76:	f1bb 0f00 	cmp.w	fp, #0
 8009b7a:	f040 8098 	bne.w	8009cae <__kernel_rem_pio2+0x676>
 8009b7e:	9b04      	ldr	r3, [sp, #16]
 8009b80:	e9c3 7800 	strd	r7, r8, [r3]
 8009b84:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009b88:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009b8c:	e7c6      	b.n	8009b1c <__kernel_rem_pio2+0x4e4>
 8009b8e:	9e05      	ldr	r6, [sp, #20]
 8009b90:	ab48      	add	r3, sp, #288	; 0x120
 8009b92:	441e      	add	r6, r3
 8009b94:	462c      	mov	r4, r5
 8009b96:	2000      	movs	r0, #0
 8009b98:	2100      	movs	r1, #0
 8009b9a:	2c00      	cmp	r4, #0
 8009b9c:	da33      	bge.n	8009c06 <__kernel_rem_pio2+0x5ce>
 8009b9e:	f1bb 0f00 	cmp.w	fp, #0
 8009ba2:	d036      	beq.n	8009c12 <__kernel_rem_pio2+0x5da>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009baa:	9c04      	ldr	r4, [sp, #16]
 8009bac:	e9c4 2300 	strd	r2, r3, [r4]
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009bb8:	f7f6 fb5e 	bl	8000278 <__aeabi_dsub>
 8009bbc:	ae4a      	add	r6, sp, #296	; 0x128
 8009bbe:	2401      	movs	r4, #1
 8009bc0:	42a5      	cmp	r5, r4
 8009bc2:	da29      	bge.n	8009c18 <__kernel_rem_pio2+0x5e0>
 8009bc4:	f1bb 0f00 	cmp.w	fp, #0
 8009bc8:	d002      	beq.n	8009bd0 <__kernel_rem_pio2+0x598>
 8009bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bce:	4619      	mov	r1, r3
 8009bd0:	9b04      	ldr	r3, [sp, #16]
 8009bd2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009bd6:	e7a1      	b.n	8009b1c <__kernel_rem_pio2+0x4e4>
 8009bd8:	9c05      	ldr	r4, [sp, #20]
 8009bda:	ab48      	add	r3, sp, #288	; 0x120
 8009bdc:	441c      	add	r4, r3
 8009bde:	2000      	movs	r0, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	2d00      	cmp	r5, #0
 8009be4:	da09      	bge.n	8009bfa <__kernel_rem_pio2+0x5c2>
 8009be6:	f1bb 0f00 	cmp.w	fp, #0
 8009bea:	d002      	beq.n	8009bf2 <__kernel_rem_pio2+0x5ba>
 8009bec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	9b04      	ldr	r3, [sp, #16]
 8009bf4:	e9c3 0100 	strd	r0, r1, [r3]
 8009bf8:	e790      	b.n	8009b1c <__kernel_rem_pio2+0x4e4>
 8009bfa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009bfe:	f7f6 fb3d 	bl	800027c <__adddf3>
 8009c02:	3d01      	subs	r5, #1
 8009c04:	e7ed      	b.n	8009be2 <__kernel_rem_pio2+0x5aa>
 8009c06:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009c0a:	f7f6 fb37 	bl	800027c <__adddf3>
 8009c0e:	3c01      	subs	r4, #1
 8009c10:	e7c3      	b.n	8009b9a <__kernel_rem_pio2+0x562>
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	e7c8      	b.n	8009baa <__kernel_rem_pio2+0x572>
 8009c18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009c1c:	f7f6 fb2e 	bl	800027c <__adddf3>
 8009c20:	3401      	adds	r4, #1
 8009c22:	e7cd      	b.n	8009bc0 <__kernel_rem_pio2+0x588>
 8009c24:	e9da 8900 	ldrd	r8, r9, [sl]
 8009c28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009c2c:	9b00      	ldr	r3, [sp, #0]
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	4632      	mov	r2, r6
 8009c34:	463b      	mov	r3, r7
 8009c36:	4640      	mov	r0, r8
 8009c38:	4649      	mov	r1, r9
 8009c3a:	f7f6 fb1f 	bl	800027c <__adddf3>
 8009c3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c42:	4602      	mov	r2, r0
 8009c44:	460b      	mov	r3, r1
 8009c46:	4640      	mov	r0, r8
 8009c48:	4649      	mov	r1, r9
 8009c4a:	f7f6 fb15 	bl	8000278 <__aeabi_dsub>
 8009c4e:	4632      	mov	r2, r6
 8009c50:	463b      	mov	r3, r7
 8009c52:	f7f6 fb13 	bl	800027c <__adddf3>
 8009c56:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009c5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009c5e:	ed8a 7b00 	vstr	d7, [sl]
 8009c62:	e770      	b.n	8009b46 <__kernel_rem_pio2+0x50e>
 8009c64:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009c68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009c6c:	4640      	mov	r0, r8
 8009c6e:	4632      	mov	r2, r6
 8009c70:	463b      	mov	r3, r7
 8009c72:	4649      	mov	r1, r9
 8009c74:	f7f6 fb02 	bl	800027c <__adddf3>
 8009c78:	e9cd 0100 	strd	r0, r1, [sp]
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4640      	mov	r0, r8
 8009c82:	4649      	mov	r1, r9
 8009c84:	f7f6 faf8 	bl	8000278 <__aeabi_dsub>
 8009c88:	4632      	mov	r2, r6
 8009c8a:	463b      	mov	r3, r7
 8009c8c:	f7f6 faf6 	bl	800027c <__adddf3>
 8009c90:	ed9d 7b00 	vldr	d7, [sp]
 8009c94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c98:	ed84 7b00 	vstr	d7, [r4]
 8009c9c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009ca0:	e757      	b.n	8009b52 <__kernel_rem_pio2+0x51a>
 8009ca2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009ca6:	f7f6 fae9 	bl	800027c <__adddf3>
 8009caa:	3d01      	subs	r5, #1
 8009cac:	e75c      	b.n	8009b68 <__kernel_rem_pio2+0x530>
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	9a04      	ldr	r2, [sp, #16]
 8009cb2:	601f      	str	r7, [r3, #0]
 8009cb4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009cb8:	605c      	str	r4, [r3, #4]
 8009cba:	609d      	str	r5, [r3, #8]
 8009cbc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009cc0:	60d3      	str	r3, [r2, #12]
 8009cc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cc6:	6110      	str	r0, [r2, #16]
 8009cc8:	6153      	str	r3, [r2, #20]
 8009cca:	e727      	b.n	8009b1c <__kernel_rem_pio2+0x4e4>
 8009ccc:	41700000 	.word	0x41700000
 8009cd0:	3e700000 	.word	0x3e700000
 8009cd4:	00000000 	.word	0x00000000

08009cd8 <__kernel_cos>:
 8009cd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cdc:	ec57 6b10 	vmov	r6, r7, d0
 8009ce0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009ce4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009ce8:	ed8d 1b00 	vstr	d1, [sp]
 8009cec:	da07      	bge.n	8009cfe <__kernel_cos+0x26>
 8009cee:	ee10 0a10 	vmov	r0, s0
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	f7f6 ff12 	bl	8000b1c <__aeabi_d2iz>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	f000 8088 	beq.w	8009e0e <__kernel_cos+0x136>
 8009cfe:	4632      	mov	r2, r6
 8009d00:	463b      	mov	r3, r7
 8009d02:	4630      	mov	r0, r6
 8009d04:	4639      	mov	r1, r7
 8009d06:	f7f6 fc6f 	bl	80005e8 <__aeabi_dmul>
 8009d0a:	4b51      	ldr	r3, [pc, #324]	; (8009e50 <__kernel_cos+0x178>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	4604      	mov	r4, r0
 8009d10:	460d      	mov	r5, r1
 8009d12:	f7f6 fc69 	bl	80005e8 <__aeabi_dmul>
 8009d16:	a340      	add	r3, pc, #256	; (adr r3, 8009e18 <__kernel_cos+0x140>)
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	468b      	mov	fp, r1
 8009d20:	4620      	mov	r0, r4
 8009d22:	4629      	mov	r1, r5
 8009d24:	f7f6 fc60 	bl	80005e8 <__aeabi_dmul>
 8009d28:	a33d      	add	r3, pc, #244	; (adr r3, 8009e20 <__kernel_cos+0x148>)
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f7f6 faa5 	bl	800027c <__adddf3>
 8009d32:	4622      	mov	r2, r4
 8009d34:	462b      	mov	r3, r5
 8009d36:	f7f6 fc57 	bl	80005e8 <__aeabi_dmul>
 8009d3a:	a33b      	add	r3, pc, #236	; (adr r3, 8009e28 <__kernel_cos+0x150>)
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f7f6 fa9a 	bl	8000278 <__aeabi_dsub>
 8009d44:	4622      	mov	r2, r4
 8009d46:	462b      	mov	r3, r5
 8009d48:	f7f6 fc4e 	bl	80005e8 <__aeabi_dmul>
 8009d4c:	a338      	add	r3, pc, #224	; (adr r3, 8009e30 <__kernel_cos+0x158>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fa93 	bl	800027c <__adddf3>
 8009d56:	4622      	mov	r2, r4
 8009d58:	462b      	mov	r3, r5
 8009d5a:	f7f6 fc45 	bl	80005e8 <__aeabi_dmul>
 8009d5e:	a336      	add	r3, pc, #216	; (adr r3, 8009e38 <__kernel_cos+0x160>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fa88 	bl	8000278 <__aeabi_dsub>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	462b      	mov	r3, r5
 8009d6c:	f7f6 fc3c 	bl	80005e8 <__aeabi_dmul>
 8009d70:	a333      	add	r3, pc, #204	; (adr r3, 8009e40 <__kernel_cos+0x168>)
 8009d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d76:	f7f6 fa81 	bl	800027c <__adddf3>
 8009d7a:	4622      	mov	r2, r4
 8009d7c:	462b      	mov	r3, r5
 8009d7e:	f7f6 fc33 	bl	80005e8 <__aeabi_dmul>
 8009d82:	4622      	mov	r2, r4
 8009d84:	462b      	mov	r3, r5
 8009d86:	f7f6 fc2f 	bl	80005e8 <__aeabi_dmul>
 8009d8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d8e:	4604      	mov	r4, r0
 8009d90:	460d      	mov	r5, r1
 8009d92:	4630      	mov	r0, r6
 8009d94:	4639      	mov	r1, r7
 8009d96:	f7f6 fc27 	bl	80005e8 <__aeabi_dmul>
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	4629      	mov	r1, r5
 8009da0:	4620      	mov	r0, r4
 8009da2:	f7f6 fa69 	bl	8000278 <__aeabi_dsub>
 8009da6:	4b2b      	ldr	r3, [pc, #172]	; (8009e54 <__kernel_cos+0x17c>)
 8009da8:	4598      	cmp	r8, r3
 8009daa:	4606      	mov	r6, r0
 8009dac:	460f      	mov	r7, r1
 8009dae:	dc10      	bgt.n	8009dd2 <__kernel_cos+0xfa>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4650      	mov	r0, sl
 8009db6:	4659      	mov	r1, fp
 8009db8:	f7f6 fa5e 	bl	8000278 <__aeabi_dsub>
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4926      	ldr	r1, [pc, #152]	; (8009e58 <__kernel_cos+0x180>)
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f7f6 fa58 	bl	8000278 <__aeabi_dsub>
 8009dc8:	ec41 0b10 	vmov	d0, r0, r1
 8009dcc:	b003      	add	sp, #12
 8009dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd2:	4b22      	ldr	r3, [pc, #136]	; (8009e5c <__kernel_cos+0x184>)
 8009dd4:	4920      	ldr	r1, [pc, #128]	; (8009e58 <__kernel_cos+0x180>)
 8009dd6:	4598      	cmp	r8, r3
 8009dd8:	bfcc      	ite	gt
 8009dda:	4d21      	ldrgt	r5, [pc, #132]	; (8009e60 <__kernel_cos+0x188>)
 8009ddc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009de0:	2400      	movs	r4, #0
 8009de2:	4622      	mov	r2, r4
 8009de4:	462b      	mov	r3, r5
 8009de6:	2000      	movs	r0, #0
 8009de8:	f7f6 fa46 	bl	8000278 <__aeabi_dsub>
 8009dec:	4622      	mov	r2, r4
 8009dee:	4680      	mov	r8, r0
 8009df0:	4689      	mov	r9, r1
 8009df2:	462b      	mov	r3, r5
 8009df4:	4650      	mov	r0, sl
 8009df6:	4659      	mov	r1, fp
 8009df8:	f7f6 fa3e 	bl	8000278 <__aeabi_dsub>
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	463b      	mov	r3, r7
 8009e00:	f7f6 fa3a 	bl	8000278 <__aeabi_dsub>
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	4640      	mov	r0, r8
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	e7da      	b.n	8009dc4 <__kernel_cos+0xec>
 8009e0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009e48 <__kernel_cos+0x170>
 8009e12:	e7db      	b.n	8009dcc <__kernel_cos+0xf4>
 8009e14:	f3af 8000 	nop.w
 8009e18:	be8838d4 	.word	0xbe8838d4
 8009e1c:	bda8fae9 	.word	0xbda8fae9
 8009e20:	bdb4b1c4 	.word	0xbdb4b1c4
 8009e24:	3e21ee9e 	.word	0x3e21ee9e
 8009e28:	809c52ad 	.word	0x809c52ad
 8009e2c:	3e927e4f 	.word	0x3e927e4f
 8009e30:	19cb1590 	.word	0x19cb1590
 8009e34:	3efa01a0 	.word	0x3efa01a0
 8009e38:	16c15177 	.word	0x16c15177
 8009e3c:	3f56c16c 	.word	0x3f56c16c
 8009e40:	5555554c 	.word	0x5555554c
 8009e44:	3fa55555 	.word	0x3fa55555
 8009e48:	00000000 	.word	0x00000000
 8009e4c:	3ff00000 	.word	0x3ff00000
 8009e50:	3fe00000 	.word	0x3fe00000
 8009e54:	3fd33332 	.word	0x3fd33332
 8009e58:	3ff00000 	.word	0x3ff00000
 8009e5c:	3fe90000 	.word	0x3fe90000
 8009e60:	3fd20000 	.word	0x3fd20000
 8009e64:	00000000 	.word	0x00000000

08009e68 <__kernel_sin>:
 8009e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	ed2d 8b04 	vpush	{d8-d9}
 8009e70:	eeb0 8a41 	vmov.f32	s16, s2
 8009e74:	eef0 8a61 	vmov.f32	s17, s3
 8009e78:	ec55 4b10 	vmov	r4, r5, d0
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009e82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009e86:	9001      	str	r0, [sp, #4]
 8009e88:	da06      	bge.n	8009e98 <__kernel_sin+0x30>
 8009e8a:	ee10 0a10 	vmov	r0, s0
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f7f6 fe44 	bl	8000b1c <__aeabi_d2iz>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d051      	beq.n	8009f3c <__kernel_sin+0xd4>
 8009e98:	4622      	mov	r2, r4
 8009e9a:	462b      	mov	r3, r5
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	f7f6 fba2 	bl	80005e8 <__aeabi_dmul>
 8009ea4:	4682      	mov	sl, r0
 8009ea6:	468b      	mov	fp, r1
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	460b      	mov	r3, r1
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fb9a 	bl	80005e8 <__aeabi_dmul>
 8009eb4:	a341      	add	r3, pc, #260	; (adr r3, 8009fbc <__kernel_sin+0x154>)
 8009eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eba:	4680      	mov	r8, r0
 8009ebc:	4689      	mov	r9, r1
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	f7f6 fb91 	bl	80005e8 <__aeabi_dmul>
 8009ec6:	a33f      	add	r3, pc, #252	; (adr r3, 8009fc4 <__kernel_sin+0x15c>)
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f7f6 f9d4 	bl	8000278 <__aeabi_dsub>
 8009ed0:	4652      	mov	r2, sl
 8009ed2:	465b      	mov	r3, fp
 8009ed4:	f7f6 fb88 	bl	80005e8 <__aeabi_dmul>
 8009ed8:	a33c      	add	r3, pc, #240	; (adr r3, 8009fcc <__kernel_sin+0x164>)
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	f7f6 f9cd 	bl	800027c <__adddf3>
 8009ee2:	4652      	mov	r2, sl
 8009ee4:	465b      	mov	r3, fp
 8009ee6:	f7f6 fb7f 	bl	80005e8 <__aeabi_dmul>
 8009eea:	a33a      	add	r3, pc, #232	; (adr r3, 8009fd4 <__kernel_sin+0x16c>)
 8009eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef0:	f7f6 f9c2 	bl	8000278 <__aeabi_dsub>
 8009ef4:	4652      	mov	r2, sl
 8009ef6:	465b      	mov	r3, fp
 8009ef8:	f7f6 fb76 	bl	80005e8 <__aeabi_dmul>
 8009efc:	a337      	add	r3, pc, #220	; (adr r3, 8009fdc <__kernel_sin+0x174>)
 8009efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f02:	f7f6 f9bb 	bl	800027c <__adddf3>
 8009f06:	9b01      	ldr	r3, [sp, #4]
 8009f08:	4606      	mov	r6, r0
 8009f0a:	460f      	mov	r7, r1
 8009f0c:	b9eb      	cbnz	r3, 8009f4a <__kernel_sin+0xe2>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4650      	mov	r0, sl
 8009f14:	4659      	mov	r1, fp
 8009f16:	f7f6 fb67 	bl	80005e8 <__aeabi_dmul>
 8009f1a:	a325      	add	r3, pc, #148	; (adr r3, 8009fb0 <__kernel_sin+0x148>)
 8009f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f20:	f7f6 f9aa 	bl	8000278 <__aeabi_dsub>
 8009f24:	4642      	mov	r2, r8
 8009f26:	464b      	mov	r3, r9
 8009f28:	f7f6 fb5e 	bl	80005e8 <__aeabi_dmul>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 f9a2 	bl	800027c <__adddf3>
 8009f38:	4604      	mov	r4, r0
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	ec45 4b10 	vmov	d0, r4, r5
 8009f40:	b003      	add	sp, #12
 8009f42:	ecbd 8b04 	vpop	{d8-d9}
 8009f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4a:	4b1b      	ldr	r3, [pc, #108]	; (8009fb8 <__kernel_sin+0x150>)
 8009f4c:	ec51 0b18 	vmov	r0, r1, d8
 8009f50:	2200      	movs	r2, #0
 8009f52:	f7f6 fb49 	bl	80005e8 <__aeabi_dmul>
 8009f56:	4632      	mov	r2, r6
 8009f58:	ec41 0b19 	vmov	d9, r0, r1
 8009f5c:	463b      	mov	r3, r7
 8009f5e:	4640      	mov	r0, r8
 8009f60:	4649      	mov	r1, r9
 8009f62:	f7f6 fb41 	bl	80005e8 <__aeabi_dmul>
 8009f66:	4602      	mov	r2, r0
 8009f68:	460b      	mov	r3, r1
 8009f6a:	ec51 0b19 	vmov	r0, r1, d9
 8009f6e:	f7f6 f983 	bl	8000278 <__aeabi_dsub>
 8009f72:	4652      	mov	r2, sl
 8009f74:	465b      	mov	r3, fp
 8009f76:	f7f6 fb37 	bl	80005e8 <__aeabi_dmul>
 8009f7a:	ec53 2b18 	vmov	r2, r3, d8
 8009f7e:	f7f6 f97b 	bl	8000278 <__aeabi_dsub>
 8009f82:	a30b      	add	r3, pc, #44	; (adr r3, 8009fb0 <__kernel_sin+0x148>)
 8009f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f88:	4606      	mov	r6, r0
 8009f8a:	460f      	mov	r7, r1
 8009f8c:	4640      	mov	r0, r8
 8009f8e:	4649      	mov	r1, r9
 8009f90:	f7f6 fb2a 	bl	80005e8 <__aeabi_dmul>
 8009f94:	4602      	mov	r2, r0
 8009f96:	460b      	mov	r3, r1
 8009f98:	4630      	mov	r0, r6
 8009f9a:	4639      	mov	r1, r7
 8009f9c:	f7f6 f96e 	bl	800027c <__adddf3>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4620      	mov	r0, r4
 8009fa6:	4629      	mov	r1, r5
 8009fa8:	f7f6 f966 	bl	8000278 <__aeabi_dsub>
 8009fac:	e7c4      	b.n	8009f38 <__kernel_sin+0xd0>
 8009fae:	bf00      	nop
 8009fb0:	55555549 	.word	0x55555549
 8009fb4:	3fc55555 	.word	0x3fc55555
 8009fb8:	3fe00000 	.word	0x3fe00000
 8009fbc:	5acfd57c 	.word	0x5acfd57c
 8009fc0:	3de5d93a 	.word	0x3de5d93a
 8009fc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8009fc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8009fcc:	57b1fe7d 	.word	0x57b1fe7d
 8009fd0:	3ec71de3 	.word	0x3ec71de3
 8009fd4:	19c161d5 	.word	0x19c161d5
 8009fd8:	3f2a01a0 	.word	0x3f2a01a0
 8009fdc:	1110f8a6 	.word	0x1110f8a6
 8009fe0:	3f811111 	.word	0x3f811111

08009fe4 <fabs>:
 8009fe4:	ec51 0b10 	vmov	r0, r1, d0
 8009fe8:	ee10 2a10 	vmov	r2, s0
 8009fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009ff0:	ec43 2b10 	vmov	d0, r2, r3
 8009ff4:	4770      	bx	lr
	...

08009ff8 <scalbn>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	ec55 4b10 	vmov	r4, r5, d0
 8009ffe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a002:	4606      	mov	r6, r0
 800a004:	462b      	mov	r3, r5
 800a006:	b999      	cbnz	r1, 800a030 <scalbn+0x38>
 800a008:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a00c:	4323      	orrs	r3, r4
 800a00e:	d03f      	beq.n	800a090 <scalbn+0x98>
 800a010:	4b35      	ldr	r3, [pc, #212]	; (800a0e8 <scalbn+0xf0>)
 800a012:	4629      	mov	r1, r5
 800a014:	ee10 0a10 	vmov	r0, s0
 800a018:	2200      	movs	r2, #0
 800a01a:	f7f6 fae5 	bl	80005e8 <__aeabi_dmul>
 800a01e:	4b33      	ldr	r3, [pc, #204]	; (800a0ec <scalbn+0xf4>)
 800a020:	429e      	cmp	r6, r3
 800a022:	4604      	mov	r4, r0
 800a024:	460d      	mov	r5, r1
 800a026:	da10      	bge.n	800a04a <scalbn+0x52>
 800a028:	a327      	add	r3, pc, #156	; (adr r3, 800a0c8 <scalbn+0xd0>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	e01f      	b.n	800a070 <scalbn+0x78>
 800a030:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a034:	4291      	cmp	r1, r2
 800a036:	d10c      	bne.n	800a052 <scalbn+0x5a>
 800a038:	ee10 2a10 	vmov	r2, s0
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 f91c 	bl	800027c <__adddf3>
 800a044:	4604      	mov	r4, r0
 800a046:	460d      	mov	r5, r1
 800a048:	e022      	b.n	800a090 <scalbn+0x98>
 800a04a:	460b      	mov	r3, r1
 800a04c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a050:	3936      	subs	r1, #54	; 0x36
 800a052:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a056:	4296      	cmp	r6, r2
 800a058:	dd0d      	ble.n	800a076 <scalbn+0x7e>
 800a05a:	2d00      	cmp	r5, #0
 800a05c:	a11c      	add	r1, pc, #112	; (adr r1, 800a0d0 <scalbn+0xd8>)
 800a05e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a062:	da02      	bge.n	800a06a <scalbn+0x72>
 800a064:	a11c      	add	r1, pc, #112	; (adr r1, 800a0d8 <scalbn+0xe0>)
 800a066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a06a:	a319      	add	r3, pc, #100	; (adr r3, 800a0d0 <scalbn+0xd8>)
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7f6 faba 	bl	80005e8 <__aeabi_dmul>
 800a074:	e7e6      	b.n	800a044 <scalbn+0x4c>
 800a076:	1872      	adds	r2, r6, r1
 800a078:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a07c:	428a      	cmp	r2, r1
 800a07e:	dcec      	bgt.n	800a05a <scalbn+0x62>
 800a080:	2a00      	cmp	r2, #0
 800a082:	dd08      	ble.n	800a096 <scalbn+0x9e>
 800a084:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a088:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a08c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a090:	ec45 4b10 	vmov	d0, r4, r5
 800a094:	bd70      	pop	{r4, r5, r6, pc}
 800a096:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a09a:	da08      	bge.n	800a0ae <scalbn+0xb6>
 800a09c:	2d00      	cmp	r5, #0
 800a09e:	a10a      	add	r1, pc, #40	; (adr r1, 800a0c8 <scalbn+0xd0>)
 800a0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a4:	dac0      	bge.n	800a028 <scalbn+0x30>
 800a0a6:	a10e      	add	r1, pc, #56	; (adr r1, 800a0e0 <scalbn+0xe8>)
 800a0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0ac:	e7bc      	b.n	800a028 <scalbn+0x30>
 800a0ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0b2:	3236      	adds	r2, #54	; 0x36
 800a0b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a0bc:	4620      	mov	r0, r4
 800a0be:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <scalbn+0xf8>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	e7d5      	b.n	800a070 <scalbn+0x78>
 800a0c4:	f3af 8000 	nop.w
 800a0c8:	c2f8f359 	.word	0xc2f8f359
 800a0cc:	01a56e1f 	.word	0x01a56e1f
 800a0d0:	8800759c 	.word	0x8800759c
 800a0d4:	7e37e43c 	.word	0x7e37e43c
 800a0d8:	8800759c 	.word	0x8800759c
 800a0dc:	fe37e43c 	.word	0xfe37e43c
 800a0e0:	c2f8f359 	.word	0xc2f8f359
 800a0e4:	81a56e1f 	.word	0x81a56e1f
 800a0e8:	43500000 	.word	0x43500000
 800a0ec:	ffff3cb0 	.word	0xffff3cb0
 800a0f0:	3c900000 	.word	0x3c900000
 800a0f4:	00000000 	.word	0x00000000

0800a0f8 <floor>:
 800a0f8:	ec51 0b10 	vmov	r0, r1, d0
 800a0fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a104:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800a108:	2e13      	cmp	r6, #19
 800a10a:	ee10 5a10 	vmov	r5, s0
 800a10e:	ee10 8a10 	vmov	r8, s0
 800a112:	460c      	mov	r4, r1
 800a114:	dc31      	bgt.n	800a17a <floor+0x82>
 800a116:	2e00      	cmp	r6, #0
 800a118:	da14      	bge.n	800a144 <floor+0x4c>
 800a11a:	a333      	add	r3, pc, #204	; (adr r3, 800a1e8 <floor+0xf0>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f7f6 f8ac 	bl	800027c <__adddf3>
 800a124:	2200      	movs	r2, #0
 800a126:	2300      	movs	r3, #0
 800a128:	f7f6 fcee 	bl	8000b08 <__aeabi_dcmpgt>
 800a12c:	b138      	cbz	r0, 800a13e <floor+0x46>
 800a12e:	2c00      	cmp	r4, #0
 800a130:	da53      	bge.n	800a1da <floor+0xe2>
 800a132:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a136:	4325      	orrs	r5, r4
 800a138:	d052      	beq.n	800a1e0 <floor+0xe8>
 800a13a:	4c2d      	ldr	r4, [pc, #180]	; (800a1f0 <floor+0xf8>)
 800a13c:	2500      	movs	r5, #0
 800a13e:	4621      	mov	r1, r4
 800a140:	4628      	mov	r0, r5
 800a142:	e024      	b.n	800a18e <floor+0x96>
 800a144:	4f2b      	ldr	r7, [pc, #172]	; (800a1f4 <floor+0xfc>)
 800a146:	4137      	asrs	r7, r6
 800a148:	ea01 0307 	and.w	r3, r1, r7
 800a14c:	4303      	orrs	r3, r0
 800a14e:	d01e      	beq.n	800a18e <floor+0x96>
 800a150:	a325      	add	r3, pc, #148	; (adr r3, 800a1e8 <floor+0xf0>)
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f7f6 f891 	bl	800027c <__adddf3>
 800a15a:	2200      	movs	r2, #0
 800a15c:	2300      	movs	r3, #0
 800a15e:	f7f6 fcd3 	bl	8000b08 <__aeabi_dcmpgt>
 800a162:	2800      	cmp	r0, #0
 800a164:	d0eb      	beq.n	800a13e <floor+0x46>
 800a166:	2c00      	cmp	r4, #0
 800a168:	bfbe      	ittt	lt
 800a16a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a16e:	4133      	asrlt	r3, r6
 800a170:	18e4      	addlt	r4, r4, r3
 800a172:	ea24 0407 	bic.w	r4, r4, r7
 800a176:	2500      	movs	r5, #0
 800a178:	e7e1      	b.n	800a13e <floor+0x46>
 800a17a:	2e33      	cmp	r6, #51	; 0x33
 800a17c:	dd0b      	ble.n	800a196 <floor+0x9e>
 800a17e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a182:	d104      	bne.n	800a18e <floor+0x96>
 800a184:	ee10 2a10 	vmov	r2, s0
 800a188:	460b      	mov	r3, r1
 800a18a:	f7f6 f877 	bl	800027c <__adddf3>
 800a18e:	ec41 0b10 	vmov	d0, r0, r1
 800a192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a196:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800a19a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a19e:	40df      	lsrs	r7, r3
 800a1a0:	4238      	tst	r0, r7
 800a1a2:	d0f4      	beq.n	800a18e <floor+0x96>
 800a1a4:	a310      	add	r3, pc, #64	; (adr r3, 800a1e8 <floor+0xf0>)
 800a1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1aa:	f7f6 f867 	bl	800027c <__adddf3>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	f7f6 fca9 	bl	8000b08 <__aeabi_dcmpgt>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	d0c1      	beq.n	800a13e <floor+0x46>
 800a1ba:	2c00      	cmp	r4, #0
 800a1bc:	da0a      	bge.n	800a1d4 <floor+0xdc>
 800a1be:	2e14      	cmp	r6, #20
 800a1c0:	d101      	bne.n	800a1c6 <floor+0xce>
 800a1c2:	3401      	adds	r4, #1
 800a1c4:	e006      	b.n	800a1d4 <floor+0xdc>
 800a1c6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	40b3      	lsls	r3, r6
 800a1ce:	441d      	add	r5, r3
 800a1d0:	45a8      	cmp	r8, r5
 800a1d2:	d8f6      	bhi.n	800a1c2 <floor+0xca>
 800a1d4:	ea25 0507 	bic.w	r5, r5, r7
 800a1d8:	e7b1      	b.n	800a13e <floor+0x46>
 800a1da:	2500      	movs	r5, #0
 800a1dc:	462c      	mov	r4, r5
 800a1de:	e7ae      	b.n	800a13e <floor+0x46>
 800a1e0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a1e4:	e7ab      	b.n	800a13e <floor+0x46>
 800a1e6:	bf00      	nop
 800a1e8:	8800759c 	.word	0x8800759c
 800a1ec:	7e37e43c 	.word	0x7e37e43c
 800a1f0:	bff00000 	.word	0xbff00000
 800a1f4:	000fffff 	.word	0x000fffff

0800a1f8 <_init>:
 800a1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fa:	bf00      	nop
 800a1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1fe:	bc08      	pop	{r3}
 800a200:	469e      	mov	lr, r3
 800a202:	4770      	bx	lr

>>>>>>> 30469df0eadda5ea938b0ae2c40b49aacc530305
0800a204 <_fini>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	bf00      	nop
 800a208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20a:	bc08      	pop	{r3}
 800a20c:	469e      	mov	lr, r3
 800a20e:	4770      	bx	lr
