
sweeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800656c  0800656c  0001656c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006638  08006638  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08006638  08006638  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006638  08006638  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006638  08006638  00016638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800663c  0800663c  0001663c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08006640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c4  2**0
                  CONTENTS
 10 .bss          000005c8  200000c4  200000c4  000200c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000068c  2000068c  000200c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000158ee  00000000  00000000  00020137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000312c  00000000  00000000  00035a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012c0  00000000  00000000  00038b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e7a  00000000  00000000  00039e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f5fa  00000000  00000000  0003ac92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000174d7  00000000  00000000  0005a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ba173  00000000  00000000  00071763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005384  00000000  00000000  0012b8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  00130c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006554 	.word	0x08006554

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	08006554 	.word	0x08006554

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	; (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <enable_interrupt>:
// set a default value of NULL so that it won't be called until the
// function pointer is defined
static void (*on_button_press)() = 0x00;

void enable_interrupt()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000304:	b672      	cpsid	i
}
 8000306:	bf00      	nop
    __disable_irq();

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <enable_interrupt+0x4c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a0f      	ldr	r2, [pc, #60]	; (800034c <enable_interrupt+0x4c>)
 800030e:	f043 0301 	orr.w	r3, r3, #1
 8000312:	6193      	str	r3, [r2, #24]

    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000314:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <enable_interrupt+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	609a      	str	r2, [r3, #8]

    EXTI->RTSR |= EXTI_RTSR_TR0;
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <enable_interrupt+0x54>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <enable_interrupt+0x54>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0;
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <enable_interrupt+0x54>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <enable_interrupt+0x54>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(EXTI0_IRQn, -1);
 8000332:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000336:	2006      	movs	r0, #6
 8000338:	f7ff ffb8 	bl	80002ac <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 800033c:	2006      	movs	r0, #6
 800033e:	f7ff ff97 	bl	8000270 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000342:	b662      	cpsie	i
}
 8000344:	bf00      	nop

    __enable_irq();
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	40010000 	.word	0x40010000
 8000354:	40010400 	.word	0x40010400

08000358 <initButtonHandler>:

void initButtonHandler(ButtonPressCallback callback)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
    on_button_press = callback;
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <initButtonHandler+0x1c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	6013      	str	r3, [r2, #0]
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	200000e0 	.word	0x200000e0

08000378 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
    // run the button press handler (make sure it is not null first !)
    if (on_button_press != 0x00)
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <EXTI0_IRQHandler+0x24>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d002      	beq.n	800038a <EXTI0_IRQHandler+0x12>
    {
        on_button_press();
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI0_IRQHandler+0x24>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4798      	blx	r3
    }

    // reset the interrupt (so it doesn't keep firing until the next trigger)
    EXTI->PR |= EXTI_PR_PR0;
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <EXTI0_IRQHandler+0x28>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <EXTI0_IRQHandler+0x28>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6153      	str	r3, [r2, #20]
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200000e0 	.word	0x200000e0
 80003a0:	40010400 	.word	0x40010400

080003a4 <set_pan>:
{
	return pan.position;
}

uint8_t set_pan(uint16_t pwmVal)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	80fb      	strh	r3, [r7, #6]
	if (pwmVal < 0 || pwmVal > 2000)
 80003ae:	88fb      	ldrh	r3, [r7, #6]
 80003b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003b4:	d901      	bls.n	80003ba <set_pan+0x16>
	{
		return 1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	e008      	b.n	80003cc <set_pan+0x28>
	}

	pan.position = pwmVal;
 80003ba:	4a07      	ldr	r2, [pc, #28]	; (80003d8 <set_pan+0x34>)
 80003bc:	88fb      	ldrh	r3, [r7, #6]
 80003be:	8093      	strh	r3, [r2, #4]
	pan.controlTimer->Instance->CCR2 = pwmVal;
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <set_pan+0x34>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	88fa      	ldrh	r2, [r7, #6]
 80003c8:	639a      	str	r2, [r3, #56]	; 0x38
	return 0;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	200000e4 	.word	0x200000e4

080003dc <set_tilt>:

uint8_t set_tilt(uint16_t pwmVal)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	80fb      	strh	r3, [r7, #6]
	if (pwmVal < 0 || pwmVal > 2000)
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80003ec:	d901      	bls.n	80003f2 <set_tilt+0x16>
	{
		return 1;
 80003ee:	2301      	movs	r3, #1
 80003f0:	e008      	b.n	8000404 <set_tilt+0x28>
	}

	tilt.position = pwmVal;
 80003f2:	4a07      	ldr	r2, [pc, #28]	; (8000410 <set_tilt+0x34>)
 80003f4:	88fb      	ldrh	r3, [r7, #6]
 80003f6:	8093      	strh	r3, [r2, #4]
	tilt.controlTimer->Instance->CCR1 = pwmVal;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <set_tilt+0x34>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	88fa      	ldrh	r2, [r7, #6]
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
	return 0;
 8000402:	2300      	movs	r3, #0
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	200000ec 	.word	0x200000ec

08000414 <transfer_array_data>:

void transfer_array_data(uint16_t *sourceArray, uint16_t *targetArray, uint16_t elements)
{
 8000414:	b480      	push	{r7}
 8000416:	b087      	sub	sp, #28
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	4613      	mov	r3, r2
 8000420:	80fb      	strh	r3, [r7, #6]
	for(int c = 0; c < elements;c++)
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	e00c      	b.n	8000442 <transfer_array_data+0x2e>
	{
		targetArray[c] = sourceArray[c];
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	441a      	add	r2, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	68b9      	ldr	r1, [r7, #8]
 8000436:	440b      	add	r3, r1
 8000438:	8812      	ldrh	r2, [r2, #0]
 800043a:	801a      	strh	r2, [r3, #0]
	for(int c = 0; c < elements;c++)
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	3301      	adds	r3, #1
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	88fb      	ldrh	r3, [r7, #6]
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	429a      	cmp	r2, r3
 8000448:	dbee      	blt.n	8000428 <transfer_array_data+0x14>
	}
	return;
 800044a:	bf00      	nop
}
 800044c:	371c      	adds	r7, #28
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <setup_sweeper>:

void setup_sweeper(I2C_HandleTypeDef *hi2c1, SPI_HandleTypeDef *hspi1, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, PCD_HandleTypeDef *hpcd_USB_FS)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	607a      	str	r2, [r7, #4]
 8000464:	603b      	str	r3, [r7, #0]
	// enable clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <setup_sweeper+0x88>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <setup_sweeper+0x88>)
 800046c:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000470:	6153      	str	r3, [r2, #20]

	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000472:	2200      	movs	r2, #0
 8000474:	491b      	ldr	r1, [pc, #108]	; (80004e4 <setup_sweeper+0x8c>)
 8000476:	2004      	movs	r0, #4
 8000478:	f000 fca2 	bl	8000dc0 <SerialInitialise>

	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 800047c:	2100      	movs	r1, #0
 800047e:	6838      	ldr	r0, [r7, #0]
 8000480:	f003 fefc 	bl	800427c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 8000484:	2104      	movs	r1, #4
 8000486:	6838      	ldr	r0, [r7, #0]
 8000488:	f003 fef8 	bl	800427c <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(htim1, TIM_CHANNEL_1);
 800048c:	2100      	movs	r1, #0
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	f004 f856 	bl	8004540 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 8000494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000498:	f644 6220 	movw	r2, #20000	; 0x4e20
 800049c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 800049e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ac:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(hi2c1);
 80004ae:	68f8      	ldr	r0, [r7, #12]
 80004b0:	f000 fc39 	bl	8000d26 <initialise_ptu_i2c>
//	uint8_t reset_value = 0x00;
//	return_value = HAL_I2C_Mem_Write(hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);


	// set the servos to their starting positions
	pan.controlTimer = htim2;
 80004b4:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <setup_sweeper+0x90>)
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	6013      	str	r3, [r2, #0]
	tilt.controlTimer = htim2;
 80004ba:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <setup_sweeper+0x94>)
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	6013      	str	r3, [r2, #0]

	set_pan(STARTING_OFFSET_HORI);
 80004c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004c4:	f7ff ff6e 	bl	80003a4 <set_pan>
	set_tilt(STARTING_OFFSET_VERT);
 80004c8:	f240 50aa 	movw	r0, #1450	; 0x5aa
 80004cc:	f7ff ff86 	bl	80003dc <set_tilt>

	HAL_Delay(100);
 80004d0:	2064      	movs	r0, #100	; 0x64
 80004d2:	f001 f953 	bl	800177c <HAL_Delay>


}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40021000 	.word	0x40021000
 80004e4:	20000000 	.word	0x20000000
 80004e8:	200000e4 	.word	0x200000e4
 80004ec:	200000ec 	.word	0x200000ec

080004f0 <sweep>:

void sweep(uint16_t *previousReadings, uint16_t *output)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b09a      	sub	sp, #104	; 0x68
 80004f4:	af02      	add	r7, sp, #8
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
	uint16_t step_increment = DEGREES_PER_STEP * PWM_PER_DEGREE;
 80004fa:	230b      	movs	r3, #11
 80004fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t starting_pwm = STARTING_OFFSET_HORI - (step_increment * READINGS_PER_SWEEP) / 2;
 8000500:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000504:	461a      	mov	r2, r3
 8000506:	011b      	lsls	r3, r3, #4
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	b29b      	uxth	r3, r3
 800050e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000512:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t finishing_pwm = STARTING_OFFSET_HORI + (step_increment * READINGS_PER_SWEEP) / 2;
 8000516:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800051a:	461a      	mov	r2, r3
 800051c:	0112      	lsls	r2, r2, #4
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	b29b      	uxth	r3, r3
 8000524:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000528:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	// OPERATIONAL
	uint16_t current_pwm;
	uint8_t string_to_send[64];
	uint16_t delta;
	uint8_t thresholdBreachCount = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	// set the servos to the starting position
	SerialOutputString("############\r\n", &USART1_PORT);
 8000532:	494a      	ldr	r1, [pc, #296]	; (800065c <sweep+0x16c>)
 8000534:	484a      	ldr	r0, [pc, #296]	; (8000660 <sweep+0x170>)
 8000536:	f000 fcd0 	bl	8000eda <SerialOutputString>
	set_tilt(STARTING_OFFSET_VERT);
 800053a:	f240 50aa 	movw	r0, #1450	; 0x5aa
 800053e:	f7ff ff4d 	bl	80003dc <set_tilt>
	set_pan(starting_pwm);
 8000542:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ff2c 	bl	80003a4 <set_pan>
	HAL_Delay(DEGREE_TRAVERSE_MS * DEGREES_OF_SWEEP * RESET_DELAY_FACTOR);
 800054c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8000550:	f001 f914 	bl	800177c <HAL_Delay>

//	sprintf(string_to_send, "---{%hu}---\r\n", previousReadings[READINGS_PER_SWEEP - 1]);
//	SerialOutputString(string_to_send, &USART1_PORT);


	for(int i = 1; i < READINGS_PER_SWEEP; i++) // DO NOT CHANGE i TO 0, ITS A COCONUT.png situation
 8000554:	2301      	movs	r3, #1
 8000556:	65bb      	str	r3, [r7, #88]	; 0x58
 8000558:	e079      	b.n	800064e <sweep+0x15e>
	{
		current_pwm = starting_pwm + step_increment * i;
 800055a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800055c:	b29b      	uxth	r3, r3
 800055e:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8000562:	fb12 f303 	smulbb	r3, r2, r3
 8000566:	b29a      	uxth	r2, r3
 8000568:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800056c:	4413      	add	r3, r2
 800056e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		set_pan(current_pwm);
 8000572:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff14 	bl	80003a4 <set_pan>

		HAL_Delay(DEGREE_TRAVERSE_MS * DEGREES_PER_STEP * SWEEP_DELAY_FACTOR);
 800057c:	201e      	movs	r0, #30
 800057e:	f001 f8fd 	bl	800177c <HAL_Delay>
		output[i] = last_period;
 8000582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	683a      	ldr	r2, [r7, #0]
 8000588:	4413      	add	r3, r2
 800058a:	4a36      	ldr	r2, [pc, #216]	; (8000664 <sweep+0x174>)
 800058c:	8812      	ldrh	r2, [r2, #0]
 800058e:	801a      	strh	r2, [r3, #0]

		if (previousReadings != NULL)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d03b      	beq.n	800060e <sweep+0x11e>
		{
			delta = abs(output[i]-previousReadings[i]);
 8000596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000598:	005b      	lsls	r3, r3, #1
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	4413      	add	r3, r2
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005a4:	005b      	lsls	r3, r3, #1
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	1acb      	subs	r3, r1, r3
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	bfb8      	it	lt
 80005b2:	425b      	neglt	r3, r3
 80005b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			sprintf(string_to_send, "[%hu] : {%hu vs %hu} --> [%hu]\r\n",i, output[i], previousReadings[i], delta);
 80005b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005ba:	005b      	lsls	r3, r3, #1
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	4413      	add	r3, r2
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	4619      	mov	r1, r3
 80005c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	4413      	add	r3, r2
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80005d4:	f107 000c 	add.w	r0, r7, #12
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	460b      	mov	r3, r1
 80005de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80005e0:	4921      	ldr	r1, [pc, #132]	; (8000668 <sweep+0x178>)
 80005e2:	f005 fb13 	bl	8005c0c <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	491c      	ldr	r1, [pc, #112]	; (800065c <sweep+0x16c>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 fc74 	bl	8000eda <SerialOutputString>

			if (delta > THRESHOLD_VALUE)
 80005f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80005f6:	2b64      	cmp	r3, #100	; 0x64
 80005f8:	d905      	bls.n	8000606 <sweep+0x116>
			{
				thresholdBreachCount++;
 80005fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005fe:	3301      	adds	r3, #1
 8000600:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000604:	e015      	b.n	8000632 <sweep+0x142>
			}
			else
			{
				thresholdBreachCount = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800060c:	e011      	b.n	8000632 <sweep+0x142>
			}
		}
		else
		{
			sprintf(string_to_send, "{%hu}\r\n", output[i]);
 800060e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	4413      	add	r3, r2
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4913      	ldr	r1, [pc, #76]	; (800066c <sweep+0x17c>)
 8000620:	4618      	mov	r0, r3
 8000622:	f005 faf3 	bl	8005c0c <siprintf>
			SerialOutputString(string_to_send, &USART1_PORT);
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	490c      	ldr	r1, [pc, #48]	; (800065c <sweep+0x16c>)
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fc54 	bl	8000eda <SerialOutputString>
		}
		if (thresholdBreachCount >= BREACHES)
 8000632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000636:	2b04      	cmp	r3, #4
 8000638:	d906      	bls.n	8000648 <sweep+0x158>
		{
			SerialOutputString("Breach Limit Reached!!!\r\n", &USART1_PORT);
 800063a:	4908      	ldr	r1, [pc, #32]	; (800065c <sweep+0x16c>)
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <sweep+0x180>)
 800063e:	f000 fc4c 	bl	8000eda <SerialOutputString>
			set_detected();
 8000642:	f000 fe71 	bl	8001328 <set_detected>
 8000646:	e005      	b.n	8000654 <sweep+0x164>
	for(int i = 1; i < READINGS_PER_SWEEP; i++) // DO NOT CHANGE i TO 0, ITS A COCONUT.png situation
 8000648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800064a:	3301      	adds	r3, #1
 800064c:	65bb      	str	r3, [r7, #88]	; 0x58
 800064e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000650:	2b3b      	cmp	r3, #59	; 0x3b
 8000652:	dd82      	ble.n	800055a <sweep+0x6a>
			return;
		}
	}
}
 8000654:	3760      	adds	r7, #96	; 0x60
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000000 	.word	0x20000000
 8000660:	0800656c 	.word	0x0800656c
 8000664:	200000fa 	.word	0x200000fa
 8000668:	0800657c 	.word	0x0800657c
 800066c:	080065a0 	.word	0x080065a0
 8000670:	080065a8 	.word	0x080065a8

08000674 <sweep_routine>:
	}

}

void sweep_routine()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0bc      	sub	sp, #240	; 0xf0
 8000678:	af00      	add	r7, sp, #0
	uint16_t previousSet[READINGS_PER_SWEEP];
	previousSet[0] = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
//		memcpy(previousSet, currentSet, sizeof(previousSet));
////		omni_sweep(LR, &previousSet, &currentSet);
////		*previousSet = &currentSet;
//	}

	sweep(NULL, &previousSet);
 8000680:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000684:	4619      	mov	r1, r3
 8000686:	2000      	movs	r0, #0
 8000688:	f7ff ff32 	bl	80004f0 <sweep>


	while (get_status() == RED)
 800068c:	e00d      	b.n	80006aa <sweep_routine+0x36>
	{
		sweep(&previousSet, &currentSet);
 800068e:	463a      	mov	r2, r7
 8000690:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff2a 	bl	80004f0 <sweep>
		transfer_array_data(&currentSet, &previousSet, READINGS_PER_SWEEP);
 800069c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80006a0:	463b      	mov	r3, r7
 80006a2:	223c      	movs	r2, #60	; 0x3c
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff feb5 	bl	8000414 <transfer_array_data>
	while (get_status() == RED)
 80006aa:	f000 fe0d 	bl	80012c8 <get_status>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d0ec      	beq.n	800068e <sweep_routine+0x1a>
	}

}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	37f0      	adds	r7, #240	; 0xf0
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a17      	ldr	r2, [pc, #92]	; (800072c <HAL_TIM_IC_CaptureCallback+0x6c>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d127      	bne.n	8000722 <HAL_TIM_IC_CaptureCallback+0x62>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7f1b      	ldrb	r3, [r3, #28]
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d123      	bne.n	8000722 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80006da:	2100      	movs	r1, #0
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f004 fc0b 	bl	8004ef8 <HAL_TIM_ReadCapturedValue>
 80006e2:	4603      	mov	r3, r0
 80006e4:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f001 faf5 	bl	8001cdc <HAL_GPIO_ReadPin>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d103      	bne.n	8000700 <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 80006f8:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x70>)
 80006fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80006fc:	8013      	strh	r3, [r2, #0]
 80006fe:	e006      	b.n	800070e <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000700:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_TIM_IC_CaptureCallback+0x74>)
 800070c:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 800070e:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_TIM_IC_CaptureCallback+0x7c>)
 800071a:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <HAL_TIM_IC_CaptureCallback+0x78>)
 800071e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000720:	8013      	strh	r3, [r2, #0]
	}
}
 8000722:	bf00      	nop
 8000724:	3730      	adds	r7, #48	; 0x30
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40012c00 	.word	0x40012c00
 8000730:	200000f8 	.word	0x200000f8
 8000734:	200000fa 	.word	0x200000fa
 8000738:	200000f4 	.word	0x200000f4
 800073c:	200000f6 	.word	0x200000f6

08000740 <enable_clocks>:
void green_routine();
void red_routine();

/* USER CODE BEGIN 0 */
void enable_clocks()
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <enable_clocks+0x1c>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <enable_clocks+0x1c>)
 800074a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800074e:	6153      	str	r3, [r2, #20]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000

08000760 <green_routine>:

void green_routine()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	set_green();
 8000764:	f000 fdc8 	bl	80012f8 <set_green>
	// get pot value
	// set display to be green
	// wait proportional to pot value
	//HAL_Delay(1000);
	// set oneshot timer to end sweep
	setDelay(&DelayTIM4, 100000, &red_routine);
 8000768:	4a03      	ldr	r2, [pc, #12]	; (8000778 <green_routine+0x18>)
 800076a:	4904      	ldr	r1, [pc, #16]	; (800077c <green_routine+0x1c>)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <green_routine+0x20>)
 800076e:	f000 ff61 	bl	8001634 <setDelay>

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	08000785 	.word	0x08000785
 800077c:	000186a0 	.word	0x000186a0
 8000780:	20000054 	.word	0x20000054

08000784 <red_routine>:

void red_routine()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	set_red();
 8000788:	f000 fdc2 	bl	8001310 <set_red>
	// get pot value
	// set display to be green
	// wait proportional to pot value
	//HAL_Delay(1000);
	// set oneshot timer to end sweep
	setDelay(&DelayTIM4, 3000, &green_routine);
 800078c:	4a03      	ldr	r2, [pc, #12]	; (800079c <red_routine+0x18>)
 800078e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000792:	4803      	ldr	r0, [pc, #12]	; (80007a0 <red_routine+0x1c>)
 8000794:	f000 ff4e 	bl	8001634 <setDelay>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	08000761 	.word	0x08000761
 80007a0:	20000054 	.word	0x20000054

080007a4 <setup_routine>:

void setup_routine()
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af02      	add	r7, sp, #8
	set_setup();
 80007aa:	f000 fd99 	bl	80012e0 <set_setup>
	setup_sweeper(&hi2c1, &hspi1, &htim1, &htim2, &hpcd_USB_FS);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <setup_routine+0x34>)
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <setup_routine+0x38>)
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <setup_routine+0x3c>)
 80007b6:	490b      	ldr	r1, [pc, #44]	; (80007e4 <setup_routine+0x40>)
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <setup_routine+0x44>)
 80007ba:	f7ff fe4d 	bl	8000458 <setup_sweeper>
	timerInitialise(&DelayTIM4);
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <setup_routine+0x48>)
 80007c0:	f000 fe97 	bl	80014f2 <timerInitialise>
	enable_interrupt();
 80007c4:	f7ff fd9c 	bl	8000300 <enable_interrupt>
	enable_clocks();
 80007c8:	f7ff ffba 	bl	8000740 <enable_clocks>
	initButtonHandler(&green_routine);
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <setup_routine+0x4c>)
 80007ce:	f7ff fdc3 	bl	8000358 <initButtonHandler>
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000024c 	.word	0x2000024c
 80007dc:	20000200 	.word	0x20000200
 80007e0:	200001b4 	.word	0x200001b4
 80007e4:	20000150 	.word	0x20000150
 80007e8:	200000fc 	.word	0x200000fc
 80007ec:	20000054 	.word	0x20000054
 80007f0:	08000761 	.word	0x08000761

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007f8:	f000 ff5a 	bl	80016b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007fc:	f000 f830 	bl	8000860 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000800:	f000 fa0e 	bl	8000c20 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000804:	f000 f890 	bl	8000928 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000808:	f000 f8ce 	bl	80009a8 <MX_SPI1_Init>
	MX_USB_PCD_Init();
 800080c:	f000 f9e6 	bl	8000bdc <MX_USB_PCD_Init>
	MX_TIM2_Init();
 8000810:	f000 f97e 	bl	8000b10 <MX_TIM2_Init>
	MX_TIM1_Init();
 8000814:	f000 f906 	bl	8000a24 <MX_TIM1_Init>
	/* USER CODE BEGIN WHILE */




	setup_routine();
 8000818:	f7ff ffc4 	bl	80007a4 <setup_routine>
	while (1)
	{
		if (get_status() == FINISHED)
 800081c:	f000 fd54 	bl	80012c8 <get_status>
 8000820:	4603      	mov	r3, r0
 8000822:	2b04      	cmp	r3, #4
 8000824:	d103      	bne.n	800082e <main+0x3a>
		{
			stopTimer(&DelayTIM4);
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <main+0x68>)
 8000828:	f000 feee 	bl	8001608 <stopTimer>
 800082c:	e7f6      	b.n	800081c <main+0x28>
			// display victory message?
		}
		else if (get_status() == SETUP)
 800082e:	f000 fd4b 	bl	80012c8 <get_status>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0f1      	beq.n	800081c <main+0x28>
		{
			// display pre-game message?
		}
		else if (get_status() == RED)
 8000838:	f000 fd46 	bl	80012c8 <get_status>
 800083c:	4603      	mov	r3, r0
 800083e:	2b02      	cmp	r3, #2
 8000840:	d102      	bne.n	8000848 <main+0x54>
		{
			// set display to be red
			sweep_routine();
 8000842:	f7ff ff17 	bl	8000674 <sweep_routine>
 8000846:	e7e9      	b.n	800081c <main+0x28>
		}
		else if (get_status() == DETECTED)
 8000848:	f000 fd3e 	bl	80012c8 <get_status>
 800084c:	4603      	mov	r3, r0
 800084e:	2b03      	cmp	r3, #3
 8000850:	d1e4      	bne.n	800081c <main+0x28>
		{
			HAL_Delay(1);
 8000852:	2001      	movs	r0, #1
 8000854:	f000 ff92 	bl	800177c <HAL_Delay>
		if (get_status() == FINISHED)
 8000858:	e7e0      	b.n	800081c <main+0x28>
 800085a:	bf00      	nop
 800085c:	20000054 	.word	0x20000054

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b09e      	sub	sp, #120	; 0x78
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800086a:	2228      	movs	r2, #40	; 0x28
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f005 f9ec 	bl	8005c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	223c      	movs	r2, #60	; 0x3c
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 f9de 	bl	8005c4c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000890:	2303      	movs	r3, #3
 8000892:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000894:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000898:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089e:	2301      	movs	r3, #1
 80008a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a2:	2310      	movs	r3, #16
 80008a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80008b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008b4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 ffb0 	bl	8002820 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80008c6:	f000 fa29 	bl	8000d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008e4:	2101      	movs	r1, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 ffd8 	bl	800389c <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008f2:	f000 fa13 	bl	8000d1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <SystemClock_Config+0xc4>)
 80008f8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80008fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000904:	2300      	movs	r3, #0
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	4618      	mov	r0, r3
 800090c:	f003 f9ac 	bl	8003c68 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000916:	f000 fa01 	bl	8000d1c <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3778      	adds	r7, #120	; 0x78
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	00021020 	.word	0x00021020

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_I2C1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_I2C1_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_I2C1_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_I2C1_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <MX_I2C1_Init+0x74>)
 8000964:	f001 f9ea 	bl	8001d3c <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 f9d5 	bl	8000d1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <MX_I2C1_Init+0x74>)
 8000976:	f001 fde9 	bl	800254c <HAL_I2CEx_ConfigAnalogFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 f9cc 	bl	8000d1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_I2C1_Init+0x74>)
 8000988:	f001 fe2b 	bl	80025e2 <HAL_I2CEx_ConfigDigitalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f9c3 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000fc 	.word	0x200000fc
 80009a0:	40005400 	.word	0x40005400
 80009a4:	2000090e 	.word	0x2000090e

080009a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009ae:	4a1c      	ldr	r2, [pc, #112]	; (8000a20 <MX_SPI1_Init+0x78>)
 80009b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009de:	2208      	movs	r2, #8
 80009e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009f6:	2207      	movs	r2, #7
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009fa:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <MX_SPI1_Init+0x74>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_SPI1_Init+0x74>)
 8000a02:	2208      	movs	r2, #8
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_SPI1_Init+0x74>)
 8000a08:	f003 fade 	bl	8003fc8 <HAL_SPI_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a12:	f000 f983 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000150 	.word	0x20000150
 8000a20:	40013000 	.word	0x40013000

08000a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a50:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a52:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <MX_TIM1_Init+0xe8>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8000a56:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a58:	222f      	movs	r2, #47	; 0x2f
 8000a5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a70:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7c:	4822      	ldr	r0, [pc, #136]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a7e:	f003 fb4e 	bl	800411e <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000a88:	f000 f948 	bl	8000d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a90:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	4619      	mov	r1, r3
 8000a98:	481b      	ldr	r0, [pc, #108]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000a9a:	f004 f963 	bl	8004d64 <HAL_TIM_ConfigClockSource>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000aa4:	f000 f93a 	bl	8000d1c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000aa8:	4817      	ldr	r0, [pc, #92]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000aaa:	f003 fce7 	bl	800447c <HAL_TIM_IC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000ab4:	f000 f932 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480f      	ldr	r0, [pc, #60]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000acc:	f004 ffc4 	bl	8005a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000ad6:	f000 f921 	bl	8000d1c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000ada:	230a      	movs	r3, #10
 8000adc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_TIM1_Init+0xe4>)
 8000af2:	f003 ff86 	bl	8004a02 <HAL_TIM_IC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000afc:	f000 f90e 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3730      	adds	r7, #48	; 0x30
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200001b4 	.word	0x200001b4
 8000b0c:	40012c00 	.word	0x40012c00

08000b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
 8000b30:	615a      	str	r2, [r3, #20]
 8000b32:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000b3e:	222f      	movs	r2, #47	; 0x2f
 8000b40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000b4a:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b5c:	481e      	ldr	r0, [pc, #120]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000b5e:	f003 fb35 	bl	80041cc <HAL_TIM_PWM_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000b68:	f000 f8d8 	bl	8000d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000b7c:	f004 ff6c 	bl	8005a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b86:	f000 f8c9 	bl	8000d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8a:	2360      	movs	r3, #96	; 0x60
 8000b8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 8000b8e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000ba4:	f003 ffca 	bl	8004b3c <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000bae:	f000 f8b5 	bl	8000d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2204      	movs	r2, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000bba:	f003 ffbf 	bl	8004b3c <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8000bc4:	f000 f8aa 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM2_Init+0xc8>)
 8000bca:	f000 fac5 	bl	8001158 <HAL_TIM_MspPostInit>

}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000200 	.word	0x20000200

08000bdc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_USB_PCD_Init+0x3c>)
 8000be2:	4a0e      	ldr	r2, [pc, #56]	; (8000c1c <MX_USB_PCD_Init+0x40>)
 8000be4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_USB_PCD_Init+0x3c>)
 8000be8:	2208      	movs	r2, #8
 8000bea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_USB_PCD_Init+0x3c>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_USB_PCD_Init+0x3c>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_USB_PCD_Init+0x3c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_USB_PCD_Init+0x3c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USB_PCD_Init+0x3c>)
 8000c06:	f001 fd38 	bl	800267a <HAL_PCD_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000c10:	f000 f884 	bl	8000d1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000024c 	.word	0x2000024c
 8000c1c:	40005c00 	.word	0x40005c00

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c36:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a36      	ldr	r2, [pc, #216]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a30      	ldr	r2, [pc, #192]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a2a      	ldr	r2, [pc, #168]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c70:	6153      	str	r3, [r2, #20]
 8000c72:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a24      	ldr	r2, [pc, #144]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca0:	6153      	str	r3, [r2, #20]
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_GPIO_Init+0xf4>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000cb4:	4818      	ldr	r0, [pc, #96]	; (8000d18 <MX_GPIO_Init+0xf8>)
 8000cb6:	f001 f829 	bl	8001d0c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000cba:	2337      	movs	r3, #55	; 0x37
 8000cbc:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cbe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4812      	ldr	r0, [pc, #72]	; (8000d18 <MX_GPIO_Init+0xf8>)
 8000cd0:	f000 fe8a 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000cd4:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000cd8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <MX_GPIO_Init+0xf8>)
 8000cee:	f000 fe7b 	bl	80019e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fe6e 	bl	80019e8 <HAL_GPIO_Init>

}
 8000d0c:	bf00      	nop
 8000d0e:	3728      	adds	r7, #40	; 0x28
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	48001000 	.word	0x48001000

08000d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d20:	b672      	cpsid	i
}
 8000d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d24:	e7fe      	b.n	8000d24 <Error_Handler+0x8>

08000d26 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b088      	sub	sp, #32
 8000d2a:	af04      	add	r7, sp, #16
 8000d2c:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 8000d32:	230f      	movs	r3, #15
 8000d34:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8000d36:	230a      	movs	r3, #10
 8000d38:	9302      	str	r3, [sp, #8]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	f107 030e 	add.w	r3, r7, #14
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2301      	movs	r3, #1
 8000d46:	2220      	movs	r2, #32
 8000d48:	21d2      	movs	r1, #210	; 0xd2
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f001 f886 	bl	8001e5c <HAL_I2C_Mem_Write>
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 8000d54:	2300      	movs	r3, #0
 8000d56:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8000d58:	230a      	movs	r3, #10
 8000d5a:	9302      	str	r3, [sp, #8]
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	9301      	str	r3, [sp, #4]
 8000d60:	f107 030d 	add.w	r3, r7, #13
 8000d64:	9300      	str	r3, [sp, #0]
 8000d66:	2301      	movs	r3, #1
 8000d68:	2221      	movs	r2, #33	; 0x21
 8000d6a:	21d2      	movs	r1, #210	; 0xd2
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f001 f875 	bl	8001e5c <HAL_I2C_Mem_Write>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8000d76:	230a      	movs	r3, #10
 8000d78:	9302      	str	r3, [sp, #8]
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	9301      	str	r3, [sp, #4]
 8000d7e:	f107 030d 	add.w	r3, r7, #13
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	2301      	movs	r3, #1
 8000d86:	2222      	movs	r2, #34	; 0x22
 8000d88:	21d2      	movs	r1, #210	; 0xd2
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f001 f866 	bl	8001e5c <HAL_I2C_Mem_Write>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 8000d94:	2300      	movs	r3, #0
 8000d96:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8000d98:	230a      	movs	r3, #10
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	9300      	str	r3, [sp, #0]
 8000da6:	2301      	movs	r3, #1
 8000da8:	2200      	movs	r2, #0
 8000daa:	21c4      	movs	r1, #196	; 0xc4
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f001 f855 	bl	8001e5c <HAL_I2C_Mem_Write>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
}
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	687a      	ldr	r2, [r7, #4]
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <SerialInitialise+0xe4>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a33      	ldr	r2, [pc, #204]	; (8000ea4 <SerialInitialise+0xe4>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <SerialInitialise+0xe4>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4a30      	ldr	r2, [pc, #192]	; (8000ea4 <SerialInitialise+0xe4>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d106      	bne.n	8000e00 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <SerialInitialise+0xe4>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a2b      	ldr	r2, [pc, #172]	; (8000ea4 <SerialInitialise+0xe4>)
 8000df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dfc:	6153      	str	r3, [r2, #20]
		break;
 8000dfe:	e000      	b.n	8000e02 <SerialInitialise+0x42>
	default:
		break;
 8000e00:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	6a12      	ldr	r2, [r2, #32]
 8000e0a:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	68ba      	ldr	r2, [r7, #8]
 8000e12:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000e14:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	6959      	ldr	r1, [r3, #20]
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b04      	cmp	r3, #4
 8000e40:	d821      	bhi.n	8000e86 <SerialInitialise+0xc6>
 8000e42:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <SerialInitialise+0x88>)
 8000e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e48:	08000e5d 	.word	0x08000e5d
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e6d 	.word	0x08000e6d
 8000e54:	08000e75 	.word	0x08000e75
 8000e58:	08000e7d 	.word	0x08000e7d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	2246      	movs	r2, #70	; 0x46
 8000e60:	801a      	strh	r2, [r3, #0]
		break;
 8000e62:	e010      	b.n	8000e86 <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	2246      	movs	r2, #70	; 0x46
 8000e68:	801a      	strh	r2, [r3, #0]
		break;
 8000e6a:	e00c      	b.n	8000e86 <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2246      	movs	r2, #70	; 0x46
 8000e70:	801a      	strh	r2, [r3, #0]
		break;
 8000e72:	e008      	b.n	8000e86 <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2246      	movs	r2, #70	; 0x46
 8000e78:	801a      	strh	r2, [r3, #0]
		break;
 8000e7a:	e004      	b.n	8000e86 <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000e82:	801a      	strh	r2, [r3, #0]
		break;
 8000e84:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f042 020d 	orr.w	r2, r2, #13
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	371c      	adds	r7, #28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000eb4:	bf00      	nop
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f8      	beq.n	8000eb6 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	b292      	uxth	r2, r2
 8000ecc:	801a      	strh	r2, [r3, #0]
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 8000ee8:	e00b      	b.n	8000f02 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ffd9 	bl	8000ea8 <SerialOutputChar>
		counter++;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
		pt++;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3301      	adds	r3, #1
 8000f00:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d1ef      	bne.n	8000eea <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	68f8      	ldr	r0, [r7, #12]
 8000f18:	4798      	blx	r3
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_MspInit+0x44>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <HAL_MspInit+0x44>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6193      	str	r3, [r2, #24]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_MspInit+0x44>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_MspInit+0x44>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a08      	ldr	r2, [pc, #32]	; (8000f68 <HAL_MspInit+0x44>)
 8000f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_MspInit+0x44>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f000 fd02 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	; 0x28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_I2C_MspInit+0x7c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d127      	bne.n	8000fde <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_I2C_MspInit+0x80>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_I2C_MspInit+0x80>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6153      	str	r3, [r2, #20]
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_I2C_MspInit+0x80>)
 8000f9c:	695b      	ldr	r3, [r3, #20]
 8000f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000fa6:	23c0      	movs	r3, #192	; 0xc0
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000faa:	2312      	movs	r3, #18
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <HAL_I2C_MspInit+0x84>)
 8000fc2:	f000 fd11 	bl	80019e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_I2C_MspInit+0x80>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_I2C_MspInit+0x80>)
 8000fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_I2C_MspInit+0x80>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	3728      	adds	r7, #40	; 0x28
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000400 	.word	0x48000400

08000ff4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_SPI_MspInit+0x7c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d128      	bne.n	8001068 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_SPI_MspInit+0x80>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <HAL_SPI_MspInit+0x80>)
 800101c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_SPI_MspInit+0x80>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_SPI_MspInit+0x80>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_SPI_MspInit+0x80>)
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_SPI_MspInit+0x80>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001046:	23e0      	movs	r3, #224	; 0xe0
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001056:	2305      	movs	r3, #5
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f000 fcc0 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40013000 	.word	0x40013000
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_TIM_Base_MspInit+0x90>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d131      	bne.n	80010fe <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109a:	4b1c      	ldr	r3, [pc, #112]	; (800110c <HAL_TIM_Base_MspInit+0x94>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a1b      	ldr	r2, [pc, #108]	; (800110c <HAL_TIM_Base_MspInit+0x94>)
 80010a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b19      	ldr	r3, [pc, #100]	; (800110c <HAL_TIM_Base_MspInit+0x94>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b16      	ldr	r3, [pc, #88]	; (800110c <HAL_TIM_Base_MspInit+0x94>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a15      	ldr	r2, [pc, #84]	; (800110c <HAL_TIM_Base_MspInit+0x94>)
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	6153      	str	r3, [r2, #20]
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <HAL_TIM_Base_MspInit+0x94>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80010dc:	2306      	movs	r3, #6
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f000 fc7d 	bl	80019e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	201b      	movs	r0, #27
 80010f4:	f000 fc41 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80010f8:	201b      	movs	r0, #27
 80010fa:	f000 fc5a 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40012c00 	.word	0x40012c00
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001120:	d113      	bne.n	800114a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_TIM_PWM_MspInit+0x44>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_TIM_PWM_MspInit+0x44>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	61d3      	str	r3, [r2, #28]
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <HAL_TIM_PWM_MspInit+0x44>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	201c      	movs	r0, #28
 8001140:	f000 fc1b 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001144:	201c      	movs	r0, #28
 8001146:	f000 fc34 	bl	80019b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001178:	d11d      	bne.n	80011b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <HAL_TIM_MspPostInit+0x68>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	4a10      	ldr	r2, [pc, #64]	; (80011c0 <HAL_TIM_MspPostInit+0x68>)
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	6153      	str	r3, [r2, #20]
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_TIM_MspPostInit+0x68>)
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001192:	f248 0302 	movw	r3, #32770	; 0x8002
 8001196:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011a4:	2301      	movs	r3, #1
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f000 fc19 	bl	80019e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a18      	ldr	r2, [pc, #96]	; (8001244 <HAL_PCD_MspInit+0x80>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d129      	bne.n	800123a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_PCD_MspInit+0x84>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	4a17      	ldr	r2, [pc, #92]	; (8001248 <HAL_PCD_MspInit+0x84>)
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	6153      	str	r3, [r2, #20]
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_PCD_MspInit+0x84>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80011fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001210:	230e      	movs	r3, #14
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121e:	f000 fbe3 	bl	80019e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_PCD_MspInit+0x84>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_PCD_MspInit+0x84>)
 8001228:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_PCD_MspInit+0x84>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40005c00 	.word	0x40005c00
 8001248:	40021000 	.word	0x40021000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <MemManage_Handler+0x4>

0800125e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <UsageFault_Handler+0x4>

0800126a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 fa50 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM1_CC_IRQHandler+0x10>)
 80012a6:	f003 fa8d 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200001b4 	.word	0x200001b4

080012b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <TIM2_IRQHandler+0x10>)
 80012ba:	f003 fa83 	bl	80047c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000200 	.word	0x20000200

080012c8 <get_status>:
#include "sweep_flag.h"

uint32_t status = SETUP;

uint32_t get_status()
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
	return status;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <get_status+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000538 	.word	0x20000538

080012e0 <set_setup>:

void set_setup()
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	status = SETUP;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <set_setup+0x14>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
	return;
 80012ea:	bf00      	nop
}
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000538 	.word	0x20000538

080012f8 <set_green>:

void set_green()
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	status = GREEN;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <set_green+0x14>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
	return;
 8001302:	bf00      	nop
}
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	20000538 	.word	0x20000538

08001310 <set_red>:

void set_red()
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	status = RED;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <set_red+0x14>)
 8001316:	2202      	movs	r2, #2
 8001318:	601a      	str	r2, [r3, #0]
	return;
 800131a:	bf00      	nop
}
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	20000538 	.word	0x20000538

08001328 <set_detected>:

void set_detected()
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
	status = DETECTED;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <set_detected+0x14>)
 800132e:	2203      	movs	r2, #3
 8001330:	601a      	str	r2, [r3, #0]
	return;
 8001332:	bf00      	nop
}
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000538 	.word	0x20000538

08001340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <_sbrk+0x5c>)
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <_sbrk+0x60>)
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_sbrk+0x64>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <_sbrk+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	429a      	cmp	r2, r3
 800136e:	d207      	bcs.n	8001380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001370:	f004 fc74 	bl	8005c5c <__errno>
 8001374:	4603      	mov	r3, r0
 8001376:	220c      	movs	r2, #12
 8001378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137e:	e009      	b.n	8001394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <_sbrk+0x64>)
 8001390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2000a000 	.word	0x2000a000
 80013a0:	00000400 	.word	0x00000400
 80013a4:	2000053c 	.word	0x2000053c
 80013a8:	20000690 	.word	0x20000690

080013ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	; (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <TIM3_IRQHandler>:
		.is_loop = NULL,
		.enabled = false
	};


void TIM3_IRQHandler() {if (DelayTIM3.enabled) {timerHandler(&DelayTIM3);}}
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <TIM3_IRQHandler+0x18>)
 8001466:	7d5b      	ldrb	r3, [r3, #21]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <TIM3_IRQHandler+0x12>
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM3_IRQHandler+0x18>)
 800146e:	f000 f813 	bl	8001498 <timerHandler>
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000003c 	.word	0x2000003c

0800147c <TIM4_IRQHandler>:
		.is_loop = NULL,
		.enabled = false
	};


void TIM4_IRQHandler() {if (DelayTIM4.enabled) {timerHandler(&DelayTIM4);}}
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <TIM4_IRQHandler+0x18>)
 8001482:	7d5b      	ldrb	r3, [r3, #21]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <TIM4_IRQHandler+0x12>
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM4_IRQHandler+0x18>)
 800148a:	f000 f805 	bl	8001498 <timerHandler>
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000054 	.word	0x20000054

08001498 <timerHandler>:
		.callback_ptr = NULL,
		.is_loop = NULL,
		.enabled = false
	};

void timerHandler(DelayTIM *delay_timer) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    delay_timer->TIM->SR &= ~TIM_SR_UIF;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	611a      	str	r2, [r3, #16]
	if (delay_timer->callback_ptr == NULL) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <timerHandler+0x28>
		stopTimer(delay_timer);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 f8a5 	bl	8001608 <stopTimer>
		return;
 80014be:	e015      	b.n	80014ec <timerHandler+0x54>
	}
	if (delay_timer->is_loop) {
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7d1b      	ldrb	r3, [r3, #20]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <timerHandler+0x38>
		delay_timer->callback_ptr();
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4798      	blx	r3
		return;
 80014ce:	e00d      	b.n	80014ec <timerHandler+0x54>
	}
	if (!delay_timer->is_loop){
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7d1b      	ldrb	r3, [r3, #20]
 80014d4:	f083 0301 	eor.w	r3, r3, #1
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <timerHandler+0x54>
		stopTimer(delay_timer);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f892 	bl	8001608 <stopTimer>
		delay_timer->callback_ptr();
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	4798      	blx	r3
		return;
 80014ea:	bf00      	nop
	}
}
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <timerInitialise>:

void timerInitialise(DelayTIM *delay_timer)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	// Enable appropriate functions
	enableTimer(delay_timer);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f808 	bl	8001510 <enableTimer>
	enableInterrupts(delay_timer);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f840 	bl	8001586 <enableInterrupts>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <enableTimer>:

void enableTimer(DelayTIM *delay_timer)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	// Enable the clock for timer
	RCC->APB1ENR |= delay_timer->MaskAPB1ENR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <enableTimer+0x44>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <enableTimer+0x44>)
 8001522:	4313      	orrs	r3, r2
 8001524:	61cb      	str	r3, [r1, #28]
	delay_timer->TIM->PSC = 0x1F3F; // 7999
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
	delay_timer->TIM->CR1 |= TIM_CR1_CEN;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0201 	orr.w	r2, r2, #1
 800153e:	601a      	str	r2, [r3, #0]
	triggerPrescaler(delay_timer);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f809 	bl	8001558 <triggerPrescaler>
	delay_timer->enabled = true;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2201      	movs	r2, #1
 800154a:	755a      	strb	r2, [r3, #21]
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000

08001558 <triggerPrescaler>:

// Pre-scaler updates only upon "events" so this triggers an overflow
void triggerPrescaler(DelayTIM *delay_timer)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	delay_timer->TIM->ARR = 0x01;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	62da      	str	r2, [r3, #44]	; 0x2c
	delay_timer->TIM->CNT = 0x00;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
	delay_timer->TIM->ARR = 0xFFFFFFFF;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <enableInterrupts>:

void enableInterrupts(DelayTIM *delay_timer)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800158e:	b672      	cpsid	i
}
 8001590:	bf00      	nop
	__disable_irq();

    // Enable the update interrupt
    delay_timer->TIM->DIER |= TIM_DIER_UIE;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	68da      	ldr	r2, [r3, #12]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	60da      	str	r2, [r3, #12]

	// Set priority and enable interrupts
	NVIC_SetPriority(delay_timer->TIM_IRQn, 1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff2e 	bl	800140c <__NVIC_SetPriority>
	NVIC_EnableIRQ(delay_timer->TIM_IRQn);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff0a 	bl	80013d0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80015bc:	b662      	cpsie	i
}
 80015be:	bf00      	nop

	__enable_irq();
}
 80015c0:	bf00      	nop
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <resetTimer>:
uint32_t get_delay(DelayTIM *delay_timer)
{
    return delay_timer->TIM->ARR;
}

void resetTimer(DelayTIM *delay_timer, uint32_t delay_ms) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
	stopTimer(delay_timer);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f818 	bl	8001608 <stopTimer>
    delay_timer->TIM->ARR = delay_ms;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
	delay_timer->TIM->CR1 |= TIM_CR1_CEN;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
	delay_timer->TIM->SR &= ~TIM_SR_UIF;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	611a      	str	r2, [r3, #16]
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <stopTimer>:

void stopTimer(DelayTIM *delay_timer) {
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	delay_timer->TIM->CR1 &= ~TIM_CR1_CEN;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0201 	bic.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]
	delay_timer->TIM->CNT = 0x00;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <setDelay>:
	delay_timer->callback_ptr = callback;
	delay_timer->is_loop = true;
	resetTimer(delay_timer, delay_ms);
}

void setDelay(DelayTIM *delay_timer, uint32_t delay_ms, void (*callback)(void)) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
	delay_timer->callback_ptr = callback;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
	delay_timer->is_loop = false;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	751a      	strb	r2, [r3, #20]
	resetTimer(delay_timer, delay_ms);
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff ffba 	bl	80015c8 <resetTimer>
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001660:	f7ff fea4 	bl	80013ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <LoopForever+0x6>)
  ldr r1, =_edata
 8001666:	490d      	ldr	r1, [pc, #52]	; (800169c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <LoopForever+0xe>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800167c:	4c0a      	ldr	r4, [pc, #40]	; (80016a8 <LoopForever+0x16>)
  movs r3, #0
 800167e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168a:	f004 faed 	bl	8005c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800168e:	f7ff f8b1 	bl	80007f4 <main>

08001692 <LoopForever>:

LoopForever:
    b LoopForever
 8001692:	e7fe      	b.n	8001692 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001694:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 80016a0:	08006640 	.word	0x08006640
  ldr r2, =_sbss
 80016a4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80016a8:	2000068c 	.word	0x2000068c

080016ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>
	...

080016b0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_Init+0x28>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_Init+0x28>)
 80016ba:	f043 0310 	orr.w	r3, r3, #16
 80016be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f94f 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c6:	2000      	movs	r0, #0
 80016c8:	f000 f808 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016cc:	f7ff fc2a 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000

080016dc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x54>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x58>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f967 	bl	80019ce <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001718:	f000 f92f 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x5c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000038 	.word	0x20000038
 8001734:	20000070 	.word	0x20000070
 8001738:	2000006c 	.word	0x2000006c

0800173c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000070 	.word	0x20000070
 8001760:	20000540 	.word	0x20000540

08001764 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;  
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000540 	.word	0x20000540

0800177c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000070 	.word	0x20000070

080017c4 <__NVIC_SetPriorityGrouping>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	; (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	; (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	; (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	; 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	; 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff3e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff31 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa2 	bl	8001920 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b087      	sub	sp, #28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f6:	e154      	b.n	8001ca2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	2101      	movs	r1, #1
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8146 	beq.w	8001c9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d005      	beq.n	8001a28 <HAL_GPIO_Init+0x40>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d130      	bne.n	8001a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a5e:	2201      	movs	r2, #1
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 0201 	and.w	r2, r3, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d017      	beq.n	8001ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d123      	bne.n	8001b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	220f      	movs	r2, #15
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3208      	adds	r2, #8
 8001b14:	6939      	ldr	r1, [r7, #16]
 8001b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 0203 	and.w	r2, r3, #3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 80a0 	beq.w	8001c9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5c:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <HAL_GPIO_Init+0x2d8>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a57      	ldr	r2, [pc, #348]	; (8001cc0 <HAL_GPIO_Init+0x2d8>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <HAL_GPIO_Init+0x2d8>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b74:	4a53      	ldr	r2, [pc, #332]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b9e:	d019      	beq.n	8001bd4 <HAL_GPIO_Init+0x1ec>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a49      	ldr	r2, [pc, #292]	; (8001cc8 <HAL_GPIO_Init+0x2e0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d013      	beq.n	8001bd0 <HAL_GPIO_Init+0x1e8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a48      	ldr	r2, [pc, #288]	; (8001ccc <HAL_GPIO_Init+0x2e4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00d      	beq.n	8001bcc <HAL_GPIO_Init+0x1e4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_GPIO_Init+0x2e8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d007      	beq.n	8001bc8 <HAL_GPIO_Init+0x1e0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a46      	ldr	r2, [pc, #280]	; (8001cd4 <HAL_GPIO_Init+0x2ec>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d101      	bne.n	8001bc4 <HAL_GPIO_Init+0x1dc>
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	e008      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bc4:	2305      	movs	r3, #5
 8001bc6:	e006      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e004      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bcc:	2302      	movs	r3, #2
 8001bce:	e002      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e000      	b.n	8001bd6 <HAL_GPIO_Init+0x1ee>
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	f002 0203 	and.w	r2, r2, #3
 8001bdc:	0092      	lsls	r2, r2, #2
 8001bde:	4093      	lsls	r3, r2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001be6:	4937      	ldr	r1, [pc, #220]	; (8001cc4 <HAL_GPIO_Init+0x2dc>)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c18:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c42:	4a25      	ldr	r2, [pc, #148]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c96:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <HAL_GPIO_Init+0x2f0>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f47f aea3 	bne.w	80019f8 <HAL_GPIO_Init+0x10>
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
 8001cb6:	371c      	adds	r7, #28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	48000400 	.word	0x48000400
 8001ccc:	48000800 	.word	0x48000800
 8001cd0:	48000c00 	.word	0x48000c00
 8001cd4:	48001000 	.word	0x48001000
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	e001      	b.n	8001cfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d1c:	787b      	ldrb	r3, [r7, #1]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d22:	887a      	ldrh	r2, [r7, #2]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e081      	b.n	8001e52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff f902 	bl	8000f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d107      	bne.n	8001db6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	e006      	b.n	8001dc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001dc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d104      	bne.n	8001dd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001de8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001df8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69d9      	ldr	r1, [r3, #28]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	4608      	mov	r0, r1
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	817b      	strh	r3, [r7, #10]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	813b      	strh	r3, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	f040 80f9 	bne.w	8002076 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e84:	6a3b      	ldr	r3, [r7, #32]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <HAL_I2C_Mem_Write+0x34>
 8001e8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0ed      	b.n	8002078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2C_Mem_Write+0x4e>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e0e6      	b.n	8002078 <HAL_I2C_Mem_Write+0x21c>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eb2:	f7ff fc57 	bl	8001764 <HAL_GetTick>
 8001eb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	2319      	movs	r3, #25
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f955 	bl	8002174 <I2C_WaitOnFlagUntilTimeout>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0d1      	b.n	8002078 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2221      	movs	r2, #33	; 0x21
 8001ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2240      	movs	r2, #64	; 0x40
 8001ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a3a      	ldr	r2, [r7, #32]
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001efc:	88f8      	ldrh	r0, [r7, #6]
 8001efe:	893a      	ldrh	r2, [r7, #8]
 8001f00:	8979      	ldrh	r1, [r7, #10]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f8b9 	bl	8002084 <I2C_RequestMemoryWrite>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0a9      	b.n	8002078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d90e      	bls.n	8001f4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	22ff      	movs	r2, #255	; 0xff
 8001f32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	8979      	ldrh	r1, [r7, #10]
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f000 facf 	bl	80024e8 <I2C_TransferConfig>
 8001f4a:	e00f      	b.n	8001f6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	8979      	ldrh	r1, [r7, #10]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fabe 	bl	80024e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 f94e 	bl	8002212 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e07b      	b.n	8002078 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d034      	beq.n	8002024 <HAL_I2C_Mem_Write+0x1c8>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d130      	bne.n	8002024 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 f8d1 	bl	8002174 <I2C_WaitOnFlagUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e04d      	b.n	8002078 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2bff      	cmp	r3, #255	; 0xff
 8001fe4:	d90e      	bls.n	8002004 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	22ff      	movs	r2, #255	; 0xff
 8001fea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	8979      	ldrh	r1, [r7, #10]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fa73 	bl	80024e8 <I2C_TransferConfig>
 8002002:	e00f      	b.n	8002024 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002012:	b2da      	uxtb	r2, r3
 8002014:	8979      	ldrh	r1, [r7, #10]
 8002016:	2300      	movs	r3, #0
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 fa62 	bl	80024e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d19e      	bne.n	8001f6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f934 	bl	80022a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e01a      	b.n	8002078 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2220      	movs	r2, #32
 8002048:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_I2C_Mem_Write+0x224>)
 8002056:	400b      	ands	r3, r1
 8002058:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2220      	movs	r2, #32
 800205e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	e000      	b.n	8002078 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002076:	2302      	movs	r3, #2
  }
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	fe00e800 	.word	0xfe00e800

08002084 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af02      	add	r7, sp, #8
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	817b      	strh	r3, [r7, #10]
 8002096:	460b      	mov	r3, r1
 8002098:	813b      	strh	r3, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	8979      	ldrh	r1, [r7, #10]
 80020a4:	4b20      	ldr	r3, [pc, #128]	; (8002128 <I2C_RequestMemoryWrite+0xa4>)
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fa1b 	bl	80024e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	69b9      	ldr	r1, [r7, #24]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f8ab 	bl	8002212 <I2C_WaitOnTXISFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e02c      	b.n	8002120 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020cc:	893b      	ldrh	r3, [r7, #8]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	629a      	str	r2, [r3, #40]	; 0x28
 80020d6:	e015      	b.n	8002104 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020d8:	893b      	ldrh	r3, [r7, #8]
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	b29b      	uxth	r3, r3
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	69b9      	ldr	r1, [r7, #24]
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f891 	bl	8002212 <I2C_WaitOnTXISFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e012      	b.n	8002120 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020fa:	893b      	ldrh	r3, [r7, #8]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2200      	movs	r2, #0
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f830 	bl	8002174 <I2C_WaitOnFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	80002000 	.word	0x80002000

0800212c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b02      	cmp	r3, #2
 8002140:	d103      	bne.n	800214a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2200      	movs	r2, #0
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d007      	beq.n	8002168 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699a      	ldr	r2, [r3, #24]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0201 	orr.w	r2, r2, #1
 8002166:	619a      	str	r2, [r3, #24]
  }
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002184:	e031      	b.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800218c:	d02d      	beq.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218e:	f7ff fae9 	bl	8001764 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d122      	bne.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4013      	ands	r3, r2
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	461a      	mov	r2, r3
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d113      	bne.n	80021ea <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0220 	orr.w	r2, r3, #32
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4013      	ands	r3, r2
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	bf0c      	ite	eq
 80021fa:	2301      	moveq	r3, #1
 80021fc:	2300      	movne	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	429a      	cmp	r2, r3
 8002206:	d0be      	beq.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800221e:	e033      	b.n	8002288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f87f 	bl	8002328 <I2C_IsErrorOccurred>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e031      	b.n	8002298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800223a:	d025      	beq.n	8002288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800223c:	f7ff fa92 	bl	8001764 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	429a      	cmp	r2, r3
 800224a:	d302      	bcc.n	8002252 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d11a      	bne.n	8002288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d013      	beq.n	8002288 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f043 0220 	orr.w	r2, r3, #32
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b02      	cmp	r3, #2
 8002294:	d1c4      	bne.n	8002220 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ac:	e02f      	b.n	800230e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f838 	bl	8002328 <I2C_IsErrorOccurred>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e02d      	b.n	800231e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7ff fa4f 	bl	8001764 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d302      	bcc.n	80022d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11a      	bne.n	800230e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0320 	and.w	r3, r3, #32
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	d013      	beq.n	800230e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e007      	b.n	800231e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b20      	cmp	r3, #32
 800231a:	d1c8      	bne.n	80022ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d068      	beq.n	8002426 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2210      	movs	r2, #16
 800235a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800235c:	e049      	b.n	80023f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002364:	d045      	beq.n	80023f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002366:	f7ff f9fd 	bl	8001764 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	429a      	cmp	r2, r3
 8002374:	d302      	bcc.n	800237c <I2C_IsErrorOccurred+0x54>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d13a      	bne.n	80023f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002386:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800238e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239e:	d121      	bne.n	80023e4 <I2C_IsErrorOccurred+0xbc>
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023a6:	d01d      	beq.n	80023e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	2b20      	cmp	r3, #32
 80023ac:	d01a      	beq.n	80023e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023be:	f7ff f9d1 	bl	8001764 <HAL_GetTick>
 80023c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c4:	e00e      	b.n	80023e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023c6:	f7ff f9cd 	bl	8001764 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b19      	cmp	r3, #25
 80023d2:	d907      	bls.n	80023e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023d4:	6a3b      	ldr	r3, [r7, #32]
 80023d6:	f043 0320 	orr.w	r3, r3, #32
 80023da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80023e2:	e006      	b.n	80023f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	d1e9      	bne.n	80023c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0320 	and.w	r3, r3, #32
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d003      	beq.n	8002408 <I2C_IsErrorOccurred+0xe0>
 8002400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0aa      	beq.n	800235e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2220      	movs	r2, #32
 8002416:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f043 0308 	orr.w	r3, r3, #8
 8002460:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800246a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00b      	beq.n	8002494 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01c      	beq.n	80024d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff fe45 	bl	800212c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <I2C_IsErrorOccurred+0x1bc>)
 80024ae:	400b      	ands	r3, r1
 80024b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80024d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	fe00e800 	.word	0xfe00e800

080024e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	817b      	strh	r3, [r7, #10]
 80024f6:	4613      	mov	r3, r2
 80024f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024fa:	897b      	ldrh	r3, [r7, #10]
 80024fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002500:	7a7b      	ldrb	r3, [r7, #9]
 8002502:	041b      	lsls	r3, r3, #16
 8002504:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002508:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	4313      	orrs	r3, r2
 8002512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002516:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	0d5b      	lsrs	r3, r3, #21
 8002522:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <I2C_TransferConfig+0x60>)
 8002528:	430b      	orrs	r3, r1
 800252a:	43db      	mvns	r3, r3
 800252c:	ea02 0103 	and.w	r1, r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	430a      	orrs	r2, r1
 8002538:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	03ff63ff 	.word	0x03ff63ff

0800254c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	d138      	bne.n	80025d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800256c:	2302      	movs	r3, #2
 800256e:	e032      	b.n	80025d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800259e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d139      	bne.n	800266c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002602:	2302      	movs	r3, #2
 8002604:	e033      	b.n	800266e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2224      	movs	r2, #36	; 0x24
 8002612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002634:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800267a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267c:	b08b      	sub	sp, #44	; 0x2c
 800267e:	af06      	add	r7, sp, #24
 8002680:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0c4      	b.n	8002816 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d106      	bne.n	80026a6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fe fd8f 	bl	80011c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2203      	movs	r2, #3
 80026aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fa6e 	bl	8005b94 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e040      	b.n	8002740 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	3301      	adds	r3, #1
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	7bfa      	ldrb	r2, [r7, #15]
 80026e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	3303      	adds	r3, #3
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	3338      	adds	r3, #56	; 0x38
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002712:	7bfa      	ldrb	r2, [r7, #15]
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	333c      	adds	r3, #60	; 0x3c
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002726:	7bfa      	ldrb	r2, [r7, #15]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	3340      	adds	r3, #64	; 0x40
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	3301      	adds	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d3b9      	bcc.n	80026be <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	e044      	b.n	80027da <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	440b      	add	r3, r1
 800278a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002792:	7bfa      	ldrb	r2, [r7, #15]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	440b      	add	r3, r1
 80027a0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	440b      	add	r3, r1
 80027cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	3301      	adds	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d3b5      	bcc.n	8002750 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	687e      	ldr	r6, [r7, #4]
 80027ec:	466d      	mov	r5, sp
 80027ee:	f106 0410 	add.w	r4, r6, #16
 80027f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027f6:	6823      	ldr	r3, [r4, #0]
 80027f8:	602b      	str	r3, [r5, #0]
 80027fa:	1d33      	adds	r3, r6, #4
 80027fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027fe:	6838      	ldr	r0, [r7, #0]
 8002800:	f003 f9e3 	bl	8005bca <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002826:	af00      	add	r7, sp, #0
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002830:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f001 b823 	b.w	800388c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 817d 	beq.w	8002b56 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800285c:	4bbc      	ldr	r3, [pc, #752]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b04      	cmp	r3, #4
 8002866:	d00c      	beq.n	8002882 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002868:	4bb9      	ldr	r3, [pc, #740]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d15c      	bne.n	800292e <HAL_RCC_OscConfig+0x10e>
 8002874:	4bb6      	ldr	r3, [pc, #728]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002880:	d155      	bne.n	800292e <HAL_RCC_OscConfig+0x10e>
 8002882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002886:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002896:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289a:	fab3 f383 	clz	r3, r3
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d102      	bne.n	80028b4 <HAL_RCC_OscConfig+0x94>
 80028ae:	4ba8      	ldr	r3, [pc, #672]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	e015      	b.n	80028e0 <HAL_RCC_OscConfig+0xc0>
 80028b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028bc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80028c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80028d0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80028dc:	4b9c      	ldr	r3, [pc, #624]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028e4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80028e8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80028ec:	fa92 f2a2 	rbit	r2, r2
 80028f0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80028f4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80028f8:	fab2 f282 	clz	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f042 0220 	orr.w	r2, r2, #32
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	f002 021f 	and.w	r2, r2, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f202 	lsl.w	r2, r1, r2
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 811f 	beq.w	8002b54 <HAL_RCC_OscConfig+0x334>
 8002916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 8116 	bne.w	8002b54 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f000 bfaf 	b.w	800388c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x12e>
 8002940:	4b83      	ldr	r3, [pc, #524]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a82      	ldr	r2, [pc, #520]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e036      	b.n	80029bc <HAL_RCC_OscConfig+0x19c>
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x158>
 800295e:	4b7c      	ldr	r3, [pc, #496]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a7b      	ldr	r2, [pc, #492]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b79      	ldr	r3, [pc, #484]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a78      	ldr	r2, [pc, #480]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e021      	b.n	80029bc <HAL_RCC_OscConfig+0x19c>
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002988:	d10c      	bne.n	80029a4 <HAL_RCC_OscConfig+0x184>
 800298a:	4b71      	ldr	r3, [pc, #452]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a70      	ldr	r2, [pc, #448]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	4b6e      	ldr	r3, [pc, #440]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a6d      	ldr	r2, [pc, #436]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e00b      	b.n	80029bc <HAL_RCC_OscConfig+0x19c>
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a69      	ldr	r2, [pc, #420]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a66      	ldr	r2, [pc, #408]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 80029b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ba:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029bc:	4b64      	ldr	r3, [pc, #400]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 80029be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c0:	f023 020f 	bic.w	r2, r3, #15
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	495f      	ldr	r1, [pc, #380]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d059      	beq.n	8002a9a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e6:	f7fe febd 	bl	8001764 <HAL_GetTick>
 80029ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe feb8 	bl	8001764 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b64      	cmp	r3, #100	; 0x64
 80029fe:	d902      	bls.n	8002a06 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f000 bf43 	b.w	800388c <HAL_RCC_OscConfig+0x106c>
 8002a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a1a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_OscConfig+0x218>
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	e015      	b.n	8002a64 <HAL_RCC_OscConfig+0x244>
 8002a38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a3c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a50:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a54:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a58:	fa93 f3a3 	rbit	r3, r3
 8002a5c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a60:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a68:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002a6c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002a70:	fa92 f2a2 	rbit	r2, r2
 8002a74:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002a78:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002a7c:	fab2 f282 	clz	r2, r2
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	f042 0220 	orr.w	r2, r2, #32
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f002 021f 	and.w	r2, r2, #31
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ab      	beq.n	80029f0 <HAL_RCC_OscConfig+0x1d0>
 8002a98:	e05d      	b.n	8002b56 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fe63 	bl	8001764 <HAL_GetTick>
 8002a9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe fe5e 	bl	8001764 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b64      	cmp	r3, #100	; 0x64
 8002ab2:	d902      	bls.n	8002aba <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	f000 bee9 	b.w	800388c <HAL_RCC_OscConfig+0x106c>
 8002aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abe:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002ace:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d102      	bne.n	8002aec <HAL_RCC_OscConfig+0x2cc>
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	e015      	b.n	8002b18 <HAL_RCC_OscConfig+0x2f8>
 8002aec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002af0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b04:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <HAL_RCC_OscConfig+0x330>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b1c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b24:	fa92 f2a2 	rbit	r2, r2
 8002b28:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b2c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b30:	fab2 f282 	clz	r2, r2
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f042 0220 	orr.w	r2, r2, #32
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	f002 021f 	and.w	r2, r2, #31
 8002b40:	2101      	movs	r1, #1
 8002b42:	fa01 f202 	lsl.w	r2, r1, r2
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ab      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x284>
 8002b4c:	e003      	b.n	8002b56 <HAL_RCC_OscConfig+0x336>
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 817d 	beq.w	8002e66 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b6c:	4ba6      	ldr	r3, [pc, #664]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00b      	beq.n	8002b90 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b78:	4ba3      	ldr	r3, [pc, #652]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 030c 	and.w	r3, r3, #12
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d172      	bne.n	8002c6a <HAL_RCC_OscConfig+0x44a>
 8002b84:	4ba0      	ldr	r3, [pc, #640]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d16c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x44a>
 8002b90:	2302      	movs	r3, #2
 8002b92:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ba2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	fab3 f383 	clz	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	095b      	lsrs	r3, r3, #5
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d102      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3a0>
 8002bba:	4b93      	ldr	r3, [pc, #588]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	e013      	b.n	8002be8 <HAL_RCC_OscConfig+0x3c8>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002bd8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002be4:	4b88      	ldr	r3, [pc, #544]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	2202      	movs	r2, #2
 8002bea:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002bee:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002bf2:	fa92 f2a2 	rbit	r2, r2
 8002bf6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002bfa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002bfe:	fab2 f282 	clz	r2, r2
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	f042 0220 	orr.w	r2, r2, #32
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	f002 021f 	and.w	r2, r2, #31
 8002c0e:	2101      	movs	r1, #1
 8002c10:	fa01 f202 	lsl.w	r2, r1, r2
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_RCC_OscConfig+0x410>
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d002      	beq.n	8002c30 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f000 be2e 	b.w	800388c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b75      	ldr	r3, [pc, #468]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	21f8      	movs	r1, #248	; 0xf8
 8002c46:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c4e:	fa91 f1a1 	rbit	r1, r1
 8002c52:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c56:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c5a:	fab1 f181 	clz	r1, r1
 8002c5e:	b2c9      	uxtb	r1, r1
 8002c60:	408b      	lsls	r3, r1
 8002c62:	4969      	ldr	r1, [pc, #420]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c68:	e0fd      	b.n	8002e66 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8088 	beq.w	8002d8c <HAL_RCC_OscConfig+0x56c>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c82:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002c8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fd5c 	bl	8001764 <HAL_GetTick>
 8002cac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	e00a      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cb2:	f7fe fd57 	bl	8001764 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d902      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	f000 bde2 	b.w	800388c <HAL_RCC_OscConfig+0x106c>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002cda:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x4d8>
 8002cf2:	4b45      	ldr	r3, [pc, #276]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	e013      	b.n	8002d20 <HAL_RCC_OscConfig+0x500>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d10:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d1c:	4b3a      	ldr	r3, [pc, #232]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2202      	movs	r2, #2
 8002d22:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d26:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d2a:	fa92 f2a2 	rbit	r2, r2
 8002d2e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d32:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f002 021f 	and.w	r2, r2, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0af      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	21f8      	movs	r1, #248	; 0xf8
 8002d68:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002d70:	fa91 f1a1 	rbit	r1, r1
 8002d74:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002d78:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002d7c:	fab1 f181 	clz	r1, r1
 8002d80:	b2c9      	uxtb	r1, r1
 8002d82:	408b      	lsls	r3, r1
 8002d84:	4920      	ldr	r1, [pc, #128]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
 8002d8a:	e06c      	b.n	8002e66 <HAL_RCC_OscConfig+0x646>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d9e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	461a      	mov	r2, r3
 8002db4:	2300      	movs	r3, #0
 8002db6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fe fcd4 	bl	8001764 <HAL_GetTick>
 8002dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fccf 	bl	8001764 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d902      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	f000 bd5a 	b.w	800388c <HAL_RCC_OscConfig+0x106c>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002de2:	fa93 f3a3 	rbit	r3, r3
 8002de6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d104      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5ec>
 8002e02:	4b01      	ldr	r3, [pc, #4]	; (8002e08 <HAL_RCC_OscConfig+0x5e8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	e015      	b.n	8002e34 <HAL_RCC_OscConfig+0x614>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e28:	fa93 f3a3 	rbit	r3, r3
 8002e2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e30:	4bc8      	ldr	r3, [pc, #800]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2202      	movs	r2, #2
 8002e36:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e3e:	fa92 f2a2 	rbit	r2, r2
 8002e42:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e46:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e4a:	fab2 f282 	clz	r2, r2
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	f042 0220 	orr.w	r2, r2, #32
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	f002 021f 	and.w	r2, r2, #31
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1ad      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 8110 	beq.w	800309c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d079      	beq.n	8002f80 <HAL_RCC_OscConfig+0x760>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	fab3 f383 	clz	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4bab      	ldr	r3, [pc, #684]	; (8003158 <HAL_RCC_OscConfig+0x938>)
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7fe fc55 	bl	8001764 <HAL_GetTick>
 8002eba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fe fc50 	bl	8001764 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d902      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	f000 bcdb 	b.w	800388c <HAL_RCC_OscConfig+0x106c>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002edc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	fa93 f2a3 	rbit	r2, r3
 8002f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f14:	2202      	movs	r2, #2
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	fa93 f2a3 	rbit	r2, r3
 8002f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f2e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f30:	4b88      	ldr	r3, [pc, #544]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 8002f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f38:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	6019      	str	r1, [r3, #0]
 8002f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f44:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	fa93 f1a3 	rbit	r1, r3
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f56:	6019      	str	r1, [r3, #0]
  return result;
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0a0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x6a0>
 8002f7e:	e08d      	b.n	800309c <HAL_RCC_OscConfig+0x87c>
 8002f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f84:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f88:	2201      	movs	r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	fa93 f2a3 	rbit	r2, r3
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002fa2:	601a      	str	r2, [r3, #0]
  return result;
 8002fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002fac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b68      	ldr	r3, [pc, #416]	; (8003158 <HAL_RCC_OscConfig+0x938>)
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fbcf 	bl	8001764 <HAL_GetTick>
 8002fc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fcc:	f7fe fbca 	bl	8001764 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d902      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	f000 bc55 	b.w	800388c <HAL_RCC_OscConfig+0x106c>
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800300e:	2202      	movs	r2, #2
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	fa93 f2a3 	rbit	r2, r3
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800304c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304e:	4b41      	ldr	r3, [pc, #260]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 8003050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800305a:	2102      	movs	r1, #2
 800305c:	6019      	str	r1, [r3, #0]
 800305e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003062:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	fa93 f1a3 	rbit	r1, r3
 800306c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003070:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003074:	6019      	str	r1, [r3, #0]
  return result;
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d197      	bne.n	8002fcc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 81a1 	beq.w	80033f4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b8:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d116      	bne.n	80030f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	4b23      	ldr	r3, [pc, #140]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 80030ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ce:	61d3      	str	r3, [r2, #28]
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80030e0:	601a      	str	r2, [r3, #0]
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80030ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_RCC_OscConfig+0x93c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11a      	bne.n	8003134 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_RCC_OscConfig+0x93c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a16      	ldr	r2, [pc, #88]	; (800315c <HAL_RCC_OscConfig+0x93c>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe fb2b 	bl	8001764 <HAL_GetTick>
 800310e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	e009      	b.n	8003128 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe fb26 	bl	8001764 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e3b1      	b.n	800388c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_RCC_OscConfig+0x93c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ef      	beq.n	8003114 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003138:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10d      	bne.n	8003160 <HAL_RCC_OscConfig+0x940>
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	4a02      	ldr	r2, [pc, #8]	; (8003154 <HAL_RCC_OscConfig+0x934>)
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	6213      	str	r3, [r2, #32]
 8003150:	e03c      	b.n	80031cc <HAL_RCC_OscConfig+0x9ac>
 8003152:	bf00      	nop
 8003154:	40021000 	.word	0x40021000
 8003158:	10908120 	.word	0x10908120
 800315c:	40007000 	.word	0x40007000
 8003160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003164:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10c      	bne.n	800318a <HAL_RCC_OscConfig+0x96a>
 8003170:	4bc1      	ldr	r3, [pc, #772]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4ac0      	ldr	r2, [pc, #768]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	4bbe      	ldr	r3, [pc, #760]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4abd      	ldr	r2, [pc, #756]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 8003182:	f023 0304 	bic.w	r3, r3, #4
 8003186:	6213      	str	r3, [r2, #32]
 8003188:	e020      	b.n	80031cc <HAL_RCC_OscConfig+0x9ac>
 800318a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b05      	cmp	r3, #5
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0x994>
 800319a:	4bb7      	ldr	r3, [pc, #732]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4ab6      	ldr	r2, [pc, #728]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80031a0:	f043 0304 	orr.w	r3, r3, #4
 80031a4:	6213      	str	r3, [r2, #32]
 80031a6:	4bb4      	ldr	r3, [pc, #720]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	4ab3      	ldr	r2, [pc, #716]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	6213      	str	r3, [r2, #32]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0x9ac>
 80031b4:	4bb0      	ldr	r3, [pc, #704]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4aaf      	ldr	r2, [pc, #700]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	4bad      	ldr	r3, [pc, #692]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4aac      	ldr	r2, [pc, #688]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8081 	beq.w	80032e0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031de:	f7fe fac1 	bl	8001764 <HAL_GetTick>
 80031e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e6:	e00b      	b.n	8003200 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f7fe fabc 	bl	8001764 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e345      	b.n	800388c <HAL_RCC_OscConfig+0x106c>
 8003200:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003204:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003208:	2202      	movs	r2, #2
 800320a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	fa93 f2a3 	rbit	r2, r3
 800321a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800322c:	2202      	movs	r2, #2
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003234:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	fa93 f2a3 	rbit	r2, r3
 800323e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003242:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003246:	601a      	str	r2, [r3, #0]
  return result;
 8003248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003250:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0302 	orr.w	r3, r3, #2
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d102      	bne.n	800326c <HAL_RCC_OscConfig+0xa4c>
 8003266:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	e013      	b.n	8003294 <HAL_RCC_OscConfig+0xa74>
 800326c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003270:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003274:	2202      	movs	r2, #2
 8003276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003278:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	fa93 f2a3 	rbit	r2, r3
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	4b79      	ldr	r3, [pc, #484]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003298:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800329c:	2102      	movs	r1, #2
 800329e:	6011      	str	r1, [r2, #0]
 80032a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80032a8:	6812      	ldr	r2, [r2, #0]
 80032aa:	fa92 f1a2 	rbit	r1, r2
 80032ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80032b6:	6011      	str	r1, [r2, #0]
  return result;
 80032b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032bc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	fab2 f282 	clz	r2, r2
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032cc:	b2d2      	uxtb	r2, r2
 80032ce:	f002 021f 	and.w	r2, r2, #31
 80032d2:	2101      	movs	r1, #1
 80032d4:	fa01 f202 	lsl.w	r2, r1, r2
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d084      	beq.n	80031e8 <HAL_RCC_OscConfig+0x9c8>
 80032de:	e07f      	b.n	80033e0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fa40 	bl	8001764 <HAL_GetTick>
 80032e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e8:	e00b      	b.n	8003302 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe fa3b 	bl	8001764 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e2c4      	b.n	800388c <HAL_RCC_OscConfig+0x106c>
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800330a:	2202      	movs	r2, #2
 800330c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	fa93 f2a3 	rbit	r2, r3
 800331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003320:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800332e:	2202      	movs	r2, #2
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003348:	601a      	str	r2, [r3, #0]
  return result;
 800334a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003352:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d102      	bne.n	800336e <HAL_RCC_OscConfig+0xb4e>
 8003368:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	e013      	b.n	8003396 <HAL_RCC_OscConfig+0xb76>
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003376:	2202      	movs	r2, #2
 8003378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	fa93 f2a3 	rbit	r2, r3
 8003388:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	4b39      	ldr	r3, [pc, #228]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800339a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800339e:	2102      	movs	r1, #2
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	fa92 f1a2 	rbit	r1, r2
 80033b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80033b8:	6011      	str	r1, [r2, #0]
  return result;
 80033ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033be:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80033c2:	6812      	ldr	r2, [r2, #0]
 80033c4:	fab2 f282 	clz	r2, r2
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	f002 021f 	and.w	r2, r2, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d184      	bne.n	80032ea <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d105      	bne.n	80033f4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e8:	4b23      	ldr	r3, [pc, #140]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	4a22      	ldr	r2, [pc, #136]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 80033ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8242 	beq.w	800388a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_RCC_OscConfig+0xc58>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	f000 8213 	beq.w	800383a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	2b02      	cmp	r3, #2
 8003422:	f040 8162 	bne.w	80036ea <HAL_RCC_OscConfig+0xeca>
 8003426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800342e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003432:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fa93 f2a3 	rbit	r2, r3
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800344a:	601a      	str	r2, [r3, #0]
  return result;
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003454:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003460:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	461a      	mov	r2, r3
 8003468:	2300      	movs	r3, #0
 800346a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe f97a 	bl	8001764 <HAL_GetTick>
 8003470:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003474:	e00c      	b.n	8003490 <HAL_RCC_OscConfig+0xc70>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347c:	f7fe f972 	bl	8001764 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e1fd      	b.n	800388c <HAL_RCC_OscConfig+0x106c>
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003498:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800349c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	fa93 f2a3 	rbit	r2, r3
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034b4:	601a      	str	r2, [r3, #0]
  return result;
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034c0:	fab3 f383 	clz	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d102      	bne.n	80034da <HAL_RCC_OscConfig+0xcba>
 80034d4:	4bb0      	ldr	r3, [pc, #704]	; (8003798 <HAL_RCC_OscConfig+0xf78>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	e027      	b.n	800352a <HAL_RCC_OscConfig+0xd0a>
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ec:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	fa93 f2a3 	rbit	r2, r3
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003508:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003512:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	fa93 f2a3 	rbit	r2, r3
 800351c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003520:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	4b9c      	ldr	r3, [pc, #624]	; (8003798 <HAL_RCC_OscConfig+0xf78>)
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800352e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003532:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003536:	6011      	str	r1, [r2, #0]
 8003538:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800353c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	fa92 f1a2 	rbit	r1, r2
 8003546:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800354a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800354e:	6011      	str	r1, [r2, #0]
  return result;
 8003550:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003554:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003558:	6812      	ldr	r2, [r2, #0]
 800355a:	fab2 f282 	clz	r2, r2
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	f042 0220 	orr.w	r2, r2, #32
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	f002 021f 	and.w	r2, r2, #31
 800356a:	2101      	movs	r1, #1
 800356c:	fa01 f202 	lsl.w	r2, r1, r2
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d182      	bne.n	800347c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003576:	4b88      	ldr	r3, [pc, #544]	; (8003798 <HAL_RCC_OscConfig+0xf78>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	430b      	orrs	r3, r1
 8003598:	497f      	ldr	r1, [pc, #508]	; (8003798 <HAL_RCC_OscConfig+0xf78>)
 800359a:	4313      	orrs	r3, r2
 800359c:	604b      	str	r3, [r1, #4]
 800359e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80035a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	fa93 f2a3 	rbit	r2, r3
 80035ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80035c2:	601a      	str	r2, [r3, #0]
  return result;
 80035c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80035cc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ce:	fab3 f383 	clz	r3, r3
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	461a      	mov	r2, r3
 80035e0:	2301      	movs	r3, #1
 80035e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe f8be 	bl	8001764 <HAL_GetTick>
 80035e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ec:	e009      	b.n	8003602 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ee:	f7fe f8b9 	bl	8001764 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e144      	b.n	800388c <HAL_RCC_OscConfig+0x106c>
 8003602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003606:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800360a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800360e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003614:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	fa93 f2a3 	rbit	r2, r3
 800361e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003622:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003626:	601a      	str	r2, [r3, #0]
  return result;
 8003628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003630:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HAL_RCC_OscConfig+0xe2c>
 8003646:	4b54      	ldr	r3, [pc, #336]	; (8003798 <HAL_RCC_OscConfig+0xf78>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e027      	b.n	800369c <HAL_RCC_OscConfig+0xe7c>
 800364c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003650:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003654:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003658:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	fa93 f2a3 	rbit	r2, r3
 8003668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800367a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003684:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	fa93 f2a3 	rbit	r2, r3
 800368e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003692:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	4b3f      	ldr	r3, [pc, #252]	; (8003798 <HAL_RCC_OscConfig+0xf78>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80036a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036ae:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	fa92 f1a2 	rbit	r1, r2
 80036b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80036c0:	6011      	str	r1, [r2, #0]
  return result;
 80036c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	fab2 f282 	clz	r2, r2
 80036d0:	b2d2      	uxtb	r2, r2
 80036d2:	f042 0220 	orr.w	r2, r2, #32
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	f002 021f 	and.w	r2, r2, #31
 80036dc:	2101      	movs	r1, #1
 80036de:	fa01 f202 	lsl.w	r2, r1, r2
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d082      	beq.n	80035ee <HAL_RCC_OscConfig+0xdce>
 80036e8:	e0cf      	b.n	800388a <HAL_RCC_OscConfig+0x106a>
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80036f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80036f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	fa93 f2a3 	rbit	r2, r3
 8003706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800370e:	601a      	str	r2, [r3, #0]
  return result;
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003718:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003724:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	461a      	mov	r2, r3
 800372c:	2300      	movs	r3, #0
 800372e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe f818 	bl	8001764 <HAL_GetTick>
 8003734:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	e009      	b.n	800374e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe f813 	bl	8001764 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e09e      	b.n	800388c <HAL_RCC_OscConfig+0x106c>
 800374e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003752:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003756:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800375a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003760:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	fa93 f2a3 	rbit	r2, r3
 800376a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003772:	601a      	str	r2, [r3, #0]
  return result;
 8003774:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003778:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800377c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d104      	bne.n	800379c <HAL_RCC_OscConfig+0xf7c>
 8003792:	4b01      	ldr	r3, [pc, #4]	; (8003798 <HAL_RCC_OscConfig+0xf78>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	e029      	b.n	80037ec <HAL_RCC_OscConfig+0xfcc>
 8003798:	40021000 	.word	0x40021000
 800379c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ae:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	fa93 f2a3 	rbit	r2, r3
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80037ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	fa93 f2a3 	rbit	r2, r3
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	4b2b      	ldr	r3, [pc, #172]	; (8003898 <HAL_RCC_OscConfig+0x1078>)
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037f0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80037f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80037f8:	6011      	str	r1, [r2, #0]
 80037fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037fe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	fa92 f1a2 	rbit	r1, r2
 8003808:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003810:	6011      	str	r1, [r2, #0]
  return result;
 8003812:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003816:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	fab2 f282 	clz	r2, r2
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	f042 0220 	orr.w	r2, r2, #32
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	f002 021f 	and.w	r2, r2, #31
 800382c:	2101      	movs	r1, #1
 800382e:	fa01 f202 	lsl.w	r2, r1, r2
 8003832:	4013      	ands	r3, r2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d180      	bne.n	800373a <HAL_RCC_OscConfig+0xf1a>
 8003838:	e027      	b.n	800388a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800383a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e01e      	b.n	800388c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800384e:	4b12      	ldr	r3, [pc, #72]	; (8003898 <HAL_RCC_OscConfig+0x1078>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003856:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800385a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800385e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	429a      	cmp	r2, r3
 800386c:	d10b      	bne.n	8003886 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800386e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003872:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003882:	429a      	cmp	r2, r3
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40021000 	.word	0x40021000

0800389c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b09e      	sub	sp, #120	; 0x78
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e162      	b.n	8003b7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b4:	4b90      	ldr	r3, [pc, #576]	; (8003af8 <HAL_RCC_ClockConfig+0x25c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d910      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b8d      	ldr	r3, [pc, #564]	; (8003af8 <HAL_RCC_ClockConfig+0x25c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	498b      	ldr	r1, [pc, #556]	; (8003af8 <HAL_RCC_ClockConfig+0x25c>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <HAL_RCC_ClockConfig+0x25c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e14a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f0:	4b82      	ldr	r3, [pc, #520]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	497f      	ldr	r1, [pc, #508]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 80dc 	beq.w	8003ac8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d13c      	bne.n	8003992 <HAL_RCC_ClockConfig+0xf6>
 8003918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800391c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003928:	fab3 f383 	clz	r3, r3
 800392c:	b2db      	uxtb	r3, r3
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d102      	bne.n	8003942 <HAL_RCC_ClockConfig+0xa6>
 800393c:	4b6f      	ldr	r3, [pc, #444]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	e00f      	b.n	8003962 <HAL_RCC_ClockConfig+0xc6>
 8003942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003946:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800394a:	fa93 f3a3 	rbit	r3, r3
 800394e:	667b      	str	r3, [r7, #100]	; 0x64
 8003950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003954:	663b      	str	r3, [r7, #96]	; 0x60
 8003956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003958:	fa93 f3a3 	rbit	r3, r3
 800395c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800395e:	4b67      	ldr	r3, [pc, #412]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003966:	65ba      	str	r2, [r7, #88]	; 0x58
 8003968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800396a:	fa92 f2a2 	rbit	r2, r2
 800396e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003972:	fab2 f282 	clz	r2, r2
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f042 0220 	orr.w	r2, r2, #32
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f002 021f 	and.w	r2, r2, #31
 8003982:	2101      	movs	r1, #1
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d17b      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0f3      	b.n	8003b7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d13c      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x178>
 800399a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800399e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039aa:	fab3 f383 	clz	r3, r3
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d102      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x128>
 80039be:	4b4f      	ldr	r3, [pc, #316]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	e00f      	b.n	80039e4 <HAL_RCC_ClockConfig+0x148>
 80039c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	647b      	str	r3, [r7, #68]	; 0x44
 80039d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039d6:	643b      	str	r3, [r7, #64]	; 0x40
 80039d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e0:	4b46      	ldr	r3, [pc, #280]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80039ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039ec:	fa92 f2a2 	rbit	r2, r2
 80039f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80039f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f4:	fab2 f282 	clz	r2, r2
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	f042 0220 	orr.w	r2, r2, #32
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	f002 021f 	and.w	r2, r2, #31
 8003a04:	2101      	movs	r1, #1
 8003a06:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d13a      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0b2      	b.n	8003b7a <HAL_RCC_ClockConfig+0x2de>
 8003a14:	2302      	movs	r3, #2
 8003a16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x1a0>
 8003a36:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	e00d      	b.n	8003a58 <HAL_RCC_ClockConfig+0x1bc>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	2302      	movs	r3, #2
 8003a4a:	623b      	str	r3, [r7, #32]
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	61fb      	str	r3, [r7, #28]
 8003a54:	4b29      	ldr	r3, [pc, #164]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	2202      	movs	r2, #2
 8003a5a:	61ba      	str	r2, [r7, #24]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	fa92 f2a2 	rbit	r2, r2
 8003a62:	617a      	str	r2, [r7, #20]
  return result;
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	fab2 f282 	clz	r2, r2
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f042 0220 	orr.w	r2, r2, #32
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	f002 021f 	and.w	r2, r2, #31
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e079      	b.n	8003b7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	491a      	ldr	r1, [pc, #104]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a98:	f7fd fe64 	bl	8001764 <HAL_GetTick>
 8003a9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fd fe60 	bl	8001764 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e061      	b.n	8003b7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <HAL_RCC_ClockConfig+0x260>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 020c 	and.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d1eb      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCC_ClockConfig+0x25c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d214      	bcs.n	8003b00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_RCC_ClockConfig+0x25c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4906      	ldr	r1, [pc, #24]	; (8003af8 <HAL_RCC_ClockConfig+0x25c>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <HAL_RCC_ClockConfig+0x25c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e040      	b.n	8003b7a <HAL_RCC_ClockConfig+0x2de>
 8003af8:	40022000 	.word	0x40022000
 8003afc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d008      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b0c:	4b1d      	ldr	r3, [pc, #116]	; (8003b84 <HAL_RCC_ClockConfig+0x2e8>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	491a      	ldr	r1, [pc, #104]	; (8003b84 <HAL_RCC_ClockConfig+0x2e8>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2a:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <HAL_RCC_ClockConfig+0x2e8>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4912      	ldr	r1, [pc, #72]	; (8003b84 <HAL_RCC_ClockConfig+0x2e8>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b3e:	f000 f829 	bl	8003b94 <HAL_RCC_GetSysClockFreq>
 8003b42:	4601      	mov	r1, r0
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <HAL_RCC_ClockConfig+0x2e8>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b4c:	22f0      	movs	r2, #240	; 0xf0
 8003b4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	fa92 f2a2 	rbit	r2, r2
 8003b56:	60fa      	str	r2, [r7, #12]
  return result;
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	fab2 f282 	clz	r2, r2
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	40d3      	lsrs	r3, r2
 8003b62:	4a09      	ldr	r2, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x2ec>)
 8003b64:	5cd3      	ldrb	r3, [r2, r3]
 8003b66:	fa21 f303 	lsr.w	r3, r1, r3
 8003b6a:	4a08      	ldr	r2, [pc, #32]	; (8003b8c <HAL_RCC_ClockConfig+0x2f0>)
 8003b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b6e:	4b08      	ldr	r3, [pc, #32]	; (8003b90 <HAL_RCC_ClockConfig+0x2f4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7fd fdb2 	bl	80016dc <HAL_InitTick>
  
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3778      	adds	r7, #120	; 0x78
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	080065d4 	.word	0x080065d4
 8003b8c:	20000038 	.word	0x20000038
 8003b90:	2000006c 	.word	0x2000006c

08003b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b08b      	sub	sp, #44	; 0x2c
 8003b98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61bb      	str	r3, [r7, #24]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003bae:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d002      	beq.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x30>
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d003      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0x36>
 8003bc2:	e03c      	b.n	8003c3e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bc4:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003bc6:	623b      	str	r3, [r7, #32]
      break;
 8003bc8:	e03c      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003bd0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003bd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	fa92 f2a2 	rbit	r2, r2
 8003bdc:	607a      	str	r2, [r7, #4]
  return result;
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	fab2 f282 	clz	r2, r2
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	40d3      	lsrs	r3, r2
 8003be8:	4a1c      	ldr	r2, [pc, #112]	; (8003c5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003bea:	5cd3      	ldrb	r3, [r2, r3]
 8003bec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003bee:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	220f      	movs	r2, #15
 8003bf8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	fa92 f2a2 	rbit	r2, r2
 8003c00:	60fa      	str	r2, [r7, #12]
  return result;
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	fab2 f282 	clz	r2, r2
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	40d3      	lsrs	r3, r2
 8003c0c:	4a14      	ldr	r2, [pc, #80]	; (8003c60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c0e:	5cd3      	ldrb	r3, [r2, r3]
 8003c10:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c1c:	4a0e      	ldr	r2, [pc, #56]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2c:	e004      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	4a0c      	ldr	r2, [pc, #48]	; (8003c64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c32:	fb02 f303 	mul.w	r3, r2, r3
 8003c36:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	623b      	str	r3, [r7, #32]
      break;
 8003c3c:	e002      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c40:	623b      	str	r3, [r7, #32]
      break;
 8003c42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c44:	6a3b      	ldr	r3, [r7, #32]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	372c      	adds	r7, #44	; 0x2c
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000
 8003c58:	007a1200 	.word	0x007a1200
 8003c5c:	080065e4 	.word	0x080065e4
 8003c60:	080065f4 	.word	0x080065f4
 8003c64:	003d0900 	.word	0x003d0900

08003c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b092      	sub	sp, #72	; 0x48
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 80d4 	beq.w	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8c:	4b4e      	ldr	r3, [pc, #312]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8e:	69db      	ldr	r3, [r3, #28]
 8003c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10e      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c98:	4b4b      	ldr	r3, [pc, #300]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4a4a      	ldr	r2, [pc, #296]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	61d3      	str	r3, [r2, #28]
 8003ca4:	4b48      	ldr	r3, [pc, #288]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb6:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d118      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc2:	4b42      	ldr	r3, [pc, #264]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a41      	ldr	r2, [pc, #260]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ccc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cce:	f7fd fd49 	bl	8001764 <HAL_GetTick>
 8003cd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd4:	e008      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd6:	f7fd fd45 	bl	8001764 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	2b64      	cmp	r3, #100	; 0x64
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e169      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce8:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d0f0      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cf4:	4b34      	ldr	r3, [pc, #208]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8084 	beq.w	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d07c      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d14:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d2e:	fab3 f383 	clz	r3, r3
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2301      	movs	r3, #1
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	fa93 f3a3 	rbit	r3, r3
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d52:	fab3 f383 	clz	r3, r3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	461a      	mov	r2, r3
 8003d62:	2300      	movs	r3, #0
 8003d64:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d66:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d04b      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d76:	f7fd fcf5 	bl	8001764 <HAL_GetTick>
 8003d7a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d7c:	e00a      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fd fcf1 	bl	8001764 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e113      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003d94:	2302      	movs	r3, #2
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003da0:	2302      	movs	r3, #2
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	fa93 f3a3 	rbit	r3, r3
 8003daa:	61fb      	str	r3, [r7, #28]
  return result;
 8003dac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	095b      	lsrs	r3, r3, #5
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d108      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003dc2:	4b01      	ldr	r3, [pc, #4]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	e00d      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	10908100 	.word	0x10908100
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	2202      	movs	r2, #2
 8003de6:	613a      	str	r2, [r7, #16]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	fa92 f2a2 	rbit	r2, r2
 8003dee:	60fa      	str	r2, [r7, #12]
  return result;
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	fab2 f282 	clz	r2, r2
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	f002 021f 	and.w	r2, r2, #31
 8003e02:	2101      	movs	r1, #1
 8003e04:	fa01 f202 	lsl.w	r2, r1, r2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0b7      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e0e:	4b6d      	ldr	r3, [pc, #436]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	496a      	ldr	r1, [pc, #424]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e28:	4b66      	ldr	r3, [pc, #408]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4a65      	ldr	r2, [pc, #404]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e40:	4b60      	ldr	r3, [pc, #384]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	f023 0203 	bic.w	r2, r3, #3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	495d      	ldr	r1, [pc, #372]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e5e:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	4956      	ldr	r1, [pc, #344]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e7c:	4b51      	ldr	r3, [pc, #324]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	494e      	ldr	r1, [pc, #312]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4947      	ldr	r1, [pc, #284]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	493f      	ldr	r1, [pc, #252]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d008      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eda:	f023 0220 	bic.w	r2, r3, #32
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4938      	ldr	r1, [pc, #224]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d008      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef4:	4b33      	ldr	r3, [pc, #204]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	4930      	ldr	r1, [pc, #192]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d008      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f12:	4b2c      	ldr	r3, [pc, #176]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	4929      	ldr	r1, [pc, #164]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f30:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3c:	4921      	ldr	r1, [pc, #132]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	491a      	ldr	r1, [pc, #104]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003f6c:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	4912      	ldr	r1, [pc, #72]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f8a:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	490b      	ldr	r1, [pc, #44]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb4:	4903      	ldr	r1, [pc, #12]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3748      	adds	r7, #72	; 0x48
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40021000 	.word	0x40021000

08003fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e09d      	b.n	8004116 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d108      	bne.n	8003ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fea:	d009      	beq.n	8004000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	61da      	str	r2, [r3, #28]
 8003ff2:	e005      	b.n	8004000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fc ffea 	bl	8000ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004040:	d902      	bls.n	8004048 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e002      	b.n	800404e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004056:	d007      	beq.n	8004068 <HAL_SPI_Init+0xa0>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004060:	d002      	beq.n	8004068 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040a0:	431a      	orrs	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040aa:	ea42 0103 	orr.w	r1, r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	f003 0204 	and.w	r2, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80040e4:	ea42 0103 	orr.w	r1, r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004104:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b082      	sub	sp, #8
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e049      	b.n	80041c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d106      	bne.n	800414a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7fc ff97 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f000 ff37 	bl	8004fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e049      	b.n	8004272 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d106      	bne.n	80041f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fc ff8c 	bl	8001110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3304      	adds	r3, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f000 fee0 	bl	8004fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_TIM_PWM_Start+0x24>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b01      	cmp	r3, #1
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e03c      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d109      	bne.n	80042ba <HAL_TIM_PWM_Start+0x3e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	bf14      	ite	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2300      	moveq	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	e02f      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d109      	bne.n	80042d4 <HAL_TIM_PWM_Start+0x58>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e022      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	d109      	bne.n	80042ee <HAL_TIM_PWM_Start+0x72>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	bf14      	ite	ne
 80042e6:	2301      	movne	r3, #1
 80042e8:	2300      	moveq	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	e015      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b10      	cmp	r3, #16
 80042f2:	d109      	bne.n	8004308 <HAL_TIM_PWM_Start+0x8c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e008      	b.n	800431a <HAL_TIM_PWM_Start+0x9e>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	bf14      	ite	ne
 8004314:	2301      	movne	r3, #1
 8004316:	2300      	moveq	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e097      	b.n	8004452 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <HAL_TIM_PWM_Start+0xb6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004330:	e023      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b04      	cmp	r3, #4
 8004336:	d104      	bne.n	8004342 <HAL_TIM_PWM_Start+0xc6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004340:	e01b      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d104      	bne.n	8004352 <HAL_TIM_PWM_Start+0xd6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004350:	e013      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d104      	bne.n	8004362 <HAL_TIM_PWM_Start+0xe6>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004360:	e00b      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b10      	cmp	r3, #16
 8004366:	d104      	bne.n	8004372 <HAL_TIM_PWM_Start+0xf6>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004370:	e003      	b.n	800437a <HAL_TIM_PWM_Start+0xfe>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2202      	movs	r2, #2
 8004376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2201      	movs	r2, #1
 8004380:	6839      	ldr	r1, [r7, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f001 fb42 	bl	8005a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a33      	ldr	r2, [pc, #204]	; (800445c <HAL_TIM_PWM_Start+0x1e0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_TIM_PWM_Start+0x13e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a32      	ldr	r2, [pc, #200]	; (8004460 <HAL_TIM_PWM_Start+0x1e4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIM_PWM_Start+0x13e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a30      	ldr	r2, [pc, #192]	; (8004464 <HAL_TIM_PWM_Start+0x1e8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIM_PWM_Start+0x13e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a2f      	ldr	r2, [pc, #188]	; (8004468 <HAL_TIM_PWM_Start+0x1ec>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIM_PWM_Start+0x13e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a2d      	ldr	r2, [pc, #180]	; (800446c <HAL_TIM_PWM_Start+0x1f0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PWM_Start+0x142>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_TIM_PWM_Start+0x144>
 80043be:	2300      	movs	r3, #0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043d2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a20      	ldr	r2, [pc, #128]	; (800445c <HAL_TIM_PWM_Start+0x1e0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d018      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d013      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a20      	ldr	r2, [pc, #128]	; (8004470 <HAL_TIM_PWM_Start+0x1f4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00e      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <HAL_TIM_PWM_Start+0x1f8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_TIM_PWM_Start+0x1e4>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_TIM_PWM_Start+0x194>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a16      	ldr	r2, [pc, #88]	; (8004464 <HAL_TIM_PWM_Start+0x1e8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d115      	bne.n	800443c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	4b18      	ldr	r3, [pc, #96]	; (8004478 <HAL_TIM_PWM_Start+0x1fc>)
 8004418:	4013      	ands	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b06      	cmp	r3, #6
 8004420:	d015      	beq.n	800444e <HAL_TIM_PWM_Start+0x1d2>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004428:	d011      	beq.n	800444e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0201 	orr.w	r2, r2, #1
 8004438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443a:	e008      	b.n	800444e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e000      	b.n	8004450 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800444e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40013400 	.word	0x40013400
 8004464:	40014000 	.word	0x40014000
 8004468:	40014400 	.word	0x40014400
 800446c:	40014800 	.word	0x40014800
 8004470:	40000400 	.word	0x40000400
 8004474:	40000800 	.word	0x40000800
 8004478:	00010007 	.word	0x00010007

0800447c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e049      	b.n	8004522 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f841 	bl	800452a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4610      	mov	r0, r2
 80044bc:	f000 fd88 	bl	8004fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
	...

08004540 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <HAL_TIM_IC_Start_IT+0x1e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800455a:	b2db      	uxtb	r3, r3
 800455c:	e023      	b.n	80045a6 <HAL_TIM_IC_Start_IT+0x66>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b04      	cmp	r3, #4
 8004562:	d104      	bne.n	800456e <HAL_TIM_IC_Start_IT+0x2e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800456a:	b2db      	uxtb	r3, r3
 800456c:	e01b      	b.n	80045a6 <HAL_TIM_IC_Start_IT+0x66>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d104      	bne.n	800457e <HAL_TIM_IC_Start_IT+0x3e>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800457a:	b2db      	uxtb	r3, r3
 800457c:	e013      	b.n	80045a6 <HAL_TIM_IC_Start_IT+0x66>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	d104      	bne.n	800458e <HAL_TIM_IC_Start_IT+0x4e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	e00b      	b.n	80045a6 <HAL_TIM_IC_Start_IT+0x66>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b10      	cmp	r3, #16
 8004592:	d104      	bne.n	800459e <HAL_TIM_IC_Start_IT+0x5e>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800459a:	b2db      	uxtb	r3, r3
 800459c:	e003      	b.n	80045a6 <HAL_TIM_IC_Start_IT+0x66>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d104      	bne.n	80045b8 <HAL_TIM_IC_Start_IT+0x78>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e013      	b.n	80045e0 <HAL_TIM_IC_Start_IT+0xa0>
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b04      	cmp	r3, #4
 80045bc:	d104      	bne.n	80045c8 <HAL_TIM_IC_Start_IT+0x88>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e00b      	b.n	80045e0 <HAL_TIM_IC_Start_IT+0xa0>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d104      	bne.n	80045d8 <HAL_TIM_IC_Start_IT+0x98>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e003      	b.n	80045e0 <HAL_TIM_IC_Start_IT+0xa0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80045e2:	7bbb      	ldrb	r3, [r7, #14]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d102      	bne.n	80045ee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80045e8:	7b7b      	ldrb	r3, [r7, #13]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d001      	beq.n	80045f2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0d8      	b.n	80047a4 <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_IC_Start_IT+0xc2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	e023      	b.n	800464a <HAL_TIM_IC_Start_IT+0x10a>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d104      	bne.n	8004612 <HAL_TIM_IC_Start_IT+0xd2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	e01b      	b.n	800464a <HAL_TIM_IC_Start_IT+0x10a>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d104      	bne.n	8004622 <HAL_TIM_IC_Start_IT+0xe2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	e013      	b.n	800464a <HAL_TIM_IC_Start_IT+0x10a>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d104      	bne.n	8004632 <HAL_TIM_IC_Start_IT+0xf2>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004630:	e00b      	b.n	800464a <HAL_TIM_IC_Start_IT+0x10a>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b10      	cmp	r3, #16
 8004636:	d104      	bne.n	8004642 <HAL_TIM_IC_Start_IT+0x102>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004640:	e003      	b.n	800464a <HAL_TIM_IC_Start_IT+0x10a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <HAL_TIM_IC_Start_IT+0x11a>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004658:	e013      	b.n	8004682 <HAL_TIM_IC_Start_IT+0x142>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d104      	bne.n	800466a <HAL_TIM_IC_Start_IT+0x12a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004668:	e00b      	b.n	8004682 <HAL_TIM_IC_Start_IT+0x142>
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b08      	cmp	r3, #8
 800466e:	d104      	bne.n	800467a <HAL_TIM_IC_Start_IT+0x13a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004678:	e003      	b.n	8004682 <HAL_TIM_IC_Start_IT+0x142>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	d841      	bhi.n	800470c <HAL_TIM_IC_Start_IT+0x1cc>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <HAL_TIM_IC_Start_IT+0x150>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046c5 	.word	0x080046c5
 8004694:	0800470d 	.word	0x0800470d
 8004698:	0800470d 	.word	0x0800470d
 800469c:	0800470d 	.word	0x0800470d
 80046a0:	080046d7 	.word	0x080046d7
 80046a4:	0800470d 	.word	0x0800470d
 80046a8:	0800470d 	.word	0x0800470d
 80046ac:	0800470d 	.word	0x0800470d
 80046b0:	080046e9 	.word	0x080046e9
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	0800470d 	.word	0x0800470d
 80046bc:	0800470d 	.word	0x0800470d
 80046c0:	080046fb 	.word	0x080046fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0202 	orr.w	r2, r2, #2
 80046d2:	60da      	str	r2, [r3, #12]
      break;
 80046d4:	e01d      	b.n	8004712 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f042 0204 	orr.w	r2, r2, #4
 80046e4:	60da      	str	r2, [r3, #12]
      break;
 80046e6:	e014      	b.n	8004712 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	60da      	str	r2, [r3, #12]
      break;
 80046f8:	e00b      	b.n	8004712 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0210 	orr.w	r2, r2, #16
 8004708:	60da      	str	r2, [r3, #12]
      break;
 800470a:	e002      	b.n	8004712 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      break;
 8004710:	bf00      	nop
  }

  if (status == HAL_OK)
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d144      	bne.n	80047a2 <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2201      	movs	r2, #1
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f001 f973 	bl	8005a0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a20      	ldr	r2, [pc, #128]	; (80047ac <HAL_TIM_IC_Start_IT+0x26c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_TIM_IC_Start_IT+0x222>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004738:	d013      	beq.n	8004762 <HAL_TIM_IC_Start_IT+0x222>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_TIM_IC_Start_IT+0x270>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIM_IC_Start_IT+0x222>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <HAL_TIM_IC_Start_IT+0x274>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_TIM_IC_Start_IT+0x222>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_TIM_IC_Start_IT+0x278>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIM_IC_Start_IT+0x222>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <HAL_TIM_IC_Start_IT+0x27c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d115      	bne.n	800478e <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <HAL_TIM_IC_Start_IT+0x280>)
 800476a:	4013      	ands	r3, r2
 800476c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b06      	cmp	r3, #6
 8004772:	d015      	beq.n	80047a0 <HAL_TIM_IC_Start_IT+0x260>
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477a:	d011      	beq.n	80047a0 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	e008      	b.n	80047a0 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e000      	b.n	80047a2 <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40013400 	.word	0x40013400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	00010007 	.word	0x00010007

080047c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0202 	mvn.w	r2, #2
 80047f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7fb ff5a 	bl	80006c0 <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fbc0 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fbc7 	bl	8004fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0304 	and.w	r3, r3, #4
 800482a:	2b04      	cmp	r3, #4
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b04      	cmp	r3, #4
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0204 	mvn.w	r2, #4
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2202      	movs	r2, #2
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fb ff30 	bl	80006c0 <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fb96 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fb9d 	bl	8004fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b08      	cmp	r3, #8
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b08      	cmp	r3, #8
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0208 	mvn.w	r2, #8
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2204      	movs	r2, #4
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fb ff06 	bl	80006c0 <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fb6c 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb73 	bl	8004fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0310 	and.w	r3, r3, #16
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0210 	mvn.w	r2, #16
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2208      	movs	r2, #8
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fb fedc 	bl	80006c0 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fb42 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fb49 	bl	8004fa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b01      	cmp	r3, #1
 8004928:	d10e      	bne.n	8004948 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d107      	bne.n	8004948 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0201 	mvn.w	r2, #1
 8004940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 fb1c 	bl	8004f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004952:	2b80      	cmp	r3, #128	; 0x80
 8004954:	d10e      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	2b80      	cmp	r3, #128	; 0x80
 8004962:	d107      	bne.n	8004974 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800496c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 f8fc 	bl	8005b6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d10e      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b80      	cmp	r3, #128	; 0x80
 8004990:	d107      	bne.n	80049a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800499a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 f8ef 	bl	8005b80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	d10e      	bne.n	80049ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d107      	bne.n	80049ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 faf7 	bl	8004fbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d10e      	bne.n	80049fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d107      	bne.n	80049fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f06f 0220 	mvn.w	r2, #32
 80049f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f001 f8af 	bl	8005b58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049fa:	bf00      	nop
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e088      	b.n	8004b32 <HAL_TIM_IC_ConfigChannel+0x130>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d11b      	bne.n	8004a66 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004a3e:	f000 fe2d 	bl	800569c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 020c 	bic.w	r2, r2, #12
 8004a50:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6999      	ldr	r1, [r3, #24]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	689a      	ldr	r2, [r3, #8]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	619a      	str	r2, [r3, #24]
 8004a64:	e060      	b.n	8004b28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d11c      	bne.n	8004aa6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004a7c:	f000 fea5 	bl	80057ca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	699a      	ldr	r2, [r3, #24]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a8e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6999      	ldr	r1, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	021a      	lsls	r2, r3, #8
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	619a      	str	r2, [r3, #24]
 8004aa4:	e040      	b.n	8004b28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d11b      	bne.n	8004ae4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004abc:	f000 fef2 	bl	80058a4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69da      	ldr	r2, [r3, #28]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 020c 	bic.w	r2, r2, #12
 8004ace:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	69d9      	ldr	r1, [r3, #28]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	61da      	str	r2, [r3, #28]
 8004ae2:	e021      	b.n	8004b28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d11c      	bne.n	8004b24 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004afa:	f000 ff0f 	bl	800591c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69d9      	ldr	r1, [r3, #28]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	021a      	lsls	r2, r3, #8
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	61da      	str	r2, [r3, #28]
 8004b22:	e001      	b.n	8004b28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e0ff      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b14      	cmp	r3, #20
 8004b66:	f200 80f0 	bhi.w	8004d4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b6a:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b70:	08004bc5 	.word	0x08004bc5
 8004b74:	08004d4b 	.word	0x08004d4b
 8004b78:	08004d4b 	.word	0x08004d4b
 8004b7c:	08004d4b 	.word	0x08004d4b
 8004b80:	08004c05 	.word	0x08004c05
 8004b84:	08004d4b 	.word	0x08004d4b
 8004b88:	08004d4b 	.word	0x08004d4b
 8004b8c:	08004d4b 	.word	0x08004d4b
 8004b90:	08004c47 	.word	0x08004c47
 8004b94:	08004d4b 	.word	0x08004d4b
 8004b98:	08004d4b 	.word	0x08004d4b
 8004b9c:	08004d4b 	.word	0x08004d4b
 8004ba0:	08004c87 	.word	0x08004c87
 8004ba4:	08004d4b 	.word	0x08004d4b
 8004ba8:	08004d4b 	.word	0x08004d4b
 8004bac:	08004d4b 	.word	0x08004d4b
 8004bb0:	08004cc9 	.word	0x08004cc9
 8004bb4:	08004d4b 	.word	0x08004d4b
 8004bb8:	08004d4b 	.word	0x08004d4b
 8004bbc:	08004d4b 	.word	0x08004d4b
 8004bc0:	08004d09 	.word	0x08004d09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fa90 	bl	80050f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0208 	orr.w	r2, r2, #8
 8004bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699a      	ldr	r2, [r3, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0204 	bic.w	r2, r2, #4
 8004bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6999      	ldr	r1, [r3, #24]
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	619a      	str	r2, [r3, #24]
      break;
 8004c02:	e0a5      	b.n	8004d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fb00 	bl	8005210 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6999      	ldr	r1, [r3, #24]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	021a      	lsls	r2, r3, #8
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	619a      	str	r2, [r3, #24]
      break;
 8004c44:	e084      	b.n	8004d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fb69 	bl	8005324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0208 	orr.w	r2, r2, #8
 8004c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0204 	bic.w	r2, r2, #4
 8004c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69d9      	ldr	r1, [r3, #28]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	691a      	ldr	r2, [r3, #16]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	61da      	str	r2, [r3, #28]
      break;
 8004c84:	e064      	b.n	8004d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fbd1 	bl	8005434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69d9      	ldr	r1, [r3, #28]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	021a      	lsls	r2, r3, #8
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	61da      	str	r2, [r3, #28]
      break;
 8004cc6:	e043      	b.n	8004d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fc1a 	bl	8005508 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0208 	orr.w	r2, r2, #8
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0204 	bic.w	r2, r2, #4
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d06:	e023      	b.n	8004d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fc5e 	bl	80055d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d48:	e002      	b.n	8004d50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop

08004d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIM_ConfigClockSource+0x1c>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e0b6      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x18a>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbc:	d03e      	beq.n	8004e3c <HAL_TIM_ConfigClockSource+0xd8>
 8004dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc2:	f200 8087 	bhi.w	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dca:	f000 8086 	beq.w	8004eda <HAL_TIM_ConfigClockSource+0x176>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dd2:	d87f      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
 8004dd4:	2b70      	cmp	r3, #112	; 0x70
 8004dd6:	d01a      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0xaa>
 8004dd8:	2b70      	cmp	r3, #112	; 0x70
 8004dda:	d87b      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d050      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x11e>
 8004de0:	2b60      	cmp	r3, #96	; 0x60
 8004de2:	d877      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
 8004de4:	2b50      	cmp	r3, #80	; 0x50
 8004de6:	d03c      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0xfe>
 8004de8:	2b50      	cmp	r3, #80	; 0x50
 8004dea:	d873      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d058      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x13e>
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	d86f      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
 8004df4:	2b30      	cmp	r3, #48	; 0x30
 8004df6:	d064      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15e>
 8004df8:	2b30      	cmp	r3, #48	; 0x30
 8004dfa:	d86b      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d060      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d867      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d05c      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d05a      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15e>
 8004e0c:	e062      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	f000 fdd5 	bl	80059cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	609a      	str	r2, [r3, #8]
      break;
 8004e3a:	e04f      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	f000 fdbe 	bl	80059cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e5e:	609a      	str	r2, [r3, #8]
      break;
 8004e60:	e03c      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f000 fc7c 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2150      	movs	r1, #80	; 0x50
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fd8b 	bl	8005996 <TIM_ITRx_SetConfig>
      break;
 8004e80:	e02c      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 fcd8 	bl	8005844 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2160      	movs	r1, #96	; 0x60
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fd7b 	bl	8005996 <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e01c      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 fc5c 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2140      	movs	r1, #64	; 0x40
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fd6b 	bl	8005996 <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e00c      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f000 fd62 	bl	8005996 <TIM_ITRx_SetConfig>
      break;
 8004ed2:	e003      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed8:	e000      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b0c      	cmp	r3, #12
 8004f0a:	d831      	bhi.n	8004f70 <HAL_TIM_ReadCapturedValue+0x78>
 8004f0c:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f12:	bf00      	nop
 8004f14:	08004f49 	.word	0x08004f49
 8004f18:	08004f71 	.word	0x08004f71
 8004f1c:	08004f71 	.word	0x08004f71
 8004f20:	08004f71 	.word	0x08004f71
 8004f24:	08004f53 	.word	0x08004f53
 8004f28:	08004f71 	.word	0x08004f71
 8004f2c:	08004f71 	.word	0x08004f71
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f71 	.word	0x08004f71
 8004f3c:	08004f71 	.word	0x08004f71
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f67 	.word	0x08004f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f4e:	60fb      	str	r3, [r7, #12]

      break;
 8004f50:	e00f      	b.n	8004f72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f58:	60fb      	str	r3, [r7, #12]

      break;
 8004f5a:	e00a      	b.n	8004f72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f62:	60fb      	str	r3, [r7, #12]

      break;
 8004f64:	e005      	b.n	8004f72 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	60fb      	str	r3, [r7, #12]

      break;
 8004f6e:	e000      	b.n	8004f72 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f70:	bf00      	nop
  }

  return tmpreg;
 8004f72:	68fb      	ldr	r3, [r7, #12]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a3c      	ldr	r2, [pc, #240]	; (80050d4 <TIM_Base_SetConfig+0x104>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00f      	beq.n	8005008 <TIM_Base_SetConfig+0x38>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fee:	d00b      	beq.n	8005008 <TIM_Base_SetConfig+0x38>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a39      	ldr	r2, [pc, #228]	; (80050d8 <TIM_Base_SetConfig+0x108>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d007      	beq.n	8005008 <TIM_Base_SetConfig+0x38>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a38      	ldr	r2, [pc, #224]	; (80050dc <TIM_Base_SetConfig+0x10c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d003      	beq.n	8005008 <TIM_Base_SetConfig+0x38>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a37      	ldr	r2, [pc, #220]	; (80050e0 <TIM_Base_SetConfig+0x110>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d108      	bne.n	800501a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2d      	ldr	r2, [pc, #180]	; (80050d4 <TIM_Base_SetConfig+0x104>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01b      	beq.n	800505a <TIM_Base_SetConfig+0x8a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005028:	d017      	beq.n	800505a <TIM_Base_SetConfig+0x8a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <TIM_Base_SetConfig+0x108>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <TIM_Base_SetConfig+0x8a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a29      	ldr	r2, [pc, #164]	; (80050dc <TIM_Base_SetConfig+0x10c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00f      	beq.n	800505a <TIM_Base_SetConfig+0x8a>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a28      	ldr	r2, [pc, #160]	; (80050e0 <TIM_Base_SetConfig+0x110>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d00b      	beq.n	800505a <TIM_Base_SetConfig+0x8a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a27      	ldr	r2, [pc, #156]	; (80050e4 <TIM_Base_SetConfig+0x114>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d007      	beq.n	800505a <TIM_Base_SetConfig+0x8a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a26      	ldr	r2, [pc, #152]	; (80050e8 <TIM_Base_SetConfig+0x118>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d003      	beq.n	800505a <TIM_Base_SetConfig+0x8a>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a25      	ldr	r2, [pc, #148]	; (80050ec <TIM_Base_SetConfig+0x11c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d108      	bne.n	800506c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a10      	ldr	r2, [pc, #64]	; (80050d4 <TIM_Base_SetConfig+0x104>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00f      	beq.n	80050b8 <TIM_Base_SetConfig+0xe8>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <TIM_Base_SetConfig+0x110>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d00b      	beq.n	80050b8 <TIM_Base_SetConfig+0xe8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a10      	ldr	r2, [pc, #64]	; (80050e4 <TIM_Base_SetConfig+0x114>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d007      	beq.n	80050b8 <TIM_Base_SetConfig+0xe8>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a0f      	ldr	r2, [pc, #60]	; (80050e8 <TIM_Base_SetConfig+0x118>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d003      	beq.n	80050b8 <TIM_Base_SetConfig+0xe8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a0e      	ldr	r2, [pc, #56]	; (80050ec <TIM_Base_SetConfig+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d103      	bne.n	80050c0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	691a      	ldr	r2, [r3, #16]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	615a      	str	r2, [r3, #20]
}
 80050c6:	bf00      	nop
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40013400 	.word	0x40013400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800

080050f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b087      	sub	sp, #28
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f023 0201 	bic.w	r2, r3, #1
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 0302 	bic.w	r3, r3, #2
 800513c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a2c      	ldr	r2, [pc, #176]	; (80051fc <TIM_OC1_SetConfig+0x10c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00f      	beq.n	8005170 <TIM_OC1_SetConfig+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a2b      	ldr	r2, [pc, #172]	; (8005200 <TIM_OC1_SetConfig+0x110>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00b      	beq.n	8005170 <TIM_OC1_SetConfig+0x80>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <TIM_OC1_SetConfig+0x114>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d007      	beq.n	8005170 <TIM_OC1_SetConfig+0x80>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a29      	ldr	r2, [pc, #164]	; (8005208 <TIM_OC1_SetConfig+0x118>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_OC1_SetConfig+0x80>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a28      	ldr	r2, [pc, #160]	; (800520c <TIM_OC1_SetConfig+0x11c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d10c      	bne.n	800518a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0308 	bic.w	r3, r3, #8
 8005176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1b      	ldr	r2, [pc, #108]	; (80051fc <TIM_OC1_SetConfig+0x10c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00f      	beq.n	80051b2 <TIM_OC1_SetConfig+0xc2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1a      	ldr	r2, [pc, #104]	; (8005200 <TIM_OC1_SetConfig+0x110>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00b      	beq.n	80051b2 <TIM_OC1_SetConfig+0xc2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a19      	ldr	r2, [pc, #100]	; (8005204 <TIM_OC1_SetConfig+0x114>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <TIM_OC1_SetConfig+0xc2>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a18      	ldr	r2, [pc, #96]	; (8005208 <TIM_OC1_SetConfig+0x118>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d003      	beq.n	80051b2 <TIM_OC1_SetConfig+0xc2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a17      	ldr	r2, [pc, #92]	; (800520c <TIM_OC1_SetConfig+0x11c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d111      	bne.n	80051d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	621a      	str	r2, [r3, #32]
}
 80051f0:	bf00      	nop
 80051f2:	371c      	adds	r7, #28
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40013400 	.word	0x40013400
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800

08005210 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f023 0210 	bic.w	r2, r3, #16
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800523e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0320 	bic.w	r3, r3, #32
 800525e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a28      	ldr	r2, [pc, #160]	; (8005310 <TIM_OC2_SetConfig+0x100>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d003      	beq.n	800527c <TIM_OC2_SetConfig+0x6c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a27      	ldr	r2, [pc, #156]	; (8005314 <TIM_OC2_SetConfig+0x104>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d10d      	bne.n	8005298 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	4313      	orrs	r3, r2
 800528e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <TIM_OC2_SetConfig+0x100>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00f      	beq.n	80052c0 <TIM_OC2_SetConfig+0xb0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a1c      	ldr	r2, [pc, #112]	; (8005314 <TIM_OC2_SetConfig+0x104>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00b      	beq.n	80052c0 <TIM_OC2_SetConfig+0xb0>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a1b      	ldr	r2, [pc, #108]	; (8005318 <TIM_OC2_SetConfig+0x108>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <TIM_OC2_SetConfig+0xb0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a1a      	ldr	r2, [pc, #104]	; (800531c <TIM_OC2_SetConfig+0x10c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d003      	beq.n	80052c0 <TIM_OC2_SetConfig+0xb0>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a19      	ldr	r2, [pc, #100]	; (8005320 <TIM_OC2_SetConfig+0x110>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d113      	bne.n	80052e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052c6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40013400 	.word	0x40013400
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800

08005324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0303 	bic.w	r3, r3, #3
 800535e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	021b      	lsls	r3, r3, #8
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a27      	ldr	r2, [pc, #156]	; (8005420 <TIM_OC3_SetConfig+0xfc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d003      	beq.n	800538e <TIM_OC3_SetConfig+0x6a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a26      	ldr	r2, [pc, #152]	; (8005424 <TIM_OC3_SetConfig+0x100>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d10d      	bne.n	80053aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	4313      	orrs	r3, r2
 80053a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <TIM_OC3_SetConfig+0xfc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00f      	beq.n	80053d2 <TIM_OC3_SetConfig+0xae>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a1b      	ldr	r2, [pc, #108]	; (8005424 <TIM_OC3_SetConfig+0x100>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00b      	beq.n	80053d2 <TIM_OC3_SetConfig+0xae>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1a      	ldr	r2, [pc, #104]	; (8005428 <TIM_OC3_SetConfig+0x104>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d007      	beq.n	80053d2 <TIM_OC3_SetConfig+0xae>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a19      	ldr	r2, [pc, #100]	; (800542c <TIM_OC3_SetConfig+0x108>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d003      	beq.n	80053d2 <TIM_OC3_SetConfig+0xae>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a18      	ldr	r2, [pc, #96]	; (8005430 <TIM_OC3_SetConfig+0x10c>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d113      	bne.n	80053fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40013400 	.word	0x40013400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800

08005434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800546e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	021b      	lsls	r3, r3, #8
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	031b      	lsls	r3, r3, #12
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <TIM_OC4_SetConfig+0xc0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00f      	beq.n	80054b8 <TIM_OC4_SetConfig+0x84>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <TIM_OC4_SetConfig+0xc4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00b      	beq.n	80054b8 <TIM_OC4_SetConfig+0x84>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a16      	ldr	r2, [pc, #88]	; (80054fc <TIM_OC4_SetConfig+0xc8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_OC4_SetConfig+0x84>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <TIM_OC4_SetConfig+0xcc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_OC4_SetConfig+0x84>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a14      	ldr	r2, [pc, #80]	; (8005504 <TIM_OC4_SetConfig+0xd0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d109      	bne.n	80054cc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	019b      	lsls	r3, r3, #6
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	621a      	str	r2, [r3, #32]
}
 80054e6:	bf00      	nop
 80054e8:	371c      	adds	r7, #28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800

08005508 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800554c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	041b      	lsls	r3, r3, #16
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a17      	ldr	r2, [pc, #92]	; (80055bc <TIM_OC5_SetConfig+0xb4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00f      	beq.n	8005582 <TIM_OC5_SetConfig+0x7a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <TIM_OC5_SetConfig+0xb8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00b      	beq.n	8005582 <TIM_OC5_SetConfig+0x7a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <TIM_OC5_SetConfig+0xbc>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <TIM_OC5_SetConfig+0x7a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <TIM_OC5_SetConfig+0xc0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_OC5_SetConfig+0x7a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a13      	ldr	r2, [pc, #76]	; (80055cc <TIM_OC5_SetConfig+0xc4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d109      	bne.n	8005596 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	621a      	str	r2, [r3, #32]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	40013400 	.word	0x40013400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800

080055d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	051b      	lsls	r3, r3, #20
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <TIM_OC6_SetConfig+0xb8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00f      	beq.n	800564c <TIM_OC6_SetConfig+0x7c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a17      	ldr	r2, [pc, #92]	; (800568c <TIM_OC6_SetConfig+0xbc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00b      	beq.n	800564c <TIM_OC6_SetConfig+0x7c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a16      	ldr	r2, [pc, #88]	; (8005690 <TIM_OC6_SetConfig+0xc0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d007      	beq.n	800564c <TIM_OC6_SetConfig+0x7c>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a15      	ldr	r2, [pc, #84]	; (8005694 <TIM_OC6_SetConfig+0xc4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d003      	beq.n	800564c <TIM_OC6_SetConfig+0x7c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a14      	ldr	r2, [pc, #80]	; (8005698 <TIM_OC6_SetConfig+0xc8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d109      	bne.n	8005660 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005652:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	029b      	lsls	r3, r3, #10
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	40012c00 	.word	0x40012c00
 800568c:	40013400 	.word	0x40013400
 8005690:	40014000 	.word	0x40014000
 8005694:	40014400 	.word	0x40014400
 8005698:	40014800 	.word	0x40014800

0800569c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	f023 0201 	bic.w	r2, r3, #1
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4a24      	ldr	r2, [pc, #144]	; (8005758 <TIM_TI1_SetConfig+0xbc>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <TIM_TI1_SetConfig+0x56>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d0:	d00f      	beq.n	80056f2 <TIM_TI1_SetConfig+0x56>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a21      	ldr	r2, [pc, #132]	; (800575c <TIM_TI1_SetConfig+0xc0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00b      	beq.n	80056f2 <TIM_TI1_SetConfig+0x56>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4a20      	ldr	r2, [pc, #128]	; (8005760 <TIM_TI1_SetConfig+0xc4>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d007      	beq.n	80056f2 <TIM_TI1_SetConfig+0x56>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a1f      	ldr	r2, [pc, #124]	; (8005764 <TIM_TI1_SetConfig+0xc8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d003      	beq.n	80056f2 <TIM_TI1_SetConfig+0x56>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a1e      	ldr	r2, [pc, #120]	; (8005768 <TIM_TI1_SetConfig+0xcc>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d101      	bne.n	80056f6 <TIM_TI1_SetConfig+0x5a>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <TIM_TI1_SetConfig+0x5c>
 80056f6:	2300      	movs	r3, #0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e003      	b.n	8005716 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800571c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	b2db      	uxtb	r3, r3
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f023 030a 	bic.w	r3, r3, #10
 8005730:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f003 030a 	and.w	r3, r3, #10
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4313      	orrs	r3, r2
 800573c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000

0800576c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0201 	bic.w	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 030a 	bic.w	r3, r3, #10
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b087      	sub	sp, #28
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f023 0210 	bic.w	r2, r3, #16
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	031b      	lsls	r3, r3, #12
 800580e:	b29b      	uxth	r3, r3
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800581c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	621a      	str	r2, [r3, #32]
}
 8005838:	bf00      	nop
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	f023 0210 	bic.w	r2, r3, #16
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800586e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	031b      	lsls	r3, r3, #12
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005880:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	621a      	str	r2, [r3, #32]
}
 8005898:	bf00      	nop
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 0303 	bic.w	r3, r3, #3
 80058d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	621a      	str	r2, [r3, #32]
}
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005948:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	021b      	lsls	r3, r3, #8
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800595a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	031b      	lsls	r3, r3, #12
 8005960:	b29b      	uxth	r3, r3
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800596e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	031b      	lsls	r3, r3, #12
 8005974:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	4313      	orrs	r3, r2
 800597c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f043 0307 	orr.w	r3, r3, #7
 80059b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	609a      	str	r2, [r3, #8]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	021a      	lsls	r2, r3, #8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	609a      	str	r2, [r3, #8]
}
 8005a00:	bf00      	nop
 8005a02:	371c      	adds	r7, #28
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	2201      	movs	r2, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1a      	ldr	r2, [r3, #32]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	43db      	mvns	r3, r3
 8005a2e:	401a      	ands	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6a1a      	ldr	r2, [r3, #32]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	6879      	ldr	r1, [r7, #4]
 8005a40:	fa01 f303 	lsl.w	r3, r1, r3
 8005a44:	431a      	orrs	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d101      	bne.n	8005a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	e063      	b.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a2b      	ldr	r2, [pc, #172]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a2a      	ldr	r2, [pc, #168]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d108      	bne.n	8005ab6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005aaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d018      	beq.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae2:	d013      	beq.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a18      	ldr	r2, [pc, #96]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d00e      	beq.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a17      	ldr	r2, [pc, #92]	; (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d009      	beq.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a12      	ldr	r2, [pc, #72]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d004      	beq.n	8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10c      	bne.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40012c00 	.word	0x40012c00
 8005b48:	40013400 	.word	0x40013400
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40014000 	.word	0x40014000

08005b58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005b9c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005ba0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	43db      	mvns	r3, r3
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005bca:	b084      	sub	sp, #16
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	f107 0014 	add.w	r0, r7, #20
 8005bd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	b004      	add	sp, #16
 8005c0a:	4770      	bx	lr

08005c0c <siprintf>:
 8005c0c:	b40e      	push	{r1, r2, r3}
 8005c0e:	b500      	push	{lr}
 8005c10:	b09c      	sub	sp, #112	; 0x70
 8005c12:	ab1d      	add	r3, sp, #116	; 0x74
 8005c14:	9002      	str	r0, [sp, #8]
 8005c16:	9006      	str	r0, [sp, #24]
 8005c18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c1c:	4809      	ldr	r0, [pc, #36]	; (8005c44 <siprintf+0x38>)
 8005c1e:	9107      	str	r1, [sp, #28]
 8005c20:	9104      	str	r1, [sp, #16]
 8005c22:	4909      	ldr	r1, [pc, #36]	; (8005c48 <siprintf+0x3c>)
 8005c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c28:	9105      	str	r1, [sp, #20]
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	a902      	add	r1, sp, #8
 8005c30:	f000 f89a 	bl	8005d68 <_svfiprintf_r>
 8005c34:	9b02      	ldr	r3, [sp, #8]
 8005c36:	2200      	movs	r2, #0
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	b01c      	add	sp, #112	; 0x70
 8005c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c40:	b003      	add	sp, #12
 8005c42:	4770      	bx	lr
 8005c44:	200000c0 	.word	0x200000c0
 8005c48:	ffff0208 	.word	0xffff0208

08005c4c <memset>:
 8005c4c:	4402      	add	r2, r0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d100      	bne.n	8005c56 <memset+0xa>
 8005c54:	4770      	bx	lr
 8005c56:	f803 1b01 	strb.w	r1, [r3], #1
 8005c5a:	e7f9      	b.n	8005c50 <memset+0x4>

08005c5c <__errno>:
 8005c5c:	4b01      	ldr	r3, [pc, #4]	; (8005c64 <__errno+0x8>)
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	200000c0 	.word	0x200000c0

08005c68 <__libc_init_array>:
 8005c68:	b570      	push	{r4, r5, r6, lr}
 8005c6a:	4d0d      	ldr	r5, [pc, #52]	; (8005ca0 <__libc_init_array+0x38>)
 8005c6c:	4c0d      	ldr	r4, [pc, #52]	; (8005ca4 <__libc_init_array+0x3c>)
 8005c6e:	1b64      	subs	r4, r4, r5
 8005c70:	10a4      	asrs	r4, r4, #2
 8005c72:	2600      	movs	r6, #0
 8005c74:	42a6      	cmp	r6, r4
 8005c76:	d109      	bne.n	8005c8c <__libc_init_array+0x24>
 8005c78:	4d0b      	ldr	r5, [pc, #44]	; (8005ca8 <__libc_init_array+0x40>)
 8005c7a:	4c0c      	ldr	r4, [pc, #48]	; (8005cac <__libc_init_array+0x44>)
 8005c7c:	f000 fc6a 	bl	8006554 <_init>
 8005c80:	1b64      	subs	r4, r4, r5
 8005c82:	10a4      	asrs	r4, r4, #2
 8005c84:	2600      	movs	r6, #0
 8005c86:	42a6      	cmp	r6, r4
 8005c88:	d105      	bne.n	8005c96 <__libc_init_array+0x2e>
 8005c8a:	bd70      	pop	{r4, r5, r6, pc}
 8005c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c90:	4798      	blx	r3
 8005c92:	3601      	adds	r6, #1
 8005c94:	e7ee      	b.n	8005c74 <__libc_init_array+0xc>
 8005c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c9a:	4798      	blx	r3
 8005c9c:	3601      	adds	r6, #1
 8005c9e:	e7f2      	b.n	8005c86 <__libc_init_array+0x1e>
 8005ca0:	08006638 	.word	0x08006638
 8005ca4:	08006638 	.word	0x08006638
 8005ca8:	08006638 	.word	0x08006638
 8005cac:	0800663c 	.word	0x0800663c

08005cb0 <__retarget_lock_acquire_recursive>:
 8005cb0:	4770      	bx	lr

08005cb2 <__retarget_lock_release_recursive>:
 8005cb2:	4770      	bx	lr

08005cb4 <__ssputs_r>:
 8005cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb8:	688e      	ldr	r6, [r1, #8]
 8005cba:	461f      	mov	r7, r3
 8005cbc:	42be      	cmp	r6, r7
 8005cbe:	680b      	ldr	r3, [r1, #0]
 8005cc0:	4682      	mov	sl, r0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	4690      	mov	r8, r2
 8005cc6:	d82c      	bhi.n	8005d22 <__ssputs_r+0x6e>
 8005cc8:	898a      	ldrh	r2, [r1, #12]
 8005cca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005cce:	d026      	beq.n	8005d1e <__ssputs_r+0x6a>
 8005cd0:	6965      	ldr	r5, [r4, #20]
 8005cd2:	6909      	ldr	r1, [r1, #16]
 8005cd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cd8:	eba3 0901 	sub.w	r9, r3, r1
 8005cdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ce0:	1c7b      	adds	r3, r7, #1
 8005ce2:	444b      	add	r3, r9
 8005ce4:	106d      	asrs	r5, r5, #1
 8005ce6:	429d      	cmp	r5, r3
 8005ce8:	bf38      	it	cc
 8005cea:	461d      	movcc	r5, r3
 8005cec:	0553      	lsls	r3, r2, #21
 8005cee:	d527      	bpl.n	8005d40 <__ssputs_r+0x8c>
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f000 f957 	bl	8005fa4 <_malloc_r>
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	b360      	cbz	r0, 8005d54 <__ssputs_r+0xa0>
 8005cfa:	6921      	ldr	r1, [r4, #16]
 8005cfc:	464a      	mov	r2, r9
 8005cfe:	f000 fbc7 	bl	8006490 <memcpy>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d0c:	81a3      	strh	r3, [r4, #12]
 8005d0e:	6126      	str	r6, [r4, #16]
 8005d10:	6165      	str	r5, [r4, #20]
 8005d12:	444e      	add	r6, r9
 8005d14:	eba5 0509 	sub.w	r5, r5, r9
 8005d18:	6026      	str	r6, [r4, #0]
 8005d1a:	60a5      	str	r5, [r4, #8]
 8005d1c:	463e      	mov	r6, r7
 8005d1e:	42be      	cmp	r6, r7
 8005d20:	d900      	bls.n	8005d24 <__ssputs_r+0x70>
 8005d22:	463e      	mov	r6, r7
 8005d24:	6820      	ldr	r0, [r4, #0]
 8005d26:	4632      	mov	r2, r6
 8005d28:	4641      	mov	r1, r8
 8005d2a:	f000 fb86 	bl	800643a <memmove>
 8005d2e:	68a3      	ldr	r3, [r4, #8]
 8005d30:	1b9b      	subs	r3, r3, r6
 8005d32:	60a3      	str	r3, [r4, #8]
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	4433      	add	r3, r6
 8005d38:	6023      	str	r3, [r4, #0]
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d40:	462a      	mov	r2, r5
 8005d42:	f000 fb4b 	bl	80063dc <_realloc_r>
 8005d46:	4606      	mov	r6, r0
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d1e0      	bne.n	8005d0e <__ssputs_r+0x5a>
 8005d4c:	6921      	ldr	r1, [r4, #16]
 8005d4e:	4650      	mov	r0, sl
 8005d50:	f000 fbac 	bl	80064ac <_free_r>
 8005d54:	230c      	movs	r3, #12
 8005d56:	f8ca 3000 	str.w	r3, [sl]
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d66:	e7e9      	b.n	8005d3c <__ssputs_r+0x88>

08005d68 <_svfiprintf_r>:
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	4698      	mov	r8, r3
 8005d6e:	898b      	ldrh	r3, [r1, #12]
 8005d70:	061b      	lsls	r3, r3, #24
 8005d72:	b09d      	sub	sp, #116	; 0x74
 8005d74:	4607      	mov	r7, r0
 8005d76:	460d      	mov	r5, r1
 8005d78:	4614      	mov	r4, r2
 8005d7a:	d50e      	bpl.n	8005d9a <_svfiprintf_r+0x32>
 8005d7c:	690b      	ldr	r3, [r1, #16]
 8005d7e:	b963      	cbnz	r3, 8005d9a <_svfiprintf_r+0x32>
 8005d80:	2140      	movs	r1, #64	; 0x40
 8005d82:	f000 f90f 	bl	8005fa4 <_malloc_r>
 8005d86:	6028      	str	r0, [r5, #0]
 8005d88:	6128      	str	r0, [r5, #16]
 8005d8a:	b920      	cbnz	r0, 8005d96 <_svfiprintf_r+0x2e>
 8005d8c:	230c      	movs	r3, #12
 8005d8e:	603b      	str	r3, [r7, #0]
 8005d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d94:	e0d0      	b.n	8005f38 <_svfiprintf_r+0x1d0>
 8005d96:	2340      	movs	r3, #64	; 0x40
 8005d98:	616b      	str	r3, [r5, #20]
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d9e:	2320      	movs	r3, #32
 8005da0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005da4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005da8:	2330      	movs	r3, #48	; 0x30
 8005daa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005f50 <_svfiprintf_r+0x1e8>
 8005dae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005db2:	f04f 0901 	mov.w	r9, #1
 8005db6:	4623      	mov	r3, r4
 8005db8:	469a      	mov	sl, r3
 8005dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dbe:	b10a      	cbz	r2, 8005dc4 <_svfiprintf_r+0x5c>
 8005dc0:	2a25      	cmp	r2, #37	; 0x25
 8005dc2:	d1f9      	bne.n	8005db8 <_svfiprintf_r+0x50>
 8005dc4:	ebba 0b04 	subs.w	fp, sl, r4
 8005dc8:	d00b      	beq.n	8005de2 <_svfiprintf_r+0x7a>
 8005dca:	465b      	mov	r3, fp
 8005dcc:	4622      	mov	r2, r4
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7ff ff6f 	bl	8005cb4 <__ssputs_r>
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	f000 80a9 	beq.w	8005f2e <_svfiprintf_r+0x1c6>
 8005ddc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dde:	445a      	add	r2, fp
 8005de0:	9209      	str	r2, [sp, #36]	; 0x24
 8005de2:	f89a 3000 	ldrb.w	r3, [sl]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80a1 	beq.w	8005f2e <_svfiprintf_r+0x1c6>
 8005dec:	2300      	movs	r3, #0
 8005dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005df2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005df6:	f10a 0a01 	add.w	sl, sl, #1
 8005dfa:	9304      	str	r3, [sp, #16]
 8005dfc:	9307      	str	r3, [sp, #28]
 8005dfe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e02:	931a      	str	r3, [sp, #104]	; 0x68
 8005e04:	4654      	mov	r4, sl
 8005e06:	2205      	movs	r2, #5
 8005e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e0c:	4850      	ldr	r0, [pc, #320]	; (8005f50 <_svfiprintf_r+0x1e8>)
 8005e0e:	f7fa f9df 	bl	80001d0 <memchr>
 8005e12:	9a04      	ldr	r2, [sp, #16]
 8005e14:	b9d8      	cbnz	r0, 8005e4e <_svfiprintf_r+0xe6>
 8005e16:	06d0      	lsls	r0, r2, #27
 8005e18:	bf44      	itt	mi
 8005e1a:	2320      	movmi	r3, #32
 8005e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e20:	0711      	lsls	r1, r2, #28
 8005e22:	bf44      	itt	mi
 8005e24:	232b      	movmi	r3, #43	; 0x2b
 8005e26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e30:	d015      	beq.n	8005e5e <_svfiprintf_r+0xf6>
 8005e32:	9a07      	ldr	r2, [sp, #28]
 8005e34:	4654      	mov	r4, sl
 8005e36:	2000      	movs	r0, #0
 8005e38:	f04f 0c0a 	mov.w	ip, #10
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e42:	3b30      	subs	r3, #48	; 0x30
 8005e44:	2b09      	cmp	r3, #9
 8005e46:	d94d      	bls.n	8005ee4 <_svfiprintf_r+0x17c>
 8005e48:	b1b0      	cbz	r0, 8005e78 <_svfiprintf_r+0x110>
 8005e4a:	9207      	str	r2, [sp, #28]
 8005e4c:	e014      	b.n	8005e78 <_svfiprintf_r+0x110>
 8005e4e:	eba0 0308 	sub.w	r3, r0, r8
 8005e52:	fa09 f303 	lsl.w	r3, r9, r3
 8005e56:	4313      	orrs	r3, r2
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	46a2      	mov	sl, r4
 8005e5c:	e7d2      	b.n	8005e04 <_svfiprintf_r+0x9c>
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	1d19      	adds	r1, r3, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	9103      	str	r1, [sp, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	bfbb      	ittet	lt
 8005e6a:	425b      	neglt	r3, r3
 8005e6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e70:	9307      	strge	r3, [sp, #28]
 8005e72:	9307      	strlt	r3, [sp, #28]
 8005e74:	bfb8      	it	lt
 8005e76:	9204      	strlt	r2, [sp, #16]
 8005e78:	7823      	ldrb	r3, [r4, #0]
 8005e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e7c:	d10c      	bne.n	8005e98 <_svfiprintf_r+0x130>
 8005e7e:	7863      	ldrb	r3, [r4, #1]
 8005e80:	2b2a      	cmp	r3, #42	; 0x2a
 8005e82:	d134      	bne.n	8005eee <_svfiprintf_r+0x186>
 8005e84:	9b03      	ldr	r3, [sp, #12]
 8005e86:	1d1a      	adds	r2, r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	9203      	str	r2, [sp, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bfb8      	it	lt
 8005e90:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005e94:	3402      	adds	r4, #2
 8005e96:	9305      	str	r3, [sp, #20]
 8005e98:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005f60 <_svfiprintf_r+0x1f8>
 8005e9c:	7821      	ldrb	r1, [r4, #0]
 8005e9e:	2203      	movs	r2, #3
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	f7fa f995 	bl	80001d0 <memchr>
 8005ea6:	b138      	cbz	r0, 8005eb8 <_svfiprintf_r+0x150>
 8005ea8:	9b04      	ldr	r3, [sp, #16]
 8005eaa:	eba0 000a 	sub.w	r0, r0, sl
 8005eae:	2240      	movs	r2, #64	; 0x40
 8005eb0:	4082      	lsls	r2, r0
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	3401      	adds	r4, #1
 8005eb6:	9304      	str	r3, [sp, #16]
 8005eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ebc:	4825      	ldr	r0, [pc, #148]	; (8005f54 <_svfiprintf_r+0x1ec>)
 8005ebe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ec2:	2206      	movs	r2, #6
 8005ec4:	f7fa f984 	bl	80001d0 <memchr>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d038      	beq.n	8005f3e <_svfiprintf_r+0x1d6>
 8005ecc:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <_svfiprintf_r+0x1f0>)
 8005ece:	bb1b      	cbnz	r3, 8005f18 <_svfiprintf_r+0x1b0>
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	3307      	adds	r3, #7
 8005ed4:	f023 0307 	bic.w	r3, r3, #7
 8005ed8:	3308      	adds	r3, #8
 8005eda:	9303      	str	r3, [sp, #12]
 8005edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ede:	4433      	add	r3, r6
 8005ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee2:	e768      	b.n	8005db6 <_svfiprintf_r+0x4e>
 8005ee4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ee8:	460c      	mov	r4, r1
 8005eea:	2001      	movs	r0, #1
 8005eec:	e7a6      	b.n	8005e3c <_svfiprintf_r+0xd4>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	3401      	adds	r4, #1
 8005ef2:	9305      	str	r3, [sp, #20]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	f04f 0c0a 	mov.w	ip, #10
 8005efa:	4620      	mov	r0, r4
 8005efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f00:	3a30      	subs	r2, #48	; 0x30
 8005f02:	2a09      	cmp	r2, #9
 8005f04:	d903      	bls.n	8005f0e <_svfiprintf_r+0x1a6>
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0c6      	beq.n	8005e98 <_svfiprintf_r+0x130>
 8005f0a:	9105      	str	r1, [sp, #20]
 8005f0c:	e7c4      	b.n	8005e98 <_svfiprintf_r+0x130>
 8005f0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f12:	4604      	mov	r4, r0
 8005f14:	2301      	movs	r3, #1
 8005f16:	e7f0      	b.n	8005efa <_svfiprintf_r+0x192>
 8005f18:	ab03      	add	r3, sp, #12
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	462a      	mov	r2, r5
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <_svfiprintf_r+0x1f4>)
 8005f20:	a904      	add	r1, sp, #16
 8005f22:	4638      	mov	r0, r7
 8005f24:	f3af 8000 	nop.w
 8005f28:	1c42      	adds	r2, r0, #1
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	d1d6      	bne.n	8005edc <_svfiprintf_r+0x174>
 8005f2e:	89ab      	ldrh	r3, [r5, #12]
 8005f30:	065b      	lsls	r3, r3, #25
 8005f32:	f53f af2d 	bmi.w	8005d90 <_svfiprintf_r+0x28>
 8005f36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f38:	b01d      	add	sp, #116	; 0x74
 8005f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3e:	ab03      	add	r3, sp, #12
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	462a      	mov	r2, r5
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <_svfiprintf_r+0x1f4>)
 8005f46:	a904      	add	r1, sp, #16
 8005f48:	4638      	mov	r0, r7
 8005f4a:	f000 f919 	bl	8006180 <_printf_i>
 8005f4e:	e7eb      	b.n	8005f28 <_svfiprintf_r+0x1c0>
 8005f50:	08006604 	.word	0x08006604
 8005f54:	0800660e 	.word	0x0800660e
 8005f58:	00000000 	.word	0x00000000
 8005f5c:	08005cb5 	.word	0x08005cb5
 8005f60:	0800660a 	.word	0x0800660a

08005f64 <sbrk_aligned>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	4e0e      	ldr	r6, [pc, #56]	; (8005fa0 <sbrk_aligned+0x3c>)
 8005f68:	460c      	mov	r4, r1
 8005f6a:	6831      	ldr	r1, [r6, #0]
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	b911      	cbnz	r1, 8005f76 <sbrk_aligned+0x12>
 8005f70:	f000 fa7e 	bl	8006470 <_sbrk_r>
 8005f74:	6030      	str	r0, [r6, #0]
 8005f76:	4621      	mov	r1, r4
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f000 fa79 	bl	8006470 <_sbrk_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	d00a      	beq.n	8005f98 <sbrk_aligned+0x34>
 8005f82:	1cc4      	adds	r4, r0, #3
 8005f84:	f024 0403 	bic.w	r4, r4, #3
 8005f88:	42a0      	cmp	r0, r4
 8005f8a:	d007      	beq.n	8005f9c <sbrk_aligned+0x38>
 8005f8c:	1a21      	subs	r1, r4, r0
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 fa6e 	bl	8006470 <_sbrk_r>
 8005f94:	3001      	adds	r0, #1
 8005f96:	d101      	bne.n	8005f9c <sbrk_aligned+0x38>
 8005f98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	20000684 	.word	0x20000684

08005fa4 <_malloc_r>:
 8005fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa8:	1ccd      	adds	r5, r1, #3
 8005faa:	f025 0503 	bic.w	r5, r5, #3
 8005fae:	3508      	adds	r5, #8
 8005fb0:	2d0c      	cmp	r5, #12
 8005fb2:	bf38      	it	cc
 8005fb4:	250c      	movcc	r5, #12
 8005fb6:	2d00      	cmp	r5, #0
 8005fb8:	4607      	mov	r7, r0
 8005fba:	db01      	blt.n	8005fc0 <_malloc_r+0x1c>
 8005fbc:	42a9      	cmp	r1, r5
 8005fbe:	d905      	bls.n	8005fcc <_malloc_r+0x28>
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060a0 <_malloc_r+0xfc>
 8005fd0:	f000 f9f8 	bl	80063c4 <__malloc_lock>
 8005fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fd8:	461c      	mov	r4, r3
 8005fda:	bb5c      	cbnz	r4, 8006034 <_malloc_r+0x90>
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4638      	mov	r0, r7
 8005fe0:	f7ff ffc0 	bl	8005f64 <sbrk_aligned>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	d155      	bne.n	8006096 <_malloc_r+0xf2>
 8005fea:	f8d8 4000 	ldr.w	r4, [r8]
 8005fee:	4626      	mov	r6, r4
 8005ff0:	2e00      	cmp	r6, #0
 8005ff2:	d145      	bne.n	8006080 <_malloc_r+0xdc>
 8005ff4:	2c00      	cmp	r4, #0
 8005ff6:	d048      	beq.n	800608a <_malloc_r+0xe6>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	eb04 0903 	add.w	r9, r4, r3
 8006002:	f000 fa35 	bl	8006470 <_sbrk_r>
 8006006:	4581      	cmp	r9, r0
 8006008:	d13f      	bne.n	800608a <_malloc_r+0xe6>
 800600a:	6821      	ldr	r1, [r4, #0]
 800600c:	1a6d      	subs	r5, r5, r1
 800600e:	4629      	mov	r1, r5
 8006010:	4638      	mov	r0, r7
 8006012:	f7ff ffa7 	bl	8005f64 <sbrk_aligned>
 8006016:	3001      	adds	r0, #1
 8006018:	d037      	beq.n	800608a <_malloc_r+0xe6>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	442b      	add	r3, r5
 800601e:	6023      	str	r3, [r4, #0]
 8006020:	f8d8 3000 	ldr.w	r3, [r8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d038      	beq.n	800609a <_malloc_r+0xf6>
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	42a2      	cmp	r2, r4
 800602c:	d12b      	bne.n	8006086 <_malloc_r+0xe2>
 800602e:	2200      	movs	r2, #0
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	e00f      	b.n	8006054 <_malloc_r+0xb0>
 8006034:	6822      	ldr	r2, [r4, #0]
 8006036:	1b52      	subs	r2, r2, r5
 8006038:	d41f      	bmi.n	800607a <_malloc_r+0xd6>
 800603a:	2a0b      	cmp	r2, #11
 800603c:	d917      	bls.n	800606e <_malloc_r+0xca>
 800603e:	1961      	adds	r1, r4, r5
 8006040:	42a3      	cmp	r3, r4
 8006042:	6025      	str	r5, [r4, #0]
 8006044:	bf18      	it	ne
 8006046:	6059      	strne	r1, [r3, #4]
 8006048:	6863      	ldr	r3, [r4, #4]
 800604a:	bf08      	it	eq
 800604c:	f8c8 1000 	streq.w	r1, [r8]
 8006050:	5162      	str	r2, [r4, r5]
 8006052:	604b      	str	r3, [r1, #4]
 8006054:	4638      	mov	r0, r7
 8006056:	f104 060b 	add.w	r6, r4, #11
 800605a:	f000 f9b9 	bl	80063d0 <__malloc_unlock>
 800605e:	f026 0607 	bic.w	r6, r6, #7
 8006062:	1d23      	adds	r3, r4, #4
 8006064:	1af2      	subs	r2, r6, r3
 8006066:	d0ae      	beq.n	8005fc6 <_malloc_r+0x22>
 8006068:	1b9b      	subs	r3, r3, r6
 800606a:	50a3      	str	r3, [r4, r2]
 800606c:	e7ab      	b.n	8005fc6 <_malloc_r+0x22>
 800606e:	42a3      	cmp	r3, r4
 8006070:	6862      	ldr	r2, [r4, #4]
 8006072:	d1dd      	bne.n	8006030 <_malloc_r+0x8c>
 8006074:	f8c8 2000 	str.w	r2, [r8]
 8006078:	e7ec      	b.n	8006054 <_malloc_r+0xb0>
 800607a:	4623      	mov	r3, r4
 800607c:	6864      	ldr	r4, [r4, #4]
 800607e:	e7ac      	b.n	8005fda <_malloc_r+0x36>
 8006080:	4634      	mov	r4, r6
 8006082:	6876      	ldr	r6, [r6, #4]
 8006084:	e7b4      	b.n	8005ff0 <_malloc_r+0x4c>
 8006086:	4613      	mov	r3, r2
 8006088:	e7cc      	b.n	8006024 <_malloc_r+0x80>
 800608a:	230c      	movs	r3, #12
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	4638      	mov	r0, r7
 8006090:	f000 f99e 	bl	80063d0 <__malloc_unlock>
 8006094:	e797      	b.n	8005fc6 <_malloc_r+0x22>
 8006096:	6025      	str	r5, [r4, #0]
 8006098:	e7dc      	b.n	8006054 <_malloc_r+0xb0>
 800609a:	605b      	str	r3, [r3, #4]
 800609c:	deff      	udf	#255	; 0xff
 800609e:	bf00      	nop
 80060a0:	20000680 	.word	0x20000680

080060a4 <_printf_common>:
 80060a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	4616      	mov	r6, r2
 80060aa:	4699      	mov	r9, r3
 80060ac:	688a      	ldr	r2, [r1, #8]
 80060ae:	690b      	ldr	r3, [r1, #16]
 80060b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060b4:	4293      	cmp	r3, r2
 80060b6:	bfb8      	it	lt
 80060b8:	4613      	movlt	r3, r2
 80060ba:	6033      	str	r3, [r6, #0]
 80060bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c0:	4607      	mov	r7, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	b10a      	cbz	r2, 80060ca <_printf_common+0x26>
 80060c6:	3301      	adds	r3, #1
 80060c8:	6033      	str	r3, [r6, #0]
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	0699      	lsls	r1, r3, #26
 80060ce:	bf42      	ittt	mi
 80060d0:	6833      	ldrmi	r3, [r6, #0]
 80060d2:	3302      	addmi	r3, #2
 80060d4:	6033      	strmi	r3, [r6, #0]
 80060d6:	6825      	ldr	r5, [r4, #0]
 80060d8:	f015 0506 	ands.w	r5, r5, #6
 80060dc:	d106      	bne.n	80060ec <_printf_common+0x48>
 80060de:	f104 0a19 	add.w	sl, r4, #25
 80060e2:	68e3      	ldr	r3, [r4, #12]
 80060e4:	6832      	ldr	r2, [r6, #0]
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	42ab      	cmp	r3, r5
 80060ea:	dc26      	bgt.n	800613a <_printf_common+0x96>
 80060ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f0:	1e13      	subs	r3, r2, #0
 80060f2:	6822      	ldr	r2, [r4, #0]
 80060f4:	bf18      	it	ne
 80060f6:	2301      	movne	r3, #1
 80060f8:	0692      	lsls	r2, r2, #26
 80060fa:	d42b      	bmi.n	8006154 <_printf_common+0xb0>
 80060fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006100:	4649      	mov	r1, r9
 8006102:	4638      	mov	r0, r7
 8006104:	47c0      	blx	r8
 8006106:	3001      	adds	r0, #1
 8006108:	d01e      	beq.n	8006148 <_printf_common+0xa4>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	6922      	ldr	r2, [r4, #16]
 800610e:	f003 0306 	and.w	r3, r3, #6
 8006112:	2b04      	cmp	r3, #4
 8006114:	bf02      	ittt	eq
 8006116:	68e5      	ldreq	r5, [r4, #12]
 8006118:	6833      	ldreq	r3, [r6, #0]
 800611a:	1aed      	subeq	r5, r5, r3
 800611c:	68a3      	ldr	r3, [r4, #8]
 800611e:	bf0c      	ite	eq
 8006120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006124:	2500      	movne	r5, #0
 8006126:	4293      	cmp	r3, r2
 8006128:	bfc4      	itt	gt
 800612a:	1a9b      	subgt	r3, r3, r2
 800612c:	18ed      	addgt	r5, r5, r3
 800612e:	2600      	movs	r6, #0
 8006130:	341a      	adds	r4, #26
 8006132:	42b5      	cmp	r5, r6
 8006134:	d11a      	bne.n	800616c <_printf_common+0xc8>
 8006136:	2000      	movs	r0, #0
 8006138:	e008      	b.n	800614c <_printf_common+0xa8>
 800613a:	2301      	movs	r3, #1
 800613c:	4652      	mov	r2, sl
 800613e:	4649      	mov	r1, r9
 8006140:	4638      	mov	r0, r7
 8006142:	47c0      	blx	r8
 8006144:	3001      	adds	r0, #1
 8006146:	d103      	bne.n	8006150 <_printf_common+0xac>
 8006148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800614c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006150:	3501      	adds	r5, #1
 8006152:	e7c6      	b.n	80060e2 <_printf_common+0x3e>
 8006154:	18e1      	adds	r1, r4, r3
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	2030      	movs	r0, #48	; 0x30
 800615a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800615e:	4422      	add	r2, r4
 8006160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006168:	3302      	adds	r3, #2
 800616a:	e7c7      	b.n	80060fc <_printf_common+0x58>
 800616c:	2301      	movs	r3, #1
 800616e:	4622      	mov	r2, r4
 8006170:	4649      	mov	r1, r9
 8006172:	4638      	mov	r0, r7
 8006174:	47c0      	blx	r8
 8006176:	3001      	adds	r0, #1
 8006178:	d0e6      	beq.n	8006148 <_printf_common+0xa4>
 800617a:	3601      	adds	r6, #1
 800617c:	e7d9      	b.n	8006132 <_printf_common+0x8e>
	...

08006180 <_printf_i>:
 8006180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006184:	7e0f      	ldrb	r7, [r1, #24]
 8006186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006188:	2f78      	cmp	r7, #120	; 0x78
 800618a:	4691      	mov	r9, r2
 800618c:	4680      	mov	r8, r0
 800618e:	460c      	mov	r4, r1
 8006190:	469a      	mov	sl, r3
 8006192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006196:	d807      	bhi.n	80061a8 <_printf_i+0x28>
 8006198:	2f62      	cmp	r7, #98	; 0x62
 800619a:	d80a      	bhi.n	80061b2 <_printf_i+0x32>
 800619c:	2f00      	cmp	r7, #0
 800619e:	f000 80d4 	beq.w	800634a <_printf_i+0x1ca>
 80061a2:	2f58      	cmp	r7, #88	; 0x58
 80061a4:	f000 80c0 	beq.w	8006328 <_printf_i+0x1a8>
 80061a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061b0:	e03a      	b.n	8006228 <_printf_i+0xa8>
 80061b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061b6:	2b15      	cmp	r3, #21
 80061b8:	d8f6      	bhi.n	80061a8 <_printf_i+0x28>
 80061ba:	a101      	add	r1, pc, #4	; (adr r1, 80061c0 <_printf_i+0x40>)
 80061bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061c0:	08006219 	.word	0x08006219
 80061c4:	0800622d 	.word	0x0800622d
 80061c8:	080061a9 	.word	0x080061a9
 80061cc:	080061a9 	.word	0x080061a9
 80061d0:	080061a9 	.word	0x080061a9
 80061d4:	080061a9 	.word	0x080061a9
 80061d8:	0800622d 	.word	0x0800622d
 80061dc:	080061a9 	.word	0x080061a9
 80061e0:	080061a9 	.word	0x080061a9
 80061e4:	080061a9 	.word	0x080061a9
 80061e8:	080061a9 	.word	0x080061a9
 80061ec:	08006331 	.word	0x08006331
 80061f0:	08006259 	.word	0x08006259
 80061f4:	080062eb 	.word	0x080062eb
 80061f8:	080061a9 	.word	0x080061a9
 80061fc:	080061a9 	.word	0x080061a9
 8006200:	08006353 	.word	0x08006353
 8006204:	080061a9 	.word	0x080061a9
 8006208:	08006259 	.word	0x08006259
 800620c:	080061a9 	.word	0x080061a9
 8006210:	080061a9 	.word	0x080061a9
 8006214:	080062f3 	.word	0x080062f3
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	1d1a      	adds	r2, r3, #4
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	602a      	str	r2, [r5, #0]
 8006220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006228:	2301      	movs	r3, #1
 800622a:	e09f      	b.n	800636c <_printf_i+0x1ec>
 800622c:	6820      	ldr	r0, [r4, #0]
 800622e:	682b      	ldr	r3, [r5, #0]
 8006230:	0607      	lsls	r7, r0, #24
 8006232:	f103 0104 	add.w	r1, r3, #4
 8006236:	6029      	str	r1, [r5, #0]
 8006238:	d501      	bpl.n	800623e <_printf_i+0xbe>
 800623a:	681e      	ldr	r6, [r3, #0]
 800623c:	e003      	b.n	8006246 <_printf_i+0xc6>
 800623e:	0646      	lsls	r6, r0, #25
 8006240:	d5fb      	bpl.n	800623a <_printf_i+0xba>
 8006242:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006246:	2e00      	cmp	r6, #0
 8006248:	da03      	bge.n	8006252 <_printf_i+0xd2>
 800624a:	232d      	movs	r3, #45	; 0x2d
 800624c:	4276      	negs	r6, r6
 800624e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006252:	485a      	ldr	r0, [pc, #360]	; (80063bc <_printf_i+0x23c>)
 8006254:	230a      	movs	r3, #10
 8006256:	e012      	b.n	800627e <_printf_i+0xfe>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	6820      	ldr	r0, [r4, #0]
 800625c:	1d19      	adds	r1, r3, #4
 800625e:	6029      	str	r1, [r5, #0]
 8006260:	0605      	lsls	r5, r0, #24
 8006262:	d501      	bpl.n	8006268 <_printf_i+0xe8>
 8006264:	681e      	ldr	r6, [r3, #0]
 8006266:	e002      	b.n	800626e <_printf_i+0xee>
 8006268:	0641      	lsls	r1, r0, #25
 800626a:	d5fb      	bpl.n	8006264 <_printf_i+0xe4>
 800626c:	881e      	ldrh	r6, [r3, #0]
 800626e:	4853      	ldr	r0, [pc, #332]	; (80063bc <_printf_i+0x23c>)
 8006270:	2f6f      	cmp	r7, #111	; 0x6f
 8006272:	bf0c      	ite	eq
 8006274:	2308      	moveq	r3, #8
 8006276:	230a      	movne	r3, #10
 8006278:	2100      	movs	r1, #0
 800627a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800627e:	6865      	ldr	r5, [r4, #4]
 8006280:	60a5      	str	r5, [r4, #8]
 8006282:	2d00      	cmp	r5, #0
 8006284:	bfa2      	ittt	ge
 8006286:	6821      	ldrge	r1, [r4, #0]
 8006288:	f021 0104 	bicge.w	r1, r1, #4
 800628c:	6021      	strge	r1, [r4, #0]
 800628e:	b90e      	cbnz	r6, 8006294 <_printf_i+0x114>
 8006290:	2d00      	cmp	r5, #0
 8006292:	d04b      	beq.n	800632c <_printf_i+0x1ac>
 8006294:	4615      	mov	r5, r2
 8006296:	fbb6 f1f3 	udiv	r1, r6, r3
 800629a:	fb03 6711 	mls	r7, r3, r1, r6
 800629e:	5dc7      	ldrb	r7, [r0, r7]
 80062a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062a4:	4637      	mov	r7, r6
 80062a6:	42bb      	cmp	r3, r7
 80062a8:	460e      	mov	r6, r1
 80062aa:	d9f4      	bls.n	8006296 <_printf_i+0x116>
 80062ac:	2b08      	cmp	r3, #8
 80062ae:	d10b      	bne.n	80062c8 <_printf_i+0x148>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	07de      	lsls	r6, r3, #31
 80062b4:	d508      	bpl.n	80062c8 <_printf_i+0x148>
 80062b6:	6923      	ldr	r3, [r4, #16]
 80062b8:	6861      	ldr	r1, [r4, #4]
 80062ba:	4299      	cmp	r1, r3
 80062bc:	bfde      	ittt	le
 80062be:	2330      	movle	r3, #48	; 0x30
 80062c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062c8:	1b52      	subs	r2, r2, r5
 80062ca:	6122      	str	r2, [r4, #16]
 80062cc:	f8cd a000 	str.w	sl, [sp]
 80062d0:	464b      	mov	r3, r9
 80062d2:	aa03      	add	r2, sp, #12
 80062d4:	4621      	mov	r1, r4
 80062d6:	4640      	mov	r0, r8
 80062d8:	f7ff fee4 	bl	80060a4 <_printf_common>
 80062dc:	3001      	adds	r0, #1
 80062de:	d14a      	bne.n	8006376 <_printf_i+0x1f6>
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062e4:	b004      	add	sp, #16
 80062e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	f043 0320 	orr.w	r3, r3, #32
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	4833      	ldr	r0, [pc, #204]	; (80063c0 <_printf_i+0x240>)
 80062f4:	2778      	movs	r7, #120	; 0x78
 80062f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	6829      	ldr	r1, [r5, #0]
 80062fe:	061f      	lsls	r7, r3, #24
 8006300:	f851 6b04 	ldr.w	r6, [r1], #4
 8006304:	d402      	bmi.n	800630c <_printf_i+0x18c>
 8006306:	065f      	lsls	r7, r3, #25
 8006308:	bf48      	it	mi
 800630a:	b2b6      	uxthmi	r6, r6
 800630c:	07df      	lsls	r7, r3, #31
 800630e:	bf48      	it	mi
 8006310:	f043 0320 	orrmi.w	r3, r3, #32
 8006314:	6029      	str	r1, [r5, #0]
 8006316:	bf48      	it	mi
 8006318:	6023      	strmi	r3, [r4, #0]
 800631a:	b91e      	cbnz	r6, 8006324 <_printf_i+0x1a4>
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	f023 0320 	bic.w	r3, r3, #32
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	2310      	movs	r3, #16
 8006326:	e7a7      	b.n	8006278 <_printf_i+0xf8>
 8006328:	4824      	ldr	r0, [pc, #144]	; (80063bc <_printf_i+0x23c>)
 800632a:	e7e4      	b.n	80062f6 <_printf_i+0x176>
 800632c:	4615      	mov	r5, r2
 800632e:	e7bd      	b.n	80062ac <_printf_i+0x12c>
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	6826      	ldr	r6, [r4, #0]
 8006334:	6961      	ldr	r1, [r4, #20]
 8006336:	1d18      	adds	r0, r3, #4
 8006338:	6028      	str	r0, [r5, #0]
 800633a:	0635      	lsls	r5, r6, #24
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	d501      	bpl.n	8006344 <_printf_i+0x1c4>
 8006340:	6019      	str	r1, [r3, #0]
 8006342:	e002      	b.n	800634a <_printf_i+0x1ca>
 8006344:	0670      	lsls	r0, r6, #25
 8006346:	d5fb      	bpl.n	8006340 <_printf_i+0x1c0>
 8006348:	8019      	strh	r1, [r3, #0]
 800634a:	2300      	movs	r3, #0
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	4615      	mov	r5, r2
 8006350:	e7bc      	b.n	80062cc <_printf_i+0x14c>
 8006352:	682b      	ldr	r3, [r5, #0]
 8006354:	1d1a      	adds	r2, r3, #4
 8006356:	602a      	str	r2, [r5, #0]
 8006358:	681d      	ldr	r5, [r3, #0]
 800635a:	6862      	ldr	r2, [r4, #4]
 800635c:	2100      	movs	r1, #0
 800635e:	4628      	mov	r0, r5
 8006360:	f7f9 ff36 	bl	80001d0 <memchr>
 8006364:	b108      	cbz	r0, 800636a <_printf_i+0x1ea>
 8006366:	1b40      	subs	r0, r0, r5
 8006368:	6060      	str	r0, [r4, #4]
 800636a:	6863      	ldr	r3, [r4, #4]
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	2300      	movs	r3, #0
 8006370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006374:	e7aa      	b.n	80062cc <_printf_i+0x14c>
 8006376:	6923      	ldr	r3, [r4, #16]
 8006378:	462a      	mov	r2, r5
 800637a:	4649      	mov	r1, r9
 800637c:	4640      	mov	r0, r8
 800637e:	47d0      	blx	sl
 8006380:	3001      	adds	r0, #1
 8006382:	d0ad      	beq.n	80062e0 <_printf_i+0x160>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	079b      	lsls	r3, r3, #30
 8006388:	d413      	bmi.n	80063b2 <_printf_i+0x232>
 800638a:	68e0      	ldr	r0, [r4, #12]
 800638c:	9b03      	ldr	r3, [sp, #12]
 800638e:	4298      	cmp	r0, r3
 8006390:	bfb8      	it	lt
 8006392:	4618      	movlt	r0, r3
 8006394:	e7a6      	b.n	80062e4 <_printf_i+0x164>
 8006396:	2301      	movs	r3, #1
 8006398:	4632      	mov	r2, r6
 800639a:	4649      	mov	r1, r9
 800639c:	4640      	mov	r0, r8
 800639e:	47d0      	blx	sl
 80063a0:	3001      	adds	r0, #1
 80063a2:	d09d      	beq.n	80062e0 <_printf_i+0x160>
 80063a4:	3501      	adds	r5, #1
 80063a6:	68e3      	ldr	r3, [r4, #12]
 80063a8:	9903      	ldr	r1, [sp, #12]
 80063aa:	1a5b      	subs	r3, r3, r1
 80063ac:	42ab      	cmp	r3, r5
 80063ae:	dcf2      	bgt.n	8006396 <_printf_i+0x216>
 80063b0:	e7eb      	b.n	800638a <_printf_i+0x20a>
 80063b2:	2500      	movs	r5, #0
 80063b4:	f104 0619 	add.w	r6, r4, #25
 80063b8:	e7f5      	b.n	80063a6 <_printf_i+0x226>
 80063ba:	bf00      	nop
 80063bc:	08006615 	.word	0x08006615
 80063c0:	08006626 	.word	0x08006626

080063c4 <__malloc_lock>:
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <__malloc_lock+0x8>)
 80063c6:	f7ff bc73 	b.w	8005cb0 <__retarget_lock_acquire_recursive>
 80063ca:	bf00      	nop
 80063cc:	2000067c 	.word	0x2000067c

080063d0 <__malloc_unlock>:
 80063d0:	4801      	ldr	r0, [pc, #4]	; (80063d8 <__malloc_unlock+0x8>)
 80063d2:	f7ff bc6e 	b.w	8005cb2 <__retarget_lock_release_recursive>
 80063d6:	bf00      	nop
 80063d8:	2000067c 	.word	0x2000067c

080063dc <_realloc_r>:
 80063dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e0:	4680      	mov	r8, r0
 80063e2:	4614      	mov	r4, r2
 80063e4:	460e      	mov	r6, r1
 80063e6:	b921      	cbnz	r1, 80063f2 <_realloc_r+0x16>
 80063e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ec:	4611      	mov	r1, r2
 80063ee:	f7ff bdd9 	b.w	8005fa4 <_malloc_r>
 80063f2:	b92a      	cbnz	r2, 8006400 <_realloc_r+0x24>
 80063f4:	f000 f85a 	bl	80064ac <_free_r>
 80063f8:	4625      	mov	r5, r4
 80063fa:	4628      	mov	r0, r5
 80063fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006400:	f000 f8a0 	bl	8006544 <_malloc_usable_size_r>
 8006404:	4284      	cmp	r4, r0
 8006406:	4607      	mov	r7, r0
 8006408:	d802      	bhi.n	8006410 <_realloc_r+0x34>
 800640a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800640e:	d812      	bhi.n	8006436 <_realloc_r+0x5a>
 8006410:	4621      	mov	r1, r4
 8006412:	4640      	mov	r0, r8
 8006414:	f7ff fdc6 	bl	8005fa4 <_malloc_r>
 8006418:	4605      	mov	r5, r0
 800641a:	2800      	cmp	r0, #0
 800641c:	d0ed      	beq.n	80063fa <_realloc_r+0x1e>
 800641e:	42bc      	cmp	r4, r7
 8006420:	4622      	mov	r2, r4
 8006422:	4631      	mov	r1, r6
 8006424:	bf28      	it	cs
 8006426:	463a      	movcs	r2, r7
 8006428:	f000 f832 	bl	8006490 <memcpy>
 800642c:	4631      	mov	r1, r6
 800642e:	4640      	mov	r0, r8
 8006430:	f000 f83c 	bl	80064ac <_free_r>
 8006434:	e7e1      	b.n	80063fa <_realloc_r+0x1e>
 8006436:	4635      	mov	r5, r6
 8006438:	e7df      	b.n	80063fa <_realloc_r+0x1e>

0800643a <memmove>:
 800643a:	4288      	cmp	r0, r1
 800643c:	b510      	push	{r4, lr}
 800643e:	eb01 0402 	add.w	r4, r1, r2
 8006442:	d902      	bls.n	800644a <memmove+0x10>
 8006444:	4284      	cmp	r4, r0
 8006446:	4623      	mov	r3, r4
 8006448:	d807      	bhi.n	800645a <memmove+0x20>
 800644a:	1e43      	subs	r3, r0, #1
 800644c:	42a1      	cmp	r1, r4
 800644e:	d008      	beq.n	8006462 <memmove+0x28>
 8006450:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006454:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006458:	e7f8      	b.n	800644c <memmove+0x12>
 800645a:	4402      	add	r2, r0
 800645c:	4601      	mov	r1, r0
 800645e:	428a      	cmp	r2, r1
 8006460:	d100      	bne.n	8006464 <memmove+0x2a>
 8006462:	bd10      	pop	{r4, pc}
 8006464:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006468:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800646c:	e7f7      	b.n	800645e <memmove+0x24>
	...

08006470 <_sbrk_r>:
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4d06      	ldr	r5, [pc, #24]	; (800648c <_sbrk_r+0x1c>)
 8006474:	2300      	movs	r3, #0
 8006476:	4604      	mov	r4, r0
 8006478:	4608      	mov	r0, r1
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	f7fa ff60 	bl	8001340 <_sbrk>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_sbrk_r+0x1a>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	b103      	cbz	r3, 800648a <_sbrk_r+0x1a>
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	20000688 	.word	0x20000688

08006490 <memcpy>:
 8006490:	440a      	add	r2, r1
 8006492:	4291      	cmp	r1, r2
 8006494:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006498:	d100      	bne.n	800649c <memcpy+0xc>
 800649a:	4770      	bx	lr
 800649c:	b510      	push	{r4, lr}
 800649e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a6:	4291      	cmp	r1, r2
 80064a8:	d1f9      	bne.n	800649e <memcpy+0xe>
 80064aa:	bd10      	pop	{r4, pc}

080064ac <_free_r>:
 80064ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064ae:	2900      	cmp	r1, #0
 80064b0:	d044      	beq.n	800653c <_free_r+0x90>
 80064b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b6:	9001      	str	r0, [sp, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f1a1 0404 	sub.w	r4, r1, #4
 80064be:	bfb8      	it	lt
 80064c0:	18e4      	addlt	r4, r4, r3
 80064c2:	f7ff ff7f 	bl	80063c4 <__malloc_lock>
 80064c6:	4a1e      	ldr	r2, [pc, #120]	; (8006540 <_free_r+0x94>)
 80064c8:	9801      	ldr	r0, [sp, #4]
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	b933      	cbnz	r3, 80064dc <_free_r+0x30>
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	6014      	str	r4, [r2, #0]
 80064d2:	b003      	add	sp, #12
 80064d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064d8:	f7ff bf7a 	b.w	80063d0 <__malloc_unlock>
 80064dc:	42a3      	cmp	r3, r4
 80064de:	d908      	bls.n	80064f2 <_free_r+0x46>
 80064e0:	6825      	ldr	r5, [r4, #0]
 80064e2:	1961      	adds	r1, r4, r5
 80064e4:	428b      	cmp	r3, r1
 80064e6:	bf01      	itttt	eq
 80064e8:	6819      	ldreq	r1, [r3, #0]
 80064ea:	685b      	ldreq	r3, [r3, #4]
 80064ec:	1949      	addeq	r1, r1, r5
 80064ee:	6021      	streq	r1, [r4, #0]
 80064f0:	e7ed      	b.n	80064ce <_free_r+0x22>
 80064f2:	461a      	mov	r2, r3
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b10b      	cbz	r3, 80064fc <_free_r+0x50>
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d9fa      	bls.n	80064f2 <_free_r+0x46>
 80064fc:	6811      	ldr	r1, [r2, #0]
 80064fe:	1855      	adds	r5, r2, r1
 8006500:	42a5      	cmp	r5, r4
 8006502:	d10b      	bne.n	800651c <_free_r+0x70>
 8006504:	6824      	ldr	r4, [r4, #0]
 8006506:	4421      	add	r1, r4
 8006508:	1854      	adds	r4, r2, r1
 800650a:	42a3      	cmp	r3, r4
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	d1e0      	bne.n	80064d2 <_free_r+0x26>
 8006510:	681c      	ldr	r4, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	6053      	str	r3, [r2, #4]
 8006516:	440c      	add	r4, r1
 8006518:	6014      	str	r4, [r2, #0]
 800651a:	e7da      	b.n	80064d2 <_free_r+0x26>
 800651c:	d902      	bls.n	8006524 <_free_r+0x78>
 800651e:	230c      	movs	r3, #12
 8006520:	6003      	str	r3, [r0, #0]
 8006522:	e7d6      	b.n	80064d2 <_free_r+0x26>
 8006524:	6825      	ldr	r5, [r4, #0]
 8006526:	1961      	adds	r1, r4, r5
 8006528:	428b      	cmp	r3, r1
 800652a:	bf04      	itt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	6063      	str	r3, [r4, #4]
 8006532:	bf04      	itt	eq
 8006534:	1949      	addeq	r1, r1, r5
 8006536:	6021      	streq	r1, [r4, #0]
 8006538:	6054      	str	r4, [r2, #4]
 800653a:	e7ca      	b.n	80064d2 <_free_r+0x26>
 800653c:	b003      	add	sp, #12
 800653e:	bd30      	pop	{r4, r5, pc}
 8006540:	20000680 	.word	0x20000680

08006544 <_malloc_usable_size_r>:
 8006544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006548:	1f18      	subs	r0, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	bfbc      	itt	lt
 800654e:	580b      	ldrlt	r3, [r1, r0]
 8006550:	18c0      	addlt	r0, r0, r3
 8006552:	4770      	bx	lr

08006554 <_init>:
 8006554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006556:	bf00      	nop
 8006558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800655a:	bc08      	pop	{r3}
 800655c:	469e      	mov	lr, r3
 800655e:	4770      	bx	lr

08006560 <_fini>:
 8006560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006562:	bf00      	nop
 8006564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006566:	bc08      	pop	{r3}
 8006568:	469e      	mov	lr, r3
 800656a:	4770      	bx	lr
