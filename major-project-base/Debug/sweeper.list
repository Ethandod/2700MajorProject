
sweeper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08008268  08008268  00018268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800833c  0800833c  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800833c  0800833c  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800833c  0800833c  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008340  08008340  00018340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08008344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d8  2**0
                  CONTENTS
 10 .bss          000006c0  200000d8  200000d8  000200d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000798  20000798  000200d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a925  00000000  00000000  0002014b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003e60  00000000  00000000  0003aa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f8  00000000  00000000  0003e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011b6  00000000  00000000  0003ffc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019bef  00000000  00000000  0004117e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001e70f  00000000  00000000  0005ad6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4b70  00000000  00000000  0007947c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006570  00000000  00000000  0013dfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0014455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008250 	.word	0x08008250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	08008250 	.word	0x08008250

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <checkStop>:
void (*stopGame)();

char green[] = "green";
char red[] = "red";

void checkStop(volatile uint8_t* string_buffer, uint32_t size) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	if (strncmp("stop", (char*)string_buffer, 4) == 0) {
 800027a:	2204      	movs	r2, #4
 800027c:	6879      	ldr	r1, [r7, #4]
 800027e:	4806      	ldr	r0, [pc, #24]	; (8000298 <checkStop+0x28>)
 8000280:	f007 fc04 	bl	8007a8c <strncmp>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d102      	bne.n	8000290 <checkStop+0x20>
		stopGame();
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <checkStop+0x2c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4798      	blx	r3
	}
}
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	08008268 	.word	0x08008268
 800029c:	200000f4 	.word	0x200000f4

080002a0 <laptopInterfaceInitialise>:

void laptopInterfaceInitialise(void (*stopGameFunction)()) {
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
	stopGame = stopGameFunction;
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <laptopInterfaceInitialise+0x24>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	6013      	str	r3, [r2, #0]
	serialInitialise(10, BAUD_115200, &USART1_PORT, &checkStop);
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <laptopInterfaceInitialise+0x28>)
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <laptopInterfaceInitialise+0x2c>)
 80002b2:	2104      	movs	r1, #4
 80002b4:	200a      	movs	r0, #10
 80002b6:	f000 f88b 	bl	80003d0 <serialInitialise>
}
 80002ba:	bf00      	nop
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	200000f4 	.word	0x200000f4
 80002c8:	08000271 	.word	0x08000271
 80002cc:	2000000c 	.word	0x2000000c

080002d0 <setLaptopGreen>:

void setLaptopGreen() {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
	 volatile uint8_t* ptr = (volatile uint8_t*) green;
 80002d6:	4b05      	ldr	r3, [pc, #20]	; (80002ec <setLaptopGreen+0x1c>)
 80002d8:	607b      	str	r3, [r7, #4]
	 serialTransmitString(ptr, &USART1_PORT);
 80002da:	4905      	ldr	r1, [pc, #20]	; (80002f0 <setLaptopGreen+0x20>)
 80002dc:	6878      	ldr	r0, [r7, #4]
 80002de:	f000 f9ec 	bl	80006ba <serialTransmitString>
}
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000000 	.word	0x20000000
 80002f0:	2000000c 	.word	0x2000000c

080002f4 <setLaptopRed>:

void setLaptopRed() {
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
	 volatile uint8_t* ptr = (volatile uint8_t*) red;
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <setLaptopRed+0x1c>)
 80002fc:	607b      	str	r3, [r7, #4]
	 serialTransmitString(ptr, &USART1_PORT);
 80002fe:	4905      	ldr	r1, [pc, #20]	; (8000314 <setLaptopRed+0x20>)
 8000300:	6878      	ldr	r0, [r7, #4]
 8000302:	f000 f9da 	bl	80006ba <serialTransmitString>
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000008 	.word	0x20000008
 8000314:	2000000c 	.word	0x2000000c

08000318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000326:	2b00      	cmp	r3, #0
 8000328:	db0b      	blt.n	8000342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	f003 021f 	and.w	r2, r3, #31
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <__NVIC_EnableIRQ+0x38>)
 8000332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000336:	095b      	lsrs	r3, r3, #5
 8000338:	2001      	movs	r0, #1
 800033a:	fa00 f202 	lsl.w	r2, r0, r2
 800033e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	e000e100 	.word	0xe000e100

08000354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	6039      	str	r1, [r7, #0]
 800035e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	db0a      	blt.n	800037e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	490c      	ldr	r1, [pc, #48]	; (80003a0 <__NVIC_SetPriority+0x4c>)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	0112      	lsls	r2, r2, #4
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	440b      	add	r3, r1
 8000378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800037c:	e00a      	b.n	8000394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	b2da      	uxtb	r2, r3
 8000382:	4908      	ldr	r1, [pc, #32]	; (80003a4 <__NVIC_SetPriority+0x50>)
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	f003 030f 	and.w	r3, r3, #15
 800038a:	3b04      	subs	r3, #4
 800038c:	0112      	lsls	r2, r2, #4
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	440b      	add	r3, r1
 8000392:	761a      	strb	r2, [r3, #24]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	e000e100 	.word	0xe000e100
 80003a4:	e000ed00 	.word	0xe000ed00

080003a8 <USART1_IRQHandler>:
		0x00, // default transmit pointer is NULL
		USART1_IRQn, // the specific IRQn for the given USART
		0x00, // default RxCompletedStringFunction is NULL
		};

void USART1_IRQHandler(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
	// Catch the interrupt and call the handler with the appropriate USART port
	serialReceiveCharacter(&USART1_PORT);
 80003ac:	4806      	ldr	r0, [pc, #24]	; (80003c8 <USART1_IRQHandler+0x20>)
 80003ae:	f000 f8e7 	bl	8000580 <serialReceiveCharacter>
	// Only transmit if transmit interupt is enabled
	if ((USART1->CR1 & USART_CR1_TXEIE) != 0) {
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <USART1_IRQHandler+0x24>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d002      	beq.n	80003c4 <USART1_IRQHandler+0x1c>
		serialTransmitCharacter(&USART1_PORT);
 80003be:	4802      	ldr	r0, [pc, #8]	; (80003c8 <USART1_IRQHandler+0x20>)
 80003c0:	f000 f946 	bl	8000650 <serialTransmitCharacter>
	}
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	2000000c 	.word	0x2000000c
 80003cc:	40013800 	.word	0x40013800

080003d0 <serialInitialise>:

// Initialise a serial port with interrupts
void serialInitialise(uint32_t buffer_size,
					  uint32_t baudRate,
					  SerialPort *serial_port,
					  void (*rxCompletedStringFunction)(volatile uint8_t*, uint32_t)) {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
 80003dc:	603b      	str	r3, [r7, #0]
	// function - pointer to function with inputs pointer to buffer and string length


	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003de:	4b55      	ldr	r3, [pc, #340]	; (8000534 <serialInitialise+0x164>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	4a54      	ldr	r2, [pc, #336]	; (8000534 <serialInitialise+0x164>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003ea:	4b52      	ldr	r3, [pc, #328]	; (8000534 <serialInitialise+0x164>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a51      	ldr	r2, [pc, #324]	; (8000534 <serialInitialise+0x164>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	691a      	ldr	r2, [r3, #16]
 80003fa:	4b4e      	ldr	r3, [pc, #312]	; (8000534 <serialInitialise+0x164>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	494d      	ldr	r1, [pc, #308]	; (8000534 <serialInitialise+0x164>)
 8000400:	4313      	orrs	r3, r2
 8000402:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function and speed to high for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	6952      	ldr	r2, [r2, #20]
 800040c:	601a      	str	r2, [r3, #0]
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	685b      	ldr	r3, [r3, #4]
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	6992      	ldr	r2, [r2, #24]
 8000416:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	69d9      	ldr	r1, [r3, #28]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	6a1a      	ldr	r2, [r3, #32]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	430a      	orrs	r2, r1
 8000428:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6a19      	ldr	r1, [r3, #32]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	430a      	orrs	r2, r1
 800043a:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68da      	ldr	r2, [r3, #12]
 8000440:	4b3c      	ldr	r3, [pc, #240]	; (8000534 <serialInitialise+0x164>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	493b      	ldr	r1, [pc, #236]	; (8000534 <serialInitialise+0x164>)
 8000446:	4313      	orrs	r3, r2
 8000448:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	689a      	ldr	r2, [r3, #8]
 800044e:	4b39      	ldr	r3, [pc, #228]	; (8000534 <serialInitialise+0x164>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4938      	ldr	r1, [pc, #224]	; (8000534 <serialInitialise+0x164>)
 8000454:	4313      	orrs	r3, r2
 8000456:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	330c      	adds	r3, #12
 800045e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	2b04      	cmp	r3, #4
 8000464:	d821      	bhi.n	80004aa <serialInitialise+0xda>
 8000466:	a201      	add	r2, pc, #4	; (adr r2, 800046c <serialInitialise+0x9c>)
 8000468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046c:	08000481 	.word	0x08000481
 8000470:	08000489 	.word	0x08000489
 8000474:	08000491 	.word	0x08000491
 8000478:	08000499 	.word	0x08000499
 800047c:	080004a1 	.word	0x080004a1
	case BAUD_9600:
		*baud_rate_config = 0x341/6;  // 9600 at 8MHz
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	228a      	movs	r2, #138	; 0x8a
 8000484:	801a      	strh	r2, [r3, #0]
		break;
 8000486:	e010      	b.n	80004aa <serialInitialise+0xda>
	case BAUD_19200:
		*baud_rate_config = 0x1A1/6;  // 19200 at 8MHz
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	2245      	movs	r2, #69	; 0x45
 800048c:	801a      	strh	r2, [r3, #0]
		break;
 800048e:	e00c      	b.n	80004aa <serialInitialise+0xda>
	case BAUD_38400:
		*baud_rate_config = 0xD0;  // 38400 at 8MHz
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	22d0      	movs	r2, #208	; 0xd0
 8000494:	801a      	strh	r2, [r3, #0]
		break;
 8000496:	e008      	b.n	80004aa <serialInitialise+0xda>
	case BAUD_57600:
		*baud_rate_config = 0x8B;  // 57600 at 8MHz
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	228b      	movs	r2, #139	; 0x8b
 800049c:	801a      	strh	r2, [r3, #0]
		break;
 800049e:	e004      	b.n	80004aa <serialInitialise+0xda>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 6;  // 115200 at 8MHz
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80004a6:	801a      	strh	r2, [r3, #0]
		break;
 80004a8:	bf00      	nop
	}

	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	f042 020d 	orr.w	r2, r2, #13
 80004b8:	601a      	str	r2, [r3, #0]

	// initialise the double buffer
	serial_port->BufferSize = buffer_size;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	631a      	str	r2, [r3, #48]	; 0x30
	serial_port->StringBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c4:	4618      	mov	r0, r3
 80004c6:	f007 fa05 	bl	80078d4 <malloc>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
	serial_port->AlternateStringBuffer = (volatile uint8_t*)malloc(serial_port->BufferSize * sizeof(uint8_t));
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4618      	mov	r0, r3
 80004d8:	f007 f9fc 	bl	80078d4 <malloc>
 80004dc:	4603      	mov	r3, r0
 80004de:	461a      	mov	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	629a      	str	r2, [r3, #40]	; 0x28

	// set the completion function
	serial_port->RxCompletedStringFunction = rxCompletedStringFunction;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	63da      	str	r2, [r3, #60]	; 0x3c
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ea:	b672      	cpsid	i
}
 80004ec:	bf00      	nop

	__disable_irq();

	// enable the rx interrupts, tx interrupts enabled when a string is being tranmitted
	serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f042 0220 	orr.w	r2, r2, #32
 80004fc:	601a      	str	r2, [r3, #0]
	serial_port->UART->CR3 |= USART_CR3_EIE;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	689a      	ldr	r2, [r3, #8]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f042 0201 	orr.w	r2, r2, #1
 800050c:	609a      	str	r2, [r3, #8]

	// Tell the NVIC module to enable interrupt and set priority
	NVIC_SetPriority(serial_port->UART_IRQn, 4);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000512:	b25b      	sxtb	r3, r3
 8000514:	2104      	movs	r1, #4
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff1c 	bl	8000354 <__NVIC_SetPriority>
	NVIC_EnableIRQ(serial_port->UART_IRQn);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fef8 	bl	8000318 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000528:	b662      	cpsie	i
}
 800052a:	bf00      	nop
	__enable_irq();
}
 800052c:	bf00      	nop
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40021000 	.word	0x40021000

08000538 <setTransmitInterrupt>:

void setTransmitInterrupt(bool set, SerialPort *serial_port) {
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	4603      	mov	r3, r0
 8000540:	6039      	str	r1, [r7, #0]
 8000542:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
	// Function to enable/disable the transmit interrupt
	__disable_irq();
	if (set) {
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d008      	beq.n	8000560 <setTransmitInterrupt+0x28>
		serial_port->UART->CR1 |= USART_CR1_TXEIE;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	e007      	b.n	8000570 <setTransmitInterrupt+0x38>
	} else {
		serial_port->UART->CR1 &= ~USART_CR1_TXEIE;
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800056e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000570:	b662      	cpsie	i
}
 8000572:	bf00      	nop
	}
	__enable_irq();
}
 8000574:	bf00      	nop
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <serialReceiveCharacter>:

void serialReceiveCharacter(SerialPort *serial_port) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	// Called when interrupt is activated to receive a character into the buffer
	// When the buffer is full, call the callback function and switch the buffers

	// If byte is received properly
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 0320 	and.w	r3, r3, #32
 8000592:	2b00      	cmp	r3, #0
 8000594:	d04f      	beq.n	8000636 <serialReceiveCharacter+0xb6>
		(serial_port->UART->ISR & USART_ISR_FE) == 0 &&
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	f003 0302 	and.w	r3, r3, #2
	if (!((serial_port->UART->ISR & USART_ISR_RXNE) == 0) &&
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d148      	bne.n	8000636 <serialReceiveCharacter+0xb6>
		(serial_port->UART->ISR & USART_ISR_ORE) == 0) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 0308 	and.w	r3, r3, #8
		(serial_port->UART->ISR & USART_ISR_FE) == 0 &&
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d141      	bne.n	8000636 <serialReceiveCharacter+0xb6>

		// Add the new character to the string buffer
		serial_port->StringBuffer[serial_port->BufferCount] = serial_port->UART->RDR & 0xFF;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80005b8:	b299      	uxth	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005c2:	4413      	add	r3, r2
 80005c4:	b2ca      	uxtb	r2, r1
 80005c6:	701a      	strb	r2, [r3, #0]
		serial_port->BufferCount++;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005cc:	1c5a      	adds	r2, r3, #1
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	62da      	str	r2, [r3, #44]	; 0x2c

		// if exceeding size limit append 0x00 NULL terminating character
		if (serial_port->BufferCount + 1 == serial_port->BufferSize) {
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	429a      	cmp	r2, r3
 80005de:	d10b      	bne.n	80005f8 <serialReceiveCharacter+0x78>
			serial_port->StringBuffer[serial_port->BufferCount] = 0x00;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e8:	4413      	add	r3, r2
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
			serial_port-> BufferCount++;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f2:	1c5a      	adds	r2, r3, #1
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		// If terminating character found -> flip the buffers and call the callback function
		if (serial_port->StringBuffer[serial_port->BufferCount - 1] == 0x00){
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000600:	3b01      	subs	r3, #1
 8000602:	4413      	add	r3, r2
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d11d      	bne.n	8000648 <serialReceiveCharacter+0xc8>
			// Swap the buffers
			volatile uint8_t* temporary_buffer_pointer = serial_port->StringBuffer;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000610:	60fb      	str	r3, [r7, #12]
			serial_port->StringBuffer = serial_port->AlternateStringBuffer;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
			serial_port->AlternateStringBuffer = temporary_buffer_pointer;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	68fa      	ldr	r2, [r7, #12]
 800061e:	629a      	str	r2, [r3, #40]	; 0x28

			// Callback function
			serial_port->RxCompletedStringFunction(temporary_buffer_pointer, serial_port->BufferCount);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000628:	4611      	mov	r1, r2
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	4798      	blx	r3
			serial_port-> BufferCount = 0;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
		if (serial_port->StringBuffer[serial_port->BufferCount - 1] == 0x00){
 8000634:	e008      	b.n	8000648 <serialReceiveCharacter+0xc8>
		}
	} else {
		// Clear errors if frame is not received properly
		serial_port->UART->ICR |= USART_ICR_ORECF | USART_ICR_FECF;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	6a1a      	ldr	r2, [r3, #32]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f042 020a 	orr.w	r2, r2, #10
 8000644:	621a      	str	r2, [r3, #32]

	}
}
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <serialTransmitCharacter>:

void serialTransmitCharacter(SerialPort *serial_port) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	// Called when the interrupt is activated and transmit interrupt is enabled

	// Check whether tx interrupt called the function, do nothing if tx interrupt didn't call
	if ((serial_port->UART->ISR & USART_ISR_TXE) == 0) {return;}
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	2b00      	cmp	r3, #0
 8000664:	d023      	beq.n	80006ae <serialTransmitCharacter+0x5e>

	// If we are at the end of the transmit buffer (null character),
	// send \r then \0 on the next interrupt then disable interrupt (no more characters to transmit)
	if (serial_port->TransmitPointer == 0x00) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066a:	2b00      	cmp	r3, #0
 800066c:	d021      	beq.n	80006b2 <serialTransmitCharacter+0x62>
		return;
	}

	// If nothing left to send set pointer to null
	if (*serial_port->TransmitPointer == 0x00) {
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b00      	cmp	r3, #0
 8000678:	d10b      	bne.n	8000692 <serialTransmitCharacter+0x42>
		serial_port->UART->TDR = 0;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2200      	movs	r2, #0
 8000680:	851a      	strh	r2, [r3, #40]	; 0x28
		serial_port->TransmitPointer = 0;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	635a      	str	r2, [r3, #52]	; 0x34
		setTransmitInterrupt(false, serial_port);
 8000688:	6879      	ldr	r1, [r7, #4]
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff ff54 	bl	8000538 <setTransmitInterrupt>
		return;
 8000690:	e010      	b.n	80006b4 <serialTransmitCharacter+0x64>
	}

	// All other cases, transmit the character normally
	serial_port->UART->TDR = *serial_port->TransmitPointer;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	b292      	uxth	r2, r2
 80006a0:	851a      	strh	r2, [r3, #40]	; 0x28
	serial_port->TransmitPointer++;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	635a      	str	r2, [r3, #52]	; 0x34
 80006ac:	e002      	b.n	80006b4 <serialTransmitCharacter+0x64>
	if ((serial_port->UART->ISR & USART_ISR_TXE) == 0) {return;}
 80006ae:	bf00      	nop
 80006b0:	e000      	b.n	80006b4 <serialTransmitCharacter+0x64>
		return;
 80006b2:	bf00      	nop
}
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <serialTransmitString>:

void serialTransmitString(volatile uint8_t* pt, SerialPort *serial_port) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	6039      	str	r1, [r7, #0]
	// Set the pointer to the start of the string to transmit then enable the tx interrupt
	serial_port->TransmitPointer = pt;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
	setTransmitInterrupt(true, serial_port);
 80006ca:	6839      	ldr	r1, [r7, #0]
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff33 	bl	8000538 <setTransmitInterrupt>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <__NVIC_EnableIRQ>:
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	db0b      	blt.n	8000706 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 021f 	and.w	r2, r3, #31
 80006f4:	4907      	ldr	r1, [pc, #28]	; (8000714 <__NVIC_EnableIRQ+0x38>)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	095b      	lsrs	r3, r3, #5
 80006fc:	2001      	movs	r0, #1
 80006fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000e100 	.word	0xe000e100

08000718 <__NVIC_SetPriority>:
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	6039      	str	r1, [r7, #0]
 8000722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000728:	2b00      	cmp	r3, #0
 800072a:	db0a      	blt.n	8000742 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	490c      	ldr	r1, [pc, #48]	; (8000764 <__NVIC_SetPriority+0x4c>)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	0112      	lsls	r2, r2, #4
 8000738:	b2d2      	uxtb	r2, r2
 800073a:	440b      	add	r3, r1
 800073c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000740:	e00a      	b.n	8000758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4908      	ldr	r1, [pc, #32]	; (8000768 <__NVIC_SetPriority+0x50>)
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	f003 030f 	and.w	r3, r3, #15
 800074e:	3b04      	subs	r3, #4
 8000750:	0112      	lsls	r2, r2, #4
 8000752:	b2d2      	uxtb	r2, r2
 8000754:	440b      	add	r3, r1
 8000756:	761a      	strb	r2, [r3, #24]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	e000e100 	.word	0xe000e100
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <enable_interrupt>:
// set a default value of NULL so that it won't be called until the
// function pointer is defined
static void (*on_button_press)() = 0x00;

void enable_interrupt()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000770:	b672      	cpsid	i
}
 8000772:	bf00      	nop
    __disable_irq();

    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <enable_interrupt+0x4c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <enable_interrupt+0x4c>)
 800077a:	f043 0301 	orr.w	r3, r3, #1
 800077e:	6193      	str	r3, [r2, #24]

    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <enable_interrupt+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]

    EXTI->RTSR |= EXTI_RTSR_TR0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <enable_interrupt+0x54>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <enable_interrupt+0x54>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <enable_interrupt+0x54>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <enable_interrupt+0x54>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority(EXTI0_IRQn, -1);
 800079e:	f04f 31ff 	mov.w	r1, #4294967295
 80007a2:	2006      	movs	r0, #6
 80007a4:	f7ff ffb8 	bl	8000718 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80007a8:	2006      	movs	r0, #6
 80007aa:	f7ff ff97 	bl	80006dc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80007ae:	b662      	cpsie	i
}
 80007b0:	bf00      	nop

    __enable_irq();
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010000 	.word	0x40010000
 80007c0:	40010400 	.word	0x40010400

080007c4 <initButtonHandler>:

void initButtonHandler(ButtonPressCallback callback)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    on_button_press = callback;
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <initButtonHandler+0x1c>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200000f8 	.word	0x200000f8

080007e4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
    // run the button press handler (make sure it is not null first !)
    if (on_button_press != 0x00)
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <EXTI0_IRQHandler+0x24>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d002      	beq.n	80007f6 <EXTI0_IRQHandler+0x12>
    {
        on_button_press();
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <EXTI0_IRQHandler+0x24>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4798      	blx	r3
    }

    // reset the interrupt (so it doesn't keep firing until the next trigger)
    EXTI->PR |= EXTI_PR_PR0;
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <EXTI0_IRQHandler+0x28>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <EXTI0_IRQHandler+0x28>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6153      	str	r3, [r2, #20]
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000f8 	.word	0x200000f8
 800080c:	40010400 	.word	0x40010400

08000810 <set_pan>:
{
	return pan.position;
}

uint8_t set_pan(uint16_t pwmVal)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	80fb      	strh	r3, [r7, #6]
	if (pwmVal < 0 || pwmVal > 2000)
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000820:	d901      	bls.n	8000826 <set_pan+0x16>
	{
		return 1;
 8000822:	2301      	movs	r3, #1
 8000824:	e008      	b.n	8000838 <set_pan+0x28>
	}

	pan.position = pwmVal;
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <set_pan+0x34>)
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	8093      	strh	r3, [r2, #4]
	pan.controlTimer->Instance->CCR2 = pwmVal;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <set_pan+0x34>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	88fa      	ldrh	r2, [r7, #6]
 8000834:	639a      	str	r2, [r3, #56]	; 0x38
	return 0;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	200000fc 	.word	0x200000fc

08000848 <set_tilt>:

uint8_t set_tilt(uint16_t pwmVal)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
	if (pwmVal < 0 || pwmVal > 2000)
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000858:	d901      	bls.n	800085e <set_tilt+0x16>
	{
		return 1;
 800085a:	2301      	movs	r3, #1
 800085c:	e008      	b.n	8000870 <set_tilt+0x28>
	}

	tilt.position = pwmVal;
 800085e:	4a07      	ldr	r2, [pc, #28]	; (800087c <set_tilt+0x34>)
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	8093      	strh	r3, [r2, #4]
	tilt.controlTimer->Instance->CCR1 = pwmVal;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <set_tilt+0x34>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	88fa      	ldrh	r2, [r7, #6]
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
	return 0;
 800086e:	2300      	movs	r3, #0
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	20000104 	.word	0x20000104

08000880 <transfer_array_data>:

void transfer_array_data(uint16_t *sourceArray, uint16_t *targetArray, uint16_t elements)
{
 8000880:	b480      	push	{r7}
 8000882:	b087      	sub	sp, #28
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	4613      	mov	r3, r2
 800088c:	80fb      	strh	r3, [r7, #6]
	for(int c = 0; c < elements;c++)
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	e00c      	b.n	80008ae <transfer_array_data+0x2e>
	{
		targetArray[c] = sourceArray[c];
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	441a      	add	r2, r3
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	440b      	add	r3, r1
 80008a4:	8812      	ldrh	r2, [r2, #0]
 80008a6:	801a      	strh	r2, [r3, #0]
	for(int c = 0; c < elements;c++)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	3301      	adds	r3, #1
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	dbee      	blt.n	8000894 <transfer_array_data+0x14>
	}
	return;
 80008b6:	bf00      	nop
}
 80008b8:	371c      	adds	r7, #28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <setup_sweeper>:

void setup_sweeper(I2C_HandleTypeDef *hi2c1, SPI_HandleTypeDef *hspi1, TIM_HandleTypeDef *htim1, TIM_HandleTypeDef *htim2, PCD_HandleTypeDef *hpcd_USB_FS)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
	// enable clocks
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80008d2:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <setup_sweeper+0x7c>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <setup_sweeper+0x7c>)
 80008d8:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80008dc:	6153      	str	r3, [r2, #20]

	//SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);

	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_1);
 80008de:	2100      	movs	r1, #0
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f005 fb2f 	bl	8005f44 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2, TIM_CHANNEL_2);
 80008e6:	2104      	movs	r1, #4
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f005 fb2b 	bl	8005f44 <HAL_TIM_PWM_Start>

	HAL_TIM_IC_Start_IT(htim1, TIM_CHANNEL_1);
 80008ee:	2100      	movs	r1, #0
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f005 fc89 	bl	8006208 <HAL_TIM_IC_Start_IT>

	// TIM 2 is setup with a prescaler that makes 1 count = 1 microsecond
	// Even with HAL, you can still set the values yourself
	TIM2->ARR = 20000; // 20000 = 20ms, which is the desired clock period for servos
 80008f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008fa:	f644 6220 	movw	r2, #20000	; 0x4e20
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // this makes the timing not change until the next pulse is finished
 8000900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800090a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800090e:	6013      	str	r3, [r2, #0]

	// note: for PWM if you continually change the clock period
	// you can get unexpected results. To remove this, set ARPE so that the
	// ARR settings are not activated until the next cycle.

	initialise_ptu_i2c(hi2c1);
 8000910:	68f8      	ldr	r0, [r7, #12]
 8000912:	f000 fd85 	bl	8001420 <initialise_ptu_i2c>
//	uint8_t reset_value = 0x00;
//	return_value = HAL_I2C_Mem_Write(hi2c1, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);


	// set the servos to their starting positions
	pan.controlTimer = htim2;
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <setup_sweeper+0x80>)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	6013      	str	r3, [r2, #0]
	tilt.controlTimer = htim2;
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <setup_sweeper+0x84>)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	6013      	str	r3, [r2, #0]

	set_pan(STARTING_OFFSET_HORI);
 8000922:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000926:	f7ff ff73 	bl	8000810 <set_pan>
	set_tilt(STARTING_OFFSET_VERT);
 800092a:	f240 50aa 	movw	r0, #1450	; 0x5aa
 800092e:	f7ff ff8b 	bl	8000848 <set_tilt>

	HAL_Delay(100);
 8000932:	2064      	movs	r0, #100	; 0x64
 8000934:	f001 fae4 	bl	8001f00 <HAL_Delay>


}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40021000 	.word	0x40021000
 8000944:	200000fc 	.word	0x200000fc
 8000948:	20000104 	.word	0x20000104

0800094c <sweep>:

void sweep(uint16_t *previousReadings, uint16_t *output)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b09a      	sub	sp, #104	; 0x68
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
	uint16_t step_increment = DEGREES_PER_STEP * PWM_PER_DEGREE;
 8000956:	230b      	movs	r3, #11
 8000958:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t starting_pwm = STARTING_OFFSET_HORI - (step_increment * READINGS_PER_SWEEP) / 2;
 800095c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000960:	461a      	mov	r2, r3
 8000962:	011b      	lsls	r3, r3, #4
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	b29b      	uxth	r3, r3
 800096a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800096e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t finishing_pwm = STARTING_OFFSET_HORI + (step_increment * READINGS_PER_SWEEP) / 2;
 8000972:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000976:	461a      	mov	r2, r3
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	b29b      	uxth	r3, r3
 8000980:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000984:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	// OPERATIONAL
	uint16_t current_pwm;
	uint8_t string_to_send[64];
	uint16_t delta;
	uint8_t thresholdBreachCount = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	// set the servos to the starting position
	//SerialOutputString("############\r\n", &USART1_PORT);
	set_tilt(STARTING_OFFSET_VERT);
 800098e:	f240 50aa 	movw	r0, #1450	; 0x5aa
 8000992:	f7ff ff59 	bl	8000848 <set_tilt>
	set_pan(starting_pwm);
 8000996:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff ff38 	bl	8000810 <set_pan>
	HAL_Delay(DEGREE_TRAVERSE_MS * DEGREES_OF_SWEEP * RESET_DELAY_FACTOR);
 80009a0:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80009a4:	f001 faac 	bl	8001f00 <HAL_Delay>

//	sprintf(string_to_send, "---{%hu}---\r\n", previousReadings[READINGS_PER_SWEEP - 1]);
//	SerialOutputString(string_to_send, &USART1_PORT);


	for(int i = 1; i < READINGS_PER_SWEEP; i++) // DO NOT CHANGE i TO 0, ITS A COCONUT.png situation
 80009a8:	2301      	movs	r3, #1
 80009aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80009ac:	e069      	b.n	8000a82 <sweep+0x136>
	{
		current_pwm = starting_pwm + step_increment * i;
 80009ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 80009b6:	fb12 f303 	smulbb	r3, r2, r3
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80009c0:	4413      	add	r3, r2
 80009c2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		set_pan(current_pwm);
 80009c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff20 	bl	8000810 <set_pan>

		HAL_Delay(DEGREE_TRAVERSE_MS * DEGREES_PER_STEP * SWEEP_DELAY_FACTOR);
 80009d0:	201e      	movs	r0, #30
 80009d2:	f001 fa95 	bl	8001f00 <HAL_Delay>
		output[i] = last_period;
 80009d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	4413      	add	r3, r2
 80009de:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <sweep+0x144>)
 80009e0:	8812      	ldrh	r2, [r2, #0]
 80009e2:	801a      	strh	r2, [r3, #0]

		if (previousReadings != NULL)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d035      	beq.n	8000a56 <sweep+0x10a>
		{
			delta = abs(output[i]-previousReadings[i]);
 80009ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	4413      	add	r3, r2
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	4413      	add	r3, r2
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	1acb      	subs	r3, r1, r3
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bfb8      	it	lt
 8000a06:	425b      	neglt	r3, r3
 8000a08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			sprintf(string_to_send, "[%hu] : {%hu vs %hu} --> [%hu]\r\n",i, output[i], previousReadings[i], delta);
 8000a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	4619      	mov	r1, r3
 8000a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	4413      	add	r3, r2
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	461a      	mov	r2, r3
 8000a24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000a28:	f107 000c 	add.w	r0, r7, #12
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	9200      	str	r2, [sp, #0]
 8000a30:	460b      	mov	r3, r1
 8000a32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000a34:	4917      	ldr	r1, [pc, #92]	; (8000a94 <sweep+0x148>)
 8000a36:	f007 f801 	bl	8007a3c <siprintf>
			//SerialOutputString(string_to_send, &USART1_PORT);

			if (delta > THRESHOLD_VALUE)
 8000a3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000a3e:	2b64      	cmp	r3, #100	; 0x64
 8000a40:	d905      	bls.n	8000a4e <sweep+0x102>
			{
				thresholdBreachCount++;
 8000a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000a46:	3301      	adds	r3, #1
 8000a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000a4c:	e00f      	b.n	8000a6e <sweep+0x122>
			}
			else
			{
				thresholdBreachCount = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000a54:	e00b      	b.n	8000a6e <sweep+0x122>
			}
		}
		else
		{
			sprintf(string_to_send, "{%hu}\r\n", output[i]);
 8000a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	683a      	ldr	r2, [r7, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	490c      	ldr	r1, [pc, #48]	; (8000a98 <sweep+0x14c>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f006 ffe7 	bl	8007a3c <siprintf>
			//SerialOutputString(string_to_send, &USART1_PORT);
		}
		if (thresholdBreachCount >= BREACHES)
 8000a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000a72:	2b04      	cmp	r3, #4
 8000a74:	d902      	bls.n	8000a7c <sweep+0x130>
		{
			//SerialOutputString("Breach Limit Reached!!!\r\n", &USART1_PORT);

			set_detected();
 8000a76:	f001 f809 	bl	8001a8c <set_detected>
 8000a7a:	e005      	b.n	8000a88 <sweep+0x13c>
	for(int i = 1; i < READINGS_PER_SWEEP; i++) // DO NOT CHANGE i TO 0, ITS A COCONUT.png situation
 8000a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a7e:	3301      	adds	r3, #1
 8000a80:	65bb      	str	r3, [r7, #88]	; 0x58
 8000a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a84:	2b3b      	cmp	r3, #59	; 0x3b
 8000a86:	dd92      	ble.n	80009ae <sweep+0x62>
			return;
		}
	}
}
 8000a88:	3760      	adds	r7, #96	; 0x60
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000112 	.word	0x20000112
 8000a94:	08008270 	.word	0x08008270
 8000a98:	08008294 	.word	0x08008294

08000a9c <sweep_routine>:
	}

}

void sweep_routine()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0bc      	sub	sp, #240	; 0xf0
 8000aa0:	af00      	add	r7, sp, #0
	uint16_t previousSet[READINGS_PER_SWEEP];
	previousSet[0] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
//		memcpy(previousSet, currentSet, sizeof(previousSet));
////		omni_sweep(LR, &previousSet, &currentSet);
////		*previousSet = &currentSet;
//	}

	sweep(NULL, &previousSet);
 8000aa8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000aac:	4619      	mov	r1, r3
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff ff4c 	bl	800094c <sweep>


	while (get_status() == RED)
 8000ab4:	e00d      	b.n	8000ad2 <sweep_routine+0x36>
	{
		sweep(&previousSet, &currentSet);
 8000ab6:	463a      	mov	r2, r7
 8000ab8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000abc:	4611      	mov	r1, r2
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff44 	bl	800094c <sweep>
		transfer_array_data(&currentSet, &previousSet, READINGS_PER_SWEEP);
 8000ac4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8000ac8:	463b      	mov	r3, r7
 8000aca:	223c      	movs	r2, #60	; 0x3c
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fed7 	bl	8000880 <transfer_array_data>
	while (get_status() == RED)
 8000ad2:	f000 ffab 	bl	8001a2c <get_status>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d0ec      	beq.n	8000ab6 <sweep_routine+0x1a>
	}

}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	37f0      	adds	r7, #240	; 0xf0
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	uint8_t buffer[32];
	if (htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d127      	bne.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x62>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7f1b      	ldrb	r3, [r3, #28]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d123      	bne.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x62>
	{
		uint16_t IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000b02:	2100      	movs	r1, #0
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f006 f85b 	bl	8006bc0 <HAL_TIM_ReadCapturedValue>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == 1)
 8000b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b16:	f002 fee3 	bl	80038e0 <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d103      	bne.n	8000b28 <HAL_TIM_IC_CaptureCallback+0x40>
			rise_time = IC_Val1;
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000b22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b24:	8013      	strh	r3, [r2, #0]
 8000b26:	e006      	b.n	8000b36 <HAL_TIM_IC_CaptureCallback+0x4e>
		else
			last_period = IC_Val1 - rise_time;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_TIM_IC_CaptureCallback+0x74>)
 8000b34:	801a      	strh	r2, [r3, #0]

		diff = IC_Val1 - last_capture;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b29a      	uxth	r2, r3
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000b42:	801a      	strh	r2, [r3, #0]
		last_capture = IC_Val1;
 8000b44:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b48:	8013      	strh	r3, [r2, #0]
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	; 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40012c00 	.word	0x40012c00
 8000b58:	20000110 	.word	0x20000110
 8000b5c:	20000112 	.word	0x20000112
 8000b60:	2000010c 	.word	0x2000010c
 8000b64:	2000010e 	.word	0x2000010e

08000b68 <toggleLEDs>:

	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
	*led_output_registers = 0x5555;
}

void toggleLEDs(uint8_t bitmap) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	*(((uint8_t*)&(GPIOE->ODR)) + 1) = (*(((uint8_t*)&(GPIOE->ODR)) + 1)) ^ bitmap;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <toggleLEDs+0x24>)
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	4905      	ldr	r1, [pc, #20]	; (8000b8c <toggleLEDs+0x24>)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4053      	eors	r3, r2
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	700b      	strb	r3, [r1, #0]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	48001015 	.word	0x48001015

08000b90 <toggle>:

void toggle(void){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	toggleLEDs(0b11111111);
 8000b94:	20ff      	movs	r0, #255	; 0xff
 8000b96:	f7ff ffe7 	bl	8000b68 <toggleLEDs>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <enable_clocks>:

void enable_clocks()
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <enable_clocks+0x1c>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <enable_clocks+0x1c>)
 8000baa:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000bae:	6153      	str	r3, [r2, #20]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <green_routine>:

void green_routine()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	// set display to be green
	// wait proportional to pot value
	//HAL_Delay(1000);
	// set oneshot timer to end sweep
	//uint32_t readValue = Potentiometer_Read();
	toggle();
 8000bc4:	f7ff ffe4 	bl	8000b90 <toggle>
	setLaptopGreen();
 8000bc8:	f7ff fb82 	bl	80002d0 <setLaptopGreen>
	setDelay(&DelayTIM4, 1000, &red_routine);
 8000bcc:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <green_routine+0x20>)
 8000bce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd2:	4804      	ldr	r0, [pc, #16]	; (8000be4 <green_routine+0x24>)
 8000bd4:	f001 f8f0 	bl	8001db8 <setDelay>
	set_green();
 8000bd8:	f000 ff40 	bl	8001a5c <set_green>
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	08000be9 	.word	0x08000be9
 8000be4:	20000068 	.word	0x20000068

08000be8 <red_routine>:

void red_routine()
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
	set_red();
 8000bee:	f000 ff41 	bl	8001a74 <set_red>
	setLaptopRed();
 8000bf2:	f7ff fb7f 	bl	80002f4 <setLaptopRed>
	// get pot value
	// set display to be green
	// wait proportional to pot value
	//HAL_Delay(1000);
	// set oneshot timer to end sweep
	uint32_t readValue = Potentiometer_Read();
 8000bf6:	f000 fc03 	bl	8001400 <Potentiometer_Read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	607b      	str	r3, [r7, #4]
	setDelay(&DelayTIM4, 1000, &green_routine);
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <red_routine+0x30>)
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <red_routine+0x34>)
 8000c06:	f001 f8d7 	bl	8001db8 <setDelay>
	toggle();
 8000c0a:	f7ff ffc1 	bl	8000b90 <toggle>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	08000bc1 	.word	0x08000bc1
 8000c1c:	20000068 	.word	0x20000068

08000c20 <finished_routine>:

void finished_routine() {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	set_finished();
 8000c24:	f000 ff3e 	bl	8001aa4 <set_finished>
	return;
 8000c28:	bf00      	nop
}
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <setup_routine>:



void setup_routine()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af02      	add	r7, sp, #8
	set_setup();
 8000c32:	f000 ff07 	bl	8001a44 <set_setup>
	setup_sweeper(&hi2c1, &hspi1, &htim1, &htim2, &hpcd_USB_FS);
 8000c36:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <setup_routine+0x40>)
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <setup_routine+0x44>)
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <setup_routine+0x48>)
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <setup_routine+0x4c>)
 8000c40:	480e      	ldr	r0, [pc, #56]	; (8000c7c <setup_routine+0x50>)
 8000c42:	f7ff fe3f 	bl	80008c4 <setup_sweeper>
	timerInitialise(&DelayTIM4);
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <setup_routine+0x54>)
 8000c48:	f001 f815 	bl	8001c76 <timerInitialise>
	HAL_TIM_Base_Start(&htim3);
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <setup_routine+0x58>)
 8000c4e:	f005 f8bf 	bl	8005dd0 <HAL_TIM_Base_Start>
	laptopInterfaceInitialise(&finished_routine);
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <setup_routine+0x5c>)
 8000c54:	f7ff fb24 	bl	80002a0 <laptopInterfaceInitialise>
	enable_interrupt();
 8000c58:	f7ff fd88 	bl	800076c <enable_interrupt>
	enable_clocks();
 8000c5c:	f7ff ffa0 	bl	8000ba0 <enable_clocks>
	initButtonHandler(&green_routine);
 8000c60:	480a      	ldr	r0, [pc, #40]	; (8000c8c <setup_routine+0x60>)
 8000c62:	f7ff fdaf 	bl	80007c4 <initButtonHandler>
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000358 	.word	0x20000358
 8000c70:	200002c0 	.word	0x200002c0
 8000c74:	20000274 	.word	0x20000274
 8000c78:	20000210 	.word	0x20000210
 8000c7c:	200001bc 	.word	0x200001bc
 8000c80:	20000068 	.word	0x20000068
 8000c84:	2000030c 	.word	0x2000030c
 8000c88:	08000c21 	.word	0x08000c21
 8000c8c:	08000bc1 	.word	0x08000bc1

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c94:	f001 f8ce 	bl	8001e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c98:	f000 f83e 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9c:	f000 fb2c 	bl	80012f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ca0:	f000 fb0c 	bl	80012bc <MX_DMA_Init>
  MX_I2C1_Init();
 8000ca4:	f000 f940 	bl	8000f28 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ca8:	f000 f97e 	bl	8000fa8 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000cac:	f000 fae4 	bl	8001278 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8000cb0:	f000 fa2e 	bl	8001110 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000cb4:	f000 f9b6 	bl	8001024 <MX_TIM1_Init>
  MX_DAC_Init();
 8000cb8:	f000 f904 	bl	8000ec4 <MX_DAC_Init>
  MX_TIM3_Init();
 8000cbc:	f000 fa8e 	bl	80011dc <MX_TIM3_Init>
  MX_ADC1_Init();
 8000cc0:	f000 f890 	bl	8000de4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8000cc4:	4812      	ldr	r0, [pc, #72]	; (8000d10 <main+0x80>)
 8000cc6:	f001 fb1f 	bl	8002308 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */




	setup_routine();
 8000cca:	f7ff ffaf 	bl	8000c2c <setup_routine>
	//toggleBuzzer(hdac);
	while (1) {


		switch(get_status()) {
 8000cce:	f000 fead 	bl	8001a2c <get_status>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d8fa      	bhi.n	8000cce <main+0x3e>
 8000cd8:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <main+0x50>)
 8000cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cde:	bf00      	nop
 8000ce0:	08000ccf 	.word	0x08000ccf
 8000ce4:	08000ccf 	.word	0x08000ccf
 8000ce8:	08000cfd 	.word	0x08000cfd
 8000cec:	08000d03 	.word	0x08000d03
 8000cf0:	08000cf5 	.word	0x08000cf5
			case FINISHED:
				stopTimer(&DelayTIM4);
 8000cf4:	4807      	ldr	r0, [pc, #28]	; (8000d14 <main+0x84>)
 8000cf6:	f001 f849 	bl	8001d8c <stopTimer>
				break;
 8000cfa:	e007      	b.n	8000d0c <main+0x7c>
			case SETUP:
				break;
			case RED:
				sweep_routine();
 8000cfc:	f7ff fece 	bl	8000a9c <sweep_routine>
				break;
 8000d00:	e004      	b.n	8000d0c <main+0x7c>
			case DETECTED:
				HAL_Delay(1);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f001 f8fc 	bl	8001f00 <HAL_Delay>
				break;
 8000d08:	bf00      	nop
 8000d0a:	e7e0      	b.n	8000cce <main+0x3e>
		switch(get_status()) {
 8000d0c:	e7df      	b.n	8000cce <main+0x3e>
 8000d0e:	bf00      	nop
 8000d10:	20000114 	.word	0x20000114
 8000d14:	20000068 	.word	0x20000068

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09e      	sub	sp, #120	; 0x78
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d22:	2228      	movs	r2, #40	; 0x28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f006 fea8 	bl	8007a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	223c      	movs	r2, #60	; 0x3c
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f006 fe9a 	bl	8007a7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d66:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d6c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 fb56 	bl	8004424 <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d7e:	f000 fb39 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2302      	movs	r3, #2
 8000d88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f004 fb7e 	bl	80054a0 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000daa:	f000 fb23 	bl	80013f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <SystemClock_Config+0xc8>)
 8000db0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000dbc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f004 fd4f 	bl	800586c <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000dd4:	f000 fb0e 	bl	80013f4 <Error_Handler>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3778      	adds	r7, #120	; 0x78
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	000210a0 	.word	0x000210a0

08000de4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e0e:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e14:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e46:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e50:	2204      	movs	r2, #4
 8000e52:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e60:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e62:	f001 f871 	bl	8001f48 <HAL_ADC_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 fac2 	bl	80013f4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000e7c:	f001 ff54 	bl	8002d28 <HAL_ADCEx_MultiModeConfigChannel>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e86:	f000 fab5 	bl	80013f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e8a:	2309      	movs	r3, #9
 8000e8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000e92:	2301      	movs	r3, #1
 8000e94:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <MX_ADC1_Init+0xdc>)
 8000ea8:	f001 fc54 	bl	8002754 <HAL_ADC_ConfigChannel>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000eb2:	f000 fa9f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000114 	.word	0x20000114

08000ec4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_DAC_Init+0x58>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <MX_DAC_Init+0x5c>)
 8000ed8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000eda:	4810      	ldr	r0, [pc, #64]	; (8000f1c <MX_DAC_Init+0x58>)
 8000edc:	f002 f9f1 	bl	80032c2 <HAL_DAC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000ee6:	f000 fa85 	bl	80013f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T3_TRGO;
 8000eea:	230c      	movs	r3, #12
 8000eec:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4808      	ldr	r0, [pc, #32]	; (8000f1c <MX_DAC_Init+0x58>)
 8000efa:	f002 fa04 	bl	8003306 <HAL_DAC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000f04:	f000 fa76 	bl	80013f4 <Error_Handler>
  }
  __HAL_REMAPTRIGGER_ENABLE(HAL_REMAPTRIGGER_DAC1_TRIG);
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_DAC_Init+0x60>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <MX_DAC_Init+0x60>)
 8000f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000164 	.word	0x20000164
 8000f20:	40007400 	.word	0x40007400
 8000f24:	40010000 	.word	0x40010000

08000f28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <MX_I2C1_Init+0x78>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f34:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <MX_I2C1_Init+0x7c>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f62:	480e      	ldr	r0, [pc, #56]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f64:	f002 fcec 	bl	8003940 <HAL_I2C_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f6e:	f000 fa41 	bl	80013f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4809      	ldr	r0, [pc, #36]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f76:	f003 f8eb 	bl	8004150 <HAL_I2CEx_ConfigAnalogFilter>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f80:	f000 fa38 	bl	80013f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f84:	2100      	movs	r1, #0
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_I2C1_Init+0x74>)
 8000f88:	f003 f92d 	bl	80041e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f92:	f000 fa2f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001bc 	.word	0x200001bc
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	2000090e 	.word	0x2000090e

08000fa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_SPI1_Init+0x74>)
 8000fae:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <MX_SPI1_Init+0x78>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_SPI1_Init+0x74>)
 8000fb4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fb8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fc0:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_SPI1_Init+0x74>)
 8000fc2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000fc6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_SPI1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_SPI1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_SPI1_Init+0x74>)
 8000fd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fda:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SPI1_Init+0x74>)
 8000fde:	2208      	movs	r2, #8
 8000fe0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_SPI1_Init+0x74>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SPI1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_SPI1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SPI1_Init+0x74>)
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_SPI1_Init+0x74>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_SPI1_Init+0x74>)
 8001002:	2208      	movs	r2, #8
 8001004:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_SPI1_Init+0x74>)
 8001008:	f004 fde0 	bl	8005bcc <HAL_SPI_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 f9ef 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000210 	.word	0x20000210
 8001020:	40013000 	.word	0x40013000

08001024 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102a:	f107 0320 	add.w	r3, r7, #32
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <MX_TIM1_Init+0xe4>)
 8001052:	4a2e      	ldr	r2, [pc, #184]	; (800110c <MX_TIM1_Init+0xe8>)
 8001054:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47;
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <MX_TIM1_Init+0xe4>)
 8001058:	222f      	movs	r2, #47	; 0x2f
 800105a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <MX_TIM1_Init+0xe4>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001062:	4b29      	ldr	r3, [pc, #164]	; (8001108 <MX_TIM1_Init+0xe4>)
 8001064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001068:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <MX_TIM1_Init+0xe4>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <MX_TIM1_Init+0xe4>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_TIM1_Init+0xe4>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800107c:	4822      	ldr	r0, [pc, #136]	; (8001108 <MX_TIM1_Init+0xe4>)
 800107e:	f004 fe50 	bl	8005d22 <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001088:	f000 f9b4 	bl	80013f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800108c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001090:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	4619      	mov	r1, r3
 8001098:	481b      	ldr	r0, [pc, #108]	; (8001108 <MX_TIM1_Init+0xe4>)
 800109a:	f005 fcc7 	bl	8006a2c <HAL_TIM_ConfigClockSource>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80010a4:	f000 f9a6 	bl	80013f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <MX_TIM1_Init+0xe4>)
 80010aa:	f005 f84b 	bl	8006144 <HAL_TIM_IC_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80010b4:	f000 f99e 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480f      	ldr	r0, [pc, #60]	; (8001108 <MX_TIM1_Init+0xe4>)
 80010cc:	f006 fb28 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 80010d6:	f000 f98d 	bl	80013f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010da:	230a      	movs	r3, #10
 80010dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010de:	2301      	movs	r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_TIM1_Init+0xe4>)
 80010f2:	f005 faea 	bl	80066ca <HAL_TIM_IC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80010fc:	f000 f97a 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3730      	adds	r7, #48	; 0x30
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000274 	.word	0x20000274
 800110c:	40012c00 	.word	0x40012c00

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <MX_TIM2_Init+0xc8>)
 8001136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800113a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 800113c:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <MX_TIM2_Init+0xc8>)
 800113e:	222f      	movs	r2, #47	; 0x2f
 8001140:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <MX_TIM2_Init+0xc8>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <MX_TIM2_Init+0xc8>)
 800114a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800114e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_TIM2_Init+0xc8>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <MX_TIM2_Init+0xc8>)
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800115c:	481e      	ldr	r0, [pc, #120]	; (80011d8 <MX_TIM2_Init+0xc8>)
 800115e:	f004 fe99 	bl	8005e94 <HAL_TIM_PWM_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001168:	f000 f944 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4817      	ldr	r0, [pc, #92]	; (80011d8 <MX_TIM2_Init+0xc8>)
 800117c:	f006 fad0 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001186:	f000 f935 	bl	80013f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118a:	2360      	movs	r3, #96	; 0x60
 800118c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 800118e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001192:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_TIM2_Init+0xc8>)
 80011a4:	f005 fb2e 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80011ae:	f000 f921 	bl	80013f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	2204      	movs	r2, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4807      	ldr	r0, [pc, #28]	; (80011d8 <MX_TIM2_Init+0xc8>)
 80011ba:	f005 fb23 	bl	8006804 <HAL_TIM_PWM_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80011c4:	f000 f916 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011c8:	4803      	ldr	r0, [pc, #12]	; (80011d8 <MX_TIM2_Init+0xc8>)
 80011ca:	f000 fb6d 	bl	80018a8 <HAL_TIM_MspPostInit>

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002c0 	.word	0x200002c0

080011dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_TIM3_Init+0x94>)
 80011fc:	4a1d      	ldr	r2, [pc, #116]	; (8001274 <MX_TIM3_Init+0x98>)
 80011fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_TIM3_Init+0x94>)
 8001202:	222f      	movs	r2, #47	; 0x2f
 8001204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_TIM3_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_TIM3_Init+0x94>)
 800120e:	2209      	movs	r2, #9
 8001210:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_TIM3_Init+0x94>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_TIM3_Init+0x94>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <MX_TIM3_Init+0x94>)
 8001220:	f004 fd7f 	bl	8005d22 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800122a:	f000 f8e3 	bl	80013f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <MX_TIM3_Init+0x94>)
 800123c:	f005 fbf6 	bl	8006a2c <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001246:	f000 f8d5 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800124a:	2320      	movs	r3, #32
 800124c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_TIM3_Init+0x94>)
 8001258:	f006 fa62 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001262:	f000 f8c7 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000030c 	.word	0x2000030c
 8001274:	40000400 	.word	0x40000400

08001278 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800127c:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <MX_USB_PCD_Init+0x3c>)
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <MX_USB_PCD_Init+0x40>)
 8001280:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_USB_PCD_Init+0x3c>)
 8001284:	2208      	movs	r2, #8
 8001286:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_USB_PCD_Init+0x3c>)
 800128a:	2202      	movs	r2, #2
 800128c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_USB_PCD_Init+0x3c>)
 8001290:	2202      	movs	r2, #2
 8001292:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_USB_PCD_Init+0x3c>)
 8001296:	2200      	movs	r2, #0
 8001298:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_USB_PCD_Init+0x3c>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_USB_PCD_Init+0x3c>)
 80012a2:	f002 ffec 	bl	800427e <HAL_PCD_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80012ac:	f000 f8a2 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000358 	.word	0x20000358
 80012b8:	40005c00 	.word	0x40005c00

080012bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_DMA_Init+0x38>)
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <MX_DMA_Init+0x38>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6153      	str	r3, [r2, #20]
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_DMA_Init+0x38>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	200d      	movs	r0, #13
 80012e0:	f001 ffb9 	bl	8003256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012e4:	200d      	movs	r0, #13
 80012e6:	f001 ffd2 	bl	800328e <HAL_NVIC_EnableIRQ>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40021000 	.word	0x40021000

080012f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a36      	ldr	r2, [pc, #216]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001318:	6153      	str	r3, [r2, #20]
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <MX_GPIO_Init+0xf4>)
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b31      	ldr	r3, [pc, #196]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	4a30      	ldr	r2, [pc, #192]	; (80013ec <MX_GPIO_Init+0xf4>)
 800132c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001330:	6153      	str	r3, [r2, #20]
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800133e:	4b2b      	ldr	r3, [pc, #172]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	4a2a      	ldr	r2, [pc, #168]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001348:	6153      	str	r3, [r2, #20]
 800134a:	4b28      	ldr	r3, [pc, #160]	; (80013ec <MX_GPIO_Init+0xf4>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	4a24      	ldr	r2, [pc, #144]	; (80013ec <MX_GPIO_Init+0xf4>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6153      	str	r3, [r2, #20]
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <MX_GPIO_Init+0xf4>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	6153      	str	r3, [r2, #20]
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_GPIO_Init+0xf4>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001386:	2200      	movs	r2, #0
 8001388:	f64f 7108 	movw	r1, #65288	; 0xff08
 800138c:	4818      	ldr	r0, [pc, #96]	; (80013f0 <MX_GPIO_Init+0xf8>)
 800138e:	f002 fabf 	bl	8003910 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001392:	2337      	movs	r3, #55	; 0x37
 8001394:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001396:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4812      	ldr	r0, [pc, #72]	; (80013f0 <MX_GPIO_Init+0xf8>)
 80013a8:	f002 f920 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80013ac:	f64f 7308 	movw	r3, #65288	; 0xff08
 80013b0:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <MX_GPIO_Init+0xf8>)
 80013c6:	f002 f911 	bl	80035ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f002 f904 	bl	80035ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013e4:	bf00      	nop
 80013e6:	3728      	adds	r7, #40	; 0x28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	48001000 	.word	0x48001000

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <Potentiometer_Read>:
//void Potentiometer_Init(void) {
//    HAL_ADC_Start(&hadc1);
//}

// Reads the ADC value for the potentiometer
uint32_t Potentiometer_Read(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    // Wait for ADC conversion to complete
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8001404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <Potentiometer_Read+0x1c>)
 800140a:	f001 f893 	bl	8002534 <HAL_ADC_PollForConversion>
    // Return the converted value
    return HAL_ADC_GetValue(&hadc1);
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <Potentiometer_Read+0x1c>)
 8001410:	f001 f992 	bl	8002738 <HAL_ADC_GetValue>
 8001414:	4603      	mov	r3, r0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000114 	.word	0x20000114

08001420 <initialise_ptu_i2c>:

#include "ptu_definitions.h"

ACCELEROMETER_CFG_STRUCT accelerometer_cfg = {ADXL345_POWER_CTL, 0x08, ADXL345_DATA_FORMAT, 0x08};

void initialise_ptu_i2c(I2C_HandleTypeDef *i2c) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af04      	add	r7, sp, #16
 8001426:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef return_value = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_1 = 0b00001111;
 800142c:	230f      	movs	r3, #15
 800142e:	73bb      	strb	r3, [r7, #14]
	// Enable x, y, z and turn off power down:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG1, 1, &reg_1, 1, 10);
 8001430:	230a      	movs	r3, #10
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2301      	movs	r3, #1
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	f107 030e 	add.w	r3, r7, #14
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2301      	movs	r3, #1
 8001440:	2220      	movs	r2, #32
 8001442:	21d2      	movs	r1, #210	; 0xd2
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f002 fb0b 	bl	8003a60 <HAL_I2C_Mem_Write>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]

	uint8_t reg_2 = 0b00000000;
 800144e:	2300      	movs	r3, #0
 8001450:	737b      	strb	r3, [r7, #13]
	// If you'd like to adjust/use the HPF, you can edit the line below to configure CTRL_REG2:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG2, 1, &reg_2, 1, 10);
 8001452:	230a      	movs	r3, #10
 8001454:	9302      	str	r3, [sp, #8]
 8001456:	2301      	movs	r3, #1
 8001458:	9301      	str	r3, [sp, #4]
 800145a:	f107 030d 	add.w	r3, r7, #13
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	2221      	movs	r2, #33	; 0x21
 8001464:	21d2      	movs	r1, #210	; 0xd2
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f002 fafa 	bl	8003a60 <HAL_I2C_Mem_Write>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]

	// Configure CTRL_REG3 to generate data ready interrupt on INT2
	// No interrupts used on INT1, if you'd like to configure INT1
	// or INT2 otherwise, consult the datasheet:
	return_value = HAL_I2C_Mem_Write(i2c, gyro_wr, L3G4200D_CTRL_REG3, 1, &reg_2, 1, 10);
 8001470:	230a      	movs	r3, #10
 8001472:	9302      	str	r3, [sp, #8]
 8001474:	2301      	movs	r3, #1
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	f107 030d 	add.w	r3, r7, #13
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2301      	movs	r3, #1
 8001480:	2222      	movs	r2, #34	; 0x22
 8001482:	21d2      	movs	r1, #210	; 0xd2
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f002 faeb 	bl	8003a60 <HAL_I2C_Mem_Write>
 800148a:	4603      	mov	r3, r0
 800148c:	73fb      	strb	r3, [r7, #15]
	// CTRL_REG5 controls high-pass filtering of outputs, use it
	// if you'd like:
	//HAL_I2C_Mem_Write(&hi2c1, gyro_wr, L3G4200D_CTRL_REG5, 1, &reg_2, 10);

	// reset lidar board
	uint8_t reset_value = 0x00;
 800148e:	2300      	movs	r3, #0
 8001490:	733b      	strb	r3, [r7, #12]
	return_value = HAL_I2C_Mem_Write(i2c, LIDAR_WR, 0x00, 1, &reset_value, 1, 10);
 8001492:	230a      	movs	r3, #10
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	2301      	movs	r3, #1
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	2200      	movs	r2, #0
 80014a4:	21c4      	movs	r1, #196	; 0xc4
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f002 fada 	bl	8003a60 <HAL_I2C_Mem_Write>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
}
 80014b0:	bf00      	nop
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_MspInit+0x44>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_MspInit+0x44>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_MspInit+0x44>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_MspInit+0x44>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a08      	ldr	r2, [pc, #32]	; (80014fc <HAL_MspInit+0x44>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_MspInit+0x44>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ee:	2007      	movs	r0, #7
 80014f0:	f001 fea6 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001520:	d13b      	bne.n	800159a <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001522:	4b20      	ldr	r3, [pc, #128]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	6153      	str	r3, [r2, #20]
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a19      	ldr	r2, [pc, #100]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001544:	6153      	str	r3, [r2, #20]
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001558:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800155c:	6153      	str	r3, [r2, #20]
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_ADC_MspInit+0xa4>)
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    PF2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800156a:	2308      	movs	r3, #8
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156e:	2303      	movs	r3, #3
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <HAL_ADC_MspInit+0xa8>)
 800157e:	f002 f835 	bl	80035ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001582:	2304      	movs	r3, #4
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001586:	2303      	movs	r3, #3
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <HAL_ADC_MspInit+0xac>)
 8001596:	f002 f829 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159a:	bf00      	nop
 800159c:	3728      	adds	r7, #40	; 0x28
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48001400 	.word	0x48001400

080015b0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a2c      	ldr	r2, [pc, #176]	; (8001680 <HAL_DAC_MspInit+0xd0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d152      	bne.n	8001678 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <HAL_DAC_MspInit+0xd4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4a2b      	ldr	r2, [pc, #172]	; (8001684 <HAL_DAC_MspInit+0xd4>)
 80015d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015dc:	61d3      	str	r3, [r2, #28]
 80015de:	4b29      	ldr	r3, [pc, #164]	; (8001684 <HAL_DAC_MspInit+0xd4>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015e6:	613b      	str	r3, [r7, #16]
 80015e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_DAC_MspInit+0xd4>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <HAL_DAC_MspInit+0xd4>)
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	6153      	str	r3, [r2, #20]
 80015f6:	4b23      	ldr	r3, [pc, #140]	; (8001684 <HAL_DAC_MspInit+0xd4>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001602:	2310      	movs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001606:	2303      	movs	r3, #3
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001618:	f001 ffe8 	bl	80035ec <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_DAC_MspInit+0xdc>)
 8001620:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 8001624:	2210      	movs	r2, #16
 8001626:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 8001636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800163a:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 800163e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001642:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8001644:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 8001646:	2220      	movs	r2, #32
 8001648:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 8001652:	f001 fea5 	bl	80033a0 <HAL_DMA_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 800165c:	f7ff feca 	bl	80013f4 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_DAC_MspInit+0xe0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_DAC_MspInit+0xe0>)
 8001666:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800166a:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a06      	ldr	r2, [pc, #24]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_DAC_MspInit+0xd8>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40007400 	.word	0x40007400
 8001684:	40021000 	.word	0x40021000
 8001688:	20000178 	.word	0x20000178
 800168c:	40020030 	.word	0x40020030
 8001690:	40010000 	.word	0x40010000

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_I2C_MspInit+0x7c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d127      	bne.n	8001706 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_I2C_MspInit+0x80>)
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	4a16      	ldr	r2, [pc, #88]	; (8001714 <HAL_I2C_MspInit+0x80>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6153      	str	r3, [r2, #20]
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_I2C_MspInit+0x80>)
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80016ce:	23c0      	movs	r3, #192	; 0xc0
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d2:	2312      	movs	r3, #18
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016de:	2304      	movs	r3, #4
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	480b      	ldr	r0, [pc, #44]	; (8001718 <HAL_I2C_MspInit+0x84>)
 80016ea:	f001 ff7f 	bl	80035ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_I2C_MspInit+0x80>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_I2C_MspInit+0x80>)
 80016f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_I2C_MspInit+0x80>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40005400 	.word	0x40005400
 8001714:	40021000 	.word	0x40021000
 8001718:	48000400 	.word	0x48000400

0800171c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_SPI_MspInit+0x7c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d128      	bne.n	8001790 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_SPI_MspInit+0x80>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_SPI_MspInit+0x80>)
 8001744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001748:	6193      	str	r3, [r2, #24]
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_SPI_MspInit+0x80>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_SPI_MspInit+0x80>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_SPI_MspInit+0x80>)
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	6153      	str	r3, [r2, #20]
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_SPI_MspInit+0x80>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800176e:	23e0      	movs	r3, #224	; 0xe0
 8001770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800177e:	2305      	movs	r3, #5
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178c:	f001 ff2e 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40013000 	.word	0x40013000
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	; 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_TIM_Base_MspInit+0xb4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d132      	bne.n	8001828 <HAL_TIM_Base_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	4a24      	ldr	r2, [pc, #144]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 80017c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017cc:	6193      	str	r3, [r2, #24]
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6153      	str	r3, [r2, #20]
 80017e6:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001804:	2306      	movs	r3, #6
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f001 feeb 	bl	80035ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	201b      	movs	r0, #27
 800181c:	f001 fd1b 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001820:	201b      	movs	r0, #27
 8001822:	f001 fd34 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001826:	e010      	b.n	800184a <HAL_TIM_Base_MspInit+0xaa>
  else if(htim_base->Instance==TIM3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_TIM_Base_MspInit+0xbc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d10b      	bne.n	800184a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_TIM_Base_MspInit+0xb8>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40012c00 	.word	0x40012c00
 8001858:	40021000 	.word	0x40021000
 800185c:	40000400 	.word	0x40000400

08001860 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001870:	d113      	bne.n	800189a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001872:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_TIM_PWM_MspInit+0x44>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_TIM_PWM_MspInit+0x44>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_TIM_PWM_MspInit+0x44>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	201c      	movs	r0, #28
 8001890:	f001 fce1 	bl	8003256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001894:	201c      	movs	r0, #28
 8001896:	f001 fcfa 	bl	800328e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c8:	d11d      	bne.n	8001906 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_TIM_MspPostInit+0x68>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a10      	ldr	r2, [pc, #64]	; (8001910 <HAL_TIM_MspPostInit+0x68>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	6153      	str	r3, [r2, #20]
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <HAL_TIM_MspPostInit+0x68>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80018e2:	f248 0302 	movw	r3, #32770	; 0x8002
 80018e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018f4:	2301      	movs	r3, #1
 80018f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001902:	f001 fe73 	bl	80035ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001906:	bf00      	nop
 8001908:	3720      	adds	r7, #32
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	; 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a18      	ldr	r2, [pc, #96]	; (8001994 <HAL_PCD_MspInit+0x80>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d129      	bne.n	800198a <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b18      	ldr	r3, [pc, #96]	; (8001998 <HAL_PCD_MspInit+0x84>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_PCD_MspInit+0x84>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	6153      	str	r3, [r2, #20]
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <HAL_PCD_MspInit+0x84>)
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800194e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001960:	230e      	movs	r3, #14
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f001 fe3d 	bl	80035ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_PCD_MspInit+0x84>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a08      	ldr	r2, [pc, #32]	; (8001998 <HAL_PCD_MspInit+0x84>)
 8001978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_PCD_MspInit+0x84>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40005c00 	.word	0x40005c00
 8001998:	40021000 	.word	0x40021000

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <NMI_Handler+0x4>

080019a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <MemManage_Handler+0x4>

080019ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler+0x4>

080019ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e8:	f000 fa6a 	bl	8001ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <DMA1_Channel3_IRQHandler+0x10>)
 80019f6:	f001 fd1a 	bl	800342e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000178 	.word	0x20000178

08001a04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TIM1_CC_IRQHandler+0x10>)
 8001a0a:	f004 fd3f 	bl	800648c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000274 	.word	0x20000274

08001a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <TIM2_IRQHandler+0x10>)
 8001a1e:	f004 fd35 	bl	800648c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200002c0 	.word	0x200002c0

08001a2c <get_status>:
#include "sweep_flag.h"

enum ProgrammeStatus status = SETUP;

enum ProgrammeStatus get_status()
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

	return status;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <get_status+0x14>)
 8001a32:	781b      	ldrb	r3, [r3, #0]

}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000644 	.word	0x20000644

08001a44 <set_setup>:

void set_setup()
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	status = SETUP;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <set_setup+0x14>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
	return;
 8001a4e:	bf00      	nop
}
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000644 	.word	0x20000644

08001a5c <set_green>:

void set_green()
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	status = GREEN;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <set_green+0x14>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
	return;
 8001a66:	bf00      	nop
}
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	20000644 	.word	0x20000644

08001a74 <set_red>:

void set_red()
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	status = RED;
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <set_red+0x14>)
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	701a      	strb	r2, [r3, #0]
	return;
 8001a7e:	bf00      	nop
}
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	20000644 	.word	0x20000644

08001a8c <set_detected>:

void set_detected()
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
	status = DETECTED;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <set_detected+0x14>)
 8001a92:	2203      	movs	r2, #3
 8001a94:	701a      	strb	r2, [r3, #0]
	return;
 8001a96:	bf00      	nop
}
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	20000644 	.word	0x20000644

08001aa4 <set_finished>:

void set_finished()
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
	status = FINISHED;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <set_finished+0x14>)
 8001aaa:	2204      	movs	r2, #4
 8001aac:	701a      	strb	r2, [r3, #0]
	return;
 8001aae:	bf00      	nop
}
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20000644 	.word	0x20000644

08001abc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <_sbrk+0x5c>)
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <_sbrk+0x60>)
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <_sbrk+0x64>)
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <_sbrk+0x68>)
 8001adc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d207      	bcs.n	8001afc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aec:	f005 fff0 	bl	8007ad0 <__errno>
 8001af0:	4603      	mov	r3, r0
 8001af2:	220c      	movs	r2, #12
 8001af4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
 8001afa:	e009      	b.n	8001b10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <_sbrk+0x64>)
 8001b0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000a000 	.word	0x2000a000
 8001b1c:	00000400 	.word	0x00000400
 8001b20:	20000648 	.word	0x20000648
 8001b24:	20000798 	.word	0x20000798

08001b28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <TIM3_IRQHandler>:
		.is_loop = NULL,
		.enabled = false
	};


void TIM3_IRQHandler() {if (DelayTIM3.enabled) {timerHandler(&DelayTIM3);}}
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <TIM3_IRQHandler+0x18>)
 8001be2:	7d5b      	ldrb	r3, [r3, #21]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <TIM3_IRQHandler+0x12>
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM3_IRQHandler+0x18>)
 8001bea:	f000 f813 	bl	8001c14 <timerHandler>
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000050 	.word	0x20000050

08001bf8 <TIM4_IRQHandler>:
		.is_loop = NULL,
		.enabled = false
	};


void TIM4_IRQHandler() {if (DelayTIM4.enabled) {timerHandler(&DelayTIM4);}}
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <TIM4_IRQHandler+0x18>)
 8001bfe:	7d5b      	ldrb	r3, [r3, #21]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d002      	beq.n	8001c0a <TIM4_IRQHandler+0x12>
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <TIM4_IRQHandler+0x18>)
 8001c06:	f000 f805 	bl	8001c14 <timerHandler>
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000068 	.word	0x20000068

08001c14 <timerHandler>:
		.callback_ptr = NULL,
		.is_loop = NULL,
		.enabled = false
	};

void timerHandler(DelayTIM *delay_timer) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    delay_timer->TIM->SR &= ~TIM_SR_UIF;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	611a      	str	r2, [r3, #16]
	if (delay_timer->callback_ptr == NULL) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d103      	bne.n	8001c3c <timerHandler+0x28>
		stopTimer(delay_timer);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8a9 	bl	8001d8c <stopTimer>
		return;
 8001c3a:	e019      	b.n	8001c70 <timerHandler+0x5c>
	}
	if (delay_timer->is_loop) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7d1b      	ldrb	r3, [r3, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <timerHandler+0x38>
		delay_timer->callback_ptr();
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	4798      	blx	r3
		return;
 8001c4a:	e011      	b.n	8001c70 <timerHandler+0x5c>
	}
	if (!delay_timer->is_loop){
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7d1b      	ldrb	r3, [r3, #20]
 8001c50:	f083 0301 	eor.w	r3, r3, #1
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <timerHandler+0x5c>
		uint32_t num = delay_timer->TIM->CNT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	60fb      	str	r3, [r7, #12]
		stopTimer(delay_timer);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f892 	bl	8001d8c <stopTimer>
		delay_timer->callback_ptr();
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	4798      	blx	r3
		return;
 8001c6e:	bf00      	nop
	}
}
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <timerInitialise>:

void timerInitialise(DelayTIM *delay_timer)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	// Enable appropriate functions
	enableTimer(delay_timer);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f808 	bl	8001c94 <enableTimer>
	enableInterrupts(delay_timer);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f840 	bl	8001d0a <enableInterrupts>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <enableTimer>:

void enableTimer(DelayTIM *delay_timer)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	// Enable the clock for timer
	RCC->APB1ENR |= delay_timer->MaskAPB1ENR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <enableTimer+0x44>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <enableTimer+0x44>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61cb      	str	r3, [r1, #28]
	delay_timer->TIM->PSC = 47999;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
	delay_timer->TIM->CR1 |= TIM_CR1_CEN;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
	triggerPrescaler(delay_timer);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f809 	bl	8001cdc <triggerPrescaler>
	delay_timer->enabled = true;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	755a      	strb	r2, [r3, #21]
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40021000 	.word	0x40021000

08001cdc <triggerPrescaler>:

// Pre-scaler updates only upon "events" so this triggers an overflow
void triggerPrescaler(DelayTIM *delay_timer)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
	delay_timer->TIM->ARR = 0x01;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c
	delay_timer->TIM->CNT = 0x00;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	; 0x24
	delay_timer->TIM->ARR = 0xFFFFFFFF;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <enableInterrupts>:

void enableInterrupts(DelayTIM *delay_timer)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d12:	b672      	cpsid	i
}
 8001d14:	bf00      	nop
	__disable_irq();

    // Enable the update interrupt
    delay_timer->TIM->DIER |= TIM_DIER_UIE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0201 	orr.w	r2, r2, #1
 8001d24:	60da      	str	r2, [r3, #12]

	// Set priority and enable interrupts
	NVIC_SetPriority(delay_timer->TIM_IRQn, 100);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	2164      	movs	r1, #100	; 0x64
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff ff2a 	bl	8001b88 <__NVIC_SetPriority>
	NVIC_EnableIRQ(delay_timer->TIM_IRQn);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	b25b      	sxtb	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff06 	bl	8001b4c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d40:	b662      	cpsie	i
}
 8001d42:	bf00      	nop

	__enable_irq();
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <resetTimer>:
uint32_t get_delay(DelayTIM *delay_timer)
{
    return delay_timer->TIM->ARR;
}

void resetTimer(DelayTIM *delay_timer, uint32_t delay_ms) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
	stopTimer(delay_timer);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f818 	bl	8001d8c <stopTimer>
    delay_timer->TIM->ARR = delay_ms;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	62da      	str	r2, [r3, #44]	; 0x2c
	delay_timer->TIM->CR1 |= TIM_CR1_CEN;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
	delay_timer->TIM->SR &= ~TIM_SR_UIF;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0201 	bic.w	r2, r2, #1
 8001d82:	611a      	str	r2, [r3, #16]
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <stopTimer>:

void stopTimer(DelayTIM *delay_timer) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	delay_timer->TIM->CR1 &= ~TIM_CR1_CEN;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
	delay_timer->TIM->CNT = 0x00;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <setDelay>:
	delay_timer->callback_ptr = callback;
	delay_timer->is_loop = true;
	resetTimer(delay_timer, delay_ms);
}

void setDelay(DelayTIM *delay_timer, uint32_t delay_ms, void (*callback)(void)) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
	delay_timer->callback_ptr = callback;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]
	delay_timer->is_loop = false;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	751a      	strb	r2, [r3, #20]
	resetTimer(delay_timer, delay_ms);
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff ffba 	bl	8001d4c <resetTimer>
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de4:	f7ff fea0 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de8:	480c      	ldr	r0, [pc, #48]	; (8001e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001dea:	490d      	ldr	r1, [pc, #52]	; (8001e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <LoopForever+0xe>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e00:	4c0a      	ldr	r4, [pc, #40]	; (8001e2c <LoopForever+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f005 fe65 	bl	8007adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e12:	f7fe ff3d 	bl	8000c90 <main>

08001e16 <LoopForever>:

LoopForever:
    b LoopForever
 8001e16:	e7fe      	b.n	8001e16 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e18:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001e24:	08008344 	.word	0x08008344
  ldr r2, =_sbss
 8001e28:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001e2c:	20000798 	.word	0x20000798

08001e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_2_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_Init+0x28>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a07      	ldr	r2, [pc, #28]	; (8001e5c <HAL_Init+0x28>)
 8001e3e:	f043 0310 	orr.w	r3, r3, #16
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e44:	2003      	movs	r0, #3
 8001e46:	f001 f9fb 	bl	8003240 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f000 f808 	bl	8001e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e50:	f7ff fb32 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40022000 	.word	0x40022000

08001e60 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_InitTick+0x54>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_InitTick+0x58>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 fa13 	bl	80032aa <HAL_SYSTICK_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00e      	b.n	8001eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d80a      	bhi.n	8001eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f001 f9db 	bl	8003256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea0:	4a06      	ldr	r2, [pc, #24]	; (8001ebc <HAL_InitTick+0x5c>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e000      	b.n	8001eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2000004c 	.word	0x2000004c
 8001eb8:	20000084 	.word	0x20000084
 8001ebc:	20000080 	.word	0x20000080

08001ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_IncTick+0x20>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4413      	add	r3, r2
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <HAL_IncTick+0x24>)
 8001ed2:	6013      	str	r3, [r2, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000084 	.word	0x20000084
 8001ee4:	2000064c 	.word	0x2000064c

08001ee8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return uwTick;  
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <HAL_GetTick+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	2000064c 	.word	0x2000064c

08001f00 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f08:	f7ff ffee 	bl	8001ee8 <HAL_GetTick>
 8001f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f18:	d005      	beq.n	8001f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_Delay+0x44>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4413      	add	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001f26:	bf00      	nop
 8001f28:	f7ff ffde 	bl	8001ee8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d8f7      	bhi.n	8001f28 <HAL_Delay+0x28>
  {
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000084 	.word	0x20000084

08001f48 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b09a      	sub	sp, #104	; 0x68
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e1c9      	b.n	80022fc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f003 0310 	and.w	r3, r3, #16
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d176      	bne.n	8002068 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d152      	bne.n	8002028 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7ff faaf 	bl	8001500 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d13b      	bne.n	8002028 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f001 f80f 	bl	8002fd4 <ADC_Disable>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d12f      	bne.n	8002028 <HAL_ADC_Init+0xe0>
 8001fc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d12b      	bne.n	8002028 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd8:	f023 0302 	bic.w	r3, r3, #2
 8001fdc:	f043 0202 	orr.w	r2, r3, #2
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002002:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002004:	4b86      	ldr	r3, [pc, #536]	; (8002220 <HAL_ADC_Init+0x2d8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a86      	ldr	r2, [pc, #536]	; (8002224 <HAL_ADC_Init+0x2dc>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9a      	lsrs	r2, r3, #18
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800201a:	e002      	b.n	8002022 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	3b01      	subs	r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f9      	bne.n	800201c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d007      	beq.n	8002046 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002044:	d110      	bne.n	8002068 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f023 0312 	bic.w	r3, r3, #18
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	f040 8136 	bne.w	80022e2 <HAL_ADC_Init+0x39a>
 8002076:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8131 	bne.w	80022e2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 8129 	bne.w	80022e2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002098:	f043 0202 	orr.w	r2, r3, #2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_Init+0x16c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a5e      	ldr	r2, [pc, #376]	; (8002228 <HAL_ADC_Init+0x2e0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_Init+0x170>
 80020b4:	4b5d      	ldr	r3, [pc, #372]	; (800222c <HAL_ADC_Init+0x2e4>)
 80020b6:	e000      	b.n	80020ba <HAL_ADC_Init+0x172>
 80020b8:	4b5d      	ldr	r3, [pc, #372]	; (8002230 <HAL_ADC_Init+0x2e8>)
 80020ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020c4:	d102      	bne.n	80020cc <HAL_ADC_Init+0x184>
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <HAL_ADC_Init+0x2e0>)
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	e01a      	b.n	8002102 <HAL_ADC_Init+0x1ba>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a55      	ldr	r2, [pc, #340]	; (8002228 <HAL_ADC_Init+0x2e0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d103      	bne.n	80020de <HAL_ADC_Init+0x196>
 80020d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e011      	b.n	8002102 <HAL_ADC_Init+0x1ba>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a54      	ldr	r2, [pc, #336]	; (8002234 <HAL_ADC_Init+0x2ec>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d102      	bne.n	80020ee <HAL_ADC_Init+0x1a6>
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <HAL_ADC_Init+0x2f0>)
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e009      	b.n	8002102 <HAL_ADC_Init+0x1ba>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a51      	ldr	r2, [pc, #324]	; (8002238 <HAL_ADC_Init+0x2f0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d102      	bne.n	80020fe <HAL_ADC_Init+0x1b6>
 80020f8:	4b4e      	ldr	r3, [pc, #312]	; (8002234 <HAL_ADC_Init+0x2ec>)
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	e001      	b.n	8002102 <HAL_ADC_Init+0x1ba>
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d108      	bne.n	8002122 <HAL_ADC_Init+0x1da>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_ADC_Init+0x1da>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_ADC_Init+0x1dc>
 8002122:	2300      	movs	r3, #0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11c      	bne.n	8002162 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002128:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800212a:	2b00      	cmp	r3, #0
 800212c:	d010      	beq.n	8002150 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_ADC_Init+0x202>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_ADC_Init+0x202>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_ADC_Init+0x204>
 800214a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800214c:	2b00      	cmp	r3, #0
 800214e:	d108      	bne.n	8002162 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	431a      	orrs	r2, r3
 800215e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002160:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7e5b      	ldrb	r3, [r3, #25]
 8002166:	035b      	lsls	r3, r3, #13
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800216c:	2a01      	cmp	r2, #1
 800216e:	d002      	beq.n	8002176 <HAL_ADC_Init+0x22e>
 8002170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002174:	e000      	b.n	8002178 <HAL_ADC_Init+0x230>
 8002176:	2200      	movs	r2, #0
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	4313      	orrs	r3, r2
 8002186:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002188:	4313      	orrs	r3, r2
 800218a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d11b      	bne.n	80021ce <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7e5b      	ldrb	r3, [r3, #25]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	3b01      	subs	r3, #1
 80021a4:	045a      	lsls	r2, r3, #17
 80021a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	663b      	str	r3, [r7, #96]	; 0x60
 80021b0:	e00d      	b.n	80021ce <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80021ba:	f043 0220 	orr.w	r2, r3, #32
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d03a      	beq.n	800224c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_ADC_Init+0x2ec>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d004      	beq.n	80021ea <HAL_ADC_Init+0x2a2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <HAL_ADC_Init+0x2f0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d128      	bne.n	800223c <HAL_ADC_Init+0x2f4>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ee:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80021f2:	d012      	beq.n	800221a <HAL_ADC_Init+0x2d2>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021fc:	d00a      	beq.n	8002214 <HAL_ADC_Init+0x2cc>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002206:	d002      	beq.n	800220e <HAL_ADC_Init+0x2c6>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	e018      	b.n	8002240 <HAL_ADC_Init+0x2f8>
 800220e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002212:	e015      	b.n	8002240 <HAL_ADC_Init+0x2f8>
 8002214:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002218:	e012      	b.n	8002240 <HAL_ADC_Init+0x2f8>
 800221a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800221e:	e00f      	b.n	8002240 <HAL_ADC_Init+0x2f8>
 8002220:	2000004c 	.word	0x2000004c
 8002224:	431bde83 	.word	0x431bde83
 8002228:	50000100 	.word	0x50000100
 800222c:	50000300 	.word	0x50000300
 8002230:	50000700 	.word	0x50000700
 8002234:	50000400 	.word	0x50000400
 8002238:	50000500 	.word	0x50000500
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002244:	4313      	orrs	r3, r2
 8002246:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002248:	4313      	orrs	r3, r2
 800224a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b00      	cmp	r3, #0
 8002258:	d114      	bne.n	8002284 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002268:	f023 0302 	bic.w	r3, r3, #2
 800226c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7e1b      	ldrb	r3, [r3, #24]
 8002272:	039a      	lsls	r2, r3, #14
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4313      	orrs	r3, r2
 800227e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002280:	4313      	orrs	r3, r2
 8002282:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <HAL_ADC_Init+0x3bc>)
 800228c:	4013      	ands	r3, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002294:	430b      	orrs	r3, r1
 8002296:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d10c      	bne.n	80022ba <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f023 010f 	bic.w	r1, r3, #15
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	1e5a      	subs	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	430a      	orrs	r2, r1
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
 80022b8:	e007      	b.n	80022ca <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 020f 	bic.w	r2, r2, #15
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f023 0303 	bic.w	r3, r3, #3
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40
 80022e0:	e00a      	b.n	80022f8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f023 0312 	bic.w	r3, r3, #18
 80022ea:	f043 0210 	orr.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80022f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3768      	adds	r7, #104	; 0x68
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	fff0c007 	.word	0xfff0c007

08002308 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 80f9 	bne.w	8002516 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_ADC_Start+0x2a>
 800232e:	2302      	movs	r3, #2
 8002330:	e0f4      	b.n	800251c <HAL_ADC_Start+0x214>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fde6 	bl	8002f0c <ADC_Enable>
 8002340:	4603      	mov	r3, r0
 8002342:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 80e0 	bne.w	800250c <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002368:	d004      	beq.n	8002374 <HAL_ADC_Start+0x6c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6d      	ldr	r2, [pc, #436]	; (8002524 <HAL_ADC_Start+0x21c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d106      	bne.n	8002382 <HAL_ADC_Start+0x7a>
 8002374:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <HAL_ADC_Start+0x220>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 031f 	and.w	r3, r3, #31
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_ADC_Start+0x9a>
 8002380:	e005      	b.n	800238e <HAL_ADC_Start+0x86>
 8002382:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_ADC_Start+0x224>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 031f 	and.w	r3, r3, #31
 800238a:	2b00      	cmp	r3, #0
 800238c:	d009      	beq.n	80023a2 <HAL_ADC_Start+0x9a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002396:	d004      	beq.n	80023a2 <HAL_ADC_Start+0x9a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a64      	ldr	r2, [pc, #400]	; (8002530 <HAL_ADC_Start+0x228>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d115      	bne.n	80023ce <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d036      	beq.n	800242a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023cc:	e02d      	b.n	800242a <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_Start+0xe6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a4e      	ldr	r2, [pc, #312]	; (8002524 <HAL_ADC_Start+0x21c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10a      	bne.n	8002404 <HAL_ADC_Start+0xfc>
 80023ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf14      	ite	ne
 80023fc:	2301      	movne	r3, #1
 80023fe:	2300      	moveq	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e008      	b.n	8002416 <HAL_ADC_Start+0x10e>
 8002404:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <HAL_ADC_Start+0x228>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf14      	ite	ne
 8002410:	2301      	movne	r3, #1
 8002412:	2300      	moveq	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d007      	beq.n	800242a <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002422:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002436:	d106      	bne.n	8002446 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	f023 0206 	bic.w	r2, r3, #6
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	645a      	str	r2, [r3, #68]	; 0x44
 8002444:	e002      	b.n	800244c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	221c      	movs	r2, #28
 800245a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002464:	d004      	beq.n	8002470 <HAL_ADC_Start+0x168>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2e      	ldr	r2, [pc, #184]	; (8002524 <HAL_ADC_Start+0x21c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d106      	bne.n	800247e <HAL_ADC_Start+0x176>
 8002470:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_ADC_Start+0x220>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03e      	beq.n	80024fa <HAL_ADC_Start+0x1f2>
 800247c:	e005      	b.n	800248a <HAL_ADC_Start+0x182>
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_ADC_Start+0x224>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2b00      	cmp	r3, #0
 8002488:	d037      	beq.n	80024fa <HAL_ADC_Start+0x1f2>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002492:	d004      	beq.n	800249e <HAL_ADC_Start+0x196>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a22      	ldr	r2, [pc, #136]	; (8002524 <HAL_ADC_Start+0x21c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d106      	bne.n	80024ac <HAL_ADC_Start+0x1a4>
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_ADC_Start+0x220>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b05      	cmp	r3, #5
 80024a8:	d027      	beq.n	80024fa <HAL_ADC_Start+0x1f2>
 80024aa:	e005      	b.n	80024b8 <HAL_ADC_Start+0x1b0>
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <HAL_ADC_Start+0x224>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d020      	beq.n	80024fa <HAL_ADC_Start+0x1f2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024c0:	d004      	beq.n	80024cc <HAL_ADC_Start+0x1c4>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_ADC_Start+0x21c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d106      	bne.n	80024da <HAL_ADC_Start+0x1d2>
 80024cc:	4b16      	ldr	r3, [pc, #88]	; (8002528 <HAL_ADC_Start+0x220>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	2b09      	cmp	r3, #9
 80024d6:	d010      	beq.n	80024fa <HAL_ADC_Start+0x1f2>
 80024d8:	e005      	b.n	80024e6 <HAL_ADC_Start+0x1de>
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_ADC_Start+0x224>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	d009      	beq.n	80024fa <HAL_ADC_Start+0x1f2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ee:	d004      	beq.n	80024fa <HAL_ADC_Start+0x1f2>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0e      	ldr	r2, [pc, #56]	; (8002530 <HAL_ADC_Start+0x228>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d10f      	bne.n	800251a <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0204 	orr.w	r2, r2, #4
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	e006      	b.n	800251a <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002514:	e001      	b.n	800251a <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002516:	2302      	movs	r3, #2
 8002518:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	50000100 	.word	0x50000100
 8002528:	50000300 	.word	0x50000300
 800252c:	50000700 	.word	0x50000700
 8002530:	50000400 	.word	0x50000400

08002534 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	2b08      	cmp	r3, #8
 8002548:	d102      	bne.n	8002550 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800254a:	2308      	movs	r3, #8
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	e03a      	b.n	80025c6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002558:	d004      	beq.n	8002564 <HAL_ADC_PollForConversion+0x30>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a72      	ldr	r2, [pc, #456]	; (8002728 <HAL_ADC_PollForConversion+0x1f4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d101      	bne.n	8002568 <HAL_ADC_PollForConversion+0x34>
 8002564:	4b71      	ldr	r3, [pc, #452]	; (800272c <HAL_ADC_PollForConversion+0x1f8>)
 8002566:	e000      	b.n	800256a <HAL_ADC_PollForConversion+0x36>
 8002568:	4b71      	ldr	r3, [pc, #452]	; (8002730 <HAL_ADC_PollForConversion+0x1fc>)
 800256a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b00      	cmp	r3, #0
 8002576:	d112      	bne.n	800259e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d11d      	bne.n	80025c2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0220 	orr.w	r2, r3, #32
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e0bf      	b.n	800271e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0ad      	b.n	800271e <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80025c2:	230c      	movs	r3, #12
 80025c4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ce:	d004      	beq.n	80025da <HAL_ADC_PollForConversion+0xa6>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a54      	ldr	r2, [pc, #336]	; (8002728 <HAL_ADC_PollForConversion+0x1f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d106      	bne.n	80025e8 <HAL_ADC_PollForConversion+0xb4>
 80025da:	4b54      	ldr	r3, [pc, #336]	; (800272c <HAL_ADC_PollForConversion+0x1f8>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 031f 	and.w	r3, r3, #31
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_ADC_PollForConversion+0xd4>
 80025e6:	e005      	b.n	80025f4 <HAL_ADC_PollForConversion+0xc0>
 80025e8:	4b51      	ldr	r3, [pc, #324]	; (8002730 <HAL_ADC_PollForConversion+0x1fc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d009      	beq.n	8002608 <HAL_ADC_PollForConversion+0xd4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025fc:	d004      	beq.n	8002608 <HAL_ADC_PollForConversion+0xd4>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a4c      	ldr	r2, [pc, #304]	; (8002734 <HAL_ADC_PollForConversion+0x200>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d104      	bne.n	8002612 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e00f      	b.n	8002632 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261a:	d004      	beq.n	8002626 <HAL_ADC_PollForConversion+0xf2>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a41      	ldr	r2, [pc, #260]	; (8002728 <HAL_ADC_PollForConversion+0x1f4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d102      	bne.n	800262c <HAL_ADC_PollForConversion+0xf8>
 8002626:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800262a:	e000      	b.n	800262e <HAL_ADC_PollForConversion+0xfa>
 800262c:	4b41      	ldr	r3, [pc, #260]	; (8002734 <HAL_ADC_PollForConversion+0x200>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002632:	f7ff fc59 	bl	8001ee8 <HAL_GetTick>
 8002636:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002638:	e021      	b.n	800267e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d01d      	beq.n	800267e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_ADC_PollForConversion+0x124>
 8002648:	f7ff fc4e 	bl	8001ee8 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d212      	bcs.n	800267e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10b      	bne.n	800267e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f043 0204 	orr.w	r2, r3, #4
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e04f      	b.n	800271e <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0d6      	beq.n	800263a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d131      	bne.n	800270a <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d12c      	bne.n	800270a <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d125      	bne.n	800270a <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d112      	bne.n	80026f2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d112      	bne.n	800270a <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
 80026f0:	e00b      	b.n	800270a <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f043 0220 	orr.w	r2, r3, #32
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f043 0201 	orr.w	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	50000100 	.word	0x50000100
 800272c:	50000300 	.word	0x50000300
 8002730:	50000700 	.word	0x50000700
 8002734:	50000400 	.word	0x50000400

08002738 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002754:	b480      	push	{r7}
 8002756:	b09b      	sub	sp, #108	; 0x6c
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x22>
 8002772:	2302      	movs	r3, #2
 8002774:	e2c8      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5b4>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	f040 82ac 	bne.w	8002ce6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d81c      	bhi.n	80027d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	461a      	mov	r2, r3
 80027aa:	231f      	movs	r3, #31
 80027ac:	4093      	lsls	r3, r2
 80027ae:	43db      	mvns	r3, r3
 80027b0:	4019      	ands	r1, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	6818      	ldr	r0, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	4613      	mov	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4413      	add	r3, r2
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fa00 f203 	lsl.w	r2, r0, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
 80027ce:	e063      	b.n	8002898 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	d81e      	bhi.n	8002816 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	221f      	movs	r2, #31
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	4019      	ands	r1, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	3b1e      	subs	r3, #30
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	635a      	str	r2, [r3, #52]	; 0x34
 8002814:	e040      	b.n	8002898 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b0e      	cmp	r3, #14
 800281c:	d81e      	bhi.n	800285c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	3b3c      	subs	r3, #60	; 0x3c
 8002832:	221f      	movs	r2, #31
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	4019      	ands	r1, r3
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	3b3c      	subs	r3, #60	; 0x3c
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
 800285a:	e01d      	b.n	8002898 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	3b5a      	subs	r3, #90	; 0x5a
 8002870:	221f      	movs	r2, #31
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	4019      	ands	r1, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	3b5a      	subs	r3, #90	; 0x5a
 800288c:	fa00 f203 	lsl.w	r2, r0, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 80e5 	bne.w	8002a72 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b09      	cmp	r3, #9
 80028ae:	d91c      	bls.n	80028ea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6999      	ldr	r1, [r3, #24]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	3b1e      	subs	r3, #30
 80028c2:	2207      	movs	r2, #7
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4019      	ands	r1, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6898      	ldr	r0, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	3b1e      	subs	r3, #30
 80028dc:	fa00 f203 	lsl.w	r2, r0, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	619a      	str	r2, [r3, #24]
 80028e8:	e019      	b.n	800291e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6959      	ldr	r1, [r3, #20]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	2207      	movs	r2, #7
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	4019      	ands	r1, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6898      	ldr	r0, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	fa00 f203 	lsl.w	r2, r0, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	3b01      	subs	r3, #1
 800293c:	2b03      	cmp	r3, #3
 800293e:	d84f      	bhi.n	80029e0 <HAL_ADC_ConfigChannel+0x28c>
 8002940:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <HAL_ADC_ConfigChannel+0x1f4>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	08002959 	.word	0x08002959
 800294c:	0800297b 	.word	0x0800297b
 8002950:	0800299d 	.word	0x0800299d
 8002954:	080029bf 	.word	0x080029bf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800295e:	4b99      	ldr	r3, [pc, #612]	; (8002bc4 <HAL_ADC_ConfigChannel+0x470>)
 8002960:	4013      	ands	r3, r2
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	0691      	lsls	r1, r2, #26
 8002968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800296a:	430a      	orrs	r2, r1
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002976:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002978:	e07b      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002980:	4b90      	ldr	r3, [pc, #576]	; (8002bc4 <HAL_ADC_ConfigChannel+0x470>)
 8002982:	4013      	ands	r3, r2
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	0691      	lsls	r1, r2, #26
 800298a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800298c:	430a      	orrs	r2, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002998:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800299a:	e06a      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80029a2:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <HAL_ADC_ConfigChannel+0x470>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	0691      	lsls	r1, r2, #26
 80029ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029ae:	430a      	orrs	r2, r1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029ba:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029bc:	e059      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80029c4:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <HAL_ADC_ConfigChannel+0x470>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	0691      	lsls	r1, r2, #26
 80029ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029d0:	430a      	orrs	r2, r1
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80029dc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80029de:	e048      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	069b      	lsls	r3, r3, #26
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d107      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a02:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	069b      	lsls	r3, r3, #26
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d107      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a26:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	069b      	lsls	r3, r3, #26
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a4a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	069b      	lsls	r3, r3, #26
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a6e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002a70:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d108      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x33e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x33e>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x340>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f040 8131 	bne.w	8002cfc <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d00f      	beq.n	8002ac2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43da      	mvns	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	400a      	ands	r2, r1
 8002abc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002ac0:	e049      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b09      	cmp	r3, #9
 8002ae2:	d91c      	bls.n	8002b1e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6999      	ldr	r1, [r3, #24]
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	3b1b      	subs	r3, #27
 8002af6:	2207      	movs	r2, #7
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4019      	ands	r1, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6898      	ldr	r0, [r3, #8]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3b1b      	subs	r3, #27
 8002b10:	fa00 f203 	lsl.w	r2, r0, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	619a      	str	r2, [r3, #24]
 8002b1c:	e01b      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6959      	ldr	r1, [r3, #20]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	2207      	movs	r2, #7
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	4019      	ands	r1, r3
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6898      	ldr	r0, [r3, #8]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b5e:	d004      	beq.n	8002b6a <HAL_ADC_ConfigChannel+0x416>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_ADC_ConfigChannel+0x474>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d101      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x41a>
 8002b6a:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_ADC_ConfigChannel+0x478>)
 8002b6c:	e000      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x41c>
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_ADC_ConfigChannel+0x47c>)
 8002b70:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d105      	bne.n	8002b86 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d015      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002b8a:	2b11      	cmp	r3, #17
 8002b8c:	d105      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002b9e:	2b12      	cmp	r3, #18
 8002ba0:	f040 80ac 	bne.w	8002cfc <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 80a5 	bne.w	8002cfc <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bba:	d10b      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x480>
 8002bbc:	4b02      	ldr	r3, [pc, #8]	; (8002bc8 <HAL_ADC_ConfigChannel+0x474>)
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e023      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x4b6>
 8002bc2:	bf00      	nop
 8002bc4:	83fff000 	.word	0x83fff000
 8002bc8:	50000100 	.word	0x50000100
 8002bcc:	50000300 	.word	0x50000300
 8002bd0:	50000700 	.word	0x50000700
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	; (8002d14 <HAL_ADC_ConfigChannel+0x5c0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d103      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x492>
 8002bde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e011      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x4b6>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <HAL_ADC_ConfigChannel+0x5c4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d102      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x4a2>
 8002bf0:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_ADC_ConfigChannel+0x5c8>)
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e009      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x4b6>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a48      	ldr	r2, [pc, #288]	; (8002d1c <HAL_ADC_ConfigChannel+0x5c8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d102      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x4b2>
 8002c00:	4b45      	ldr	r3, [pc, #276]	; (8002d18 <HAL_ADC_ConfigChannel+0x5c4>)
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e001      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x4b6>
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d108      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x4d6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x4d6>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x4d8>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d150      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c30:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x4fe>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x4fe>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x500>
 8002c52:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d13c      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d11d      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x548>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c68:	d118      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c74:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c76:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <HAL_ADC_ConfigChannel+0x5cc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	; (8002d24 <HAL_ADC_ConfigChannel+0x5d0>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	0c9a      	lsrs	r2, r3, #18
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c8c:	e002      	b.n	8002c94 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f9      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002c9a:	e02e      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b11      	cmp	r3, #17
 8002ca2:	d10b      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x568>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cba:	e01e      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b12      	cmp	r3, #18
 8002cc2:	d11a      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cd0:	e013      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002ce4:	e00a      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002cf8:	e000      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002cfa:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	376c      	adds	r7, #108	; 0x6c
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	50000100 	.word	0x50000100
 8002d18:	50000400 	.word	0x50000400
 8002d1c:	50000500 	.word	0x50000500
 8002d20:	2000004c 	.word	0x2000004c
 8002d24:	431bde83 	.word	0x431bde83

08002d28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b099      	sub	sp, #100	; 0x64
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d40:	d102      	bne.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002d42:	4b6d      	ldr	r3, [pc, #436]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d44:	60bb      	str	r3, [r7, #8]
 8002d46:	e01a      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6a      	ldr	r2, [pc, #424]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d103      	bne.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	e011      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a67      	ldr	r2, [pc, #412]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d102      	bne.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d64:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	e009      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a64      	ldr	r2, [pc, #400]	; (8002f00 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d102      	bne.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d74:	4b61      	ldr	r3, [pc, #388]	; (8002efc <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	e001      	b.n	8002d7e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0b0      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d101      	bne.n	8002d96 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e0a9      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f040 808d 	bne.w	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f040 8086 	bne.w	8002ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc4:	d004      	beq.n	8002dd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a4b      	ldr	r2, [pc, #300]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002dd0:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002dd6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d040      	beq.n	8002e62 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002df2:	035b      	lsls	r3, r3, #13
 8002df4:	430b      	orrs	r3, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dfa:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d108      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d15c      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002e3e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d14b      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e4c:	f023 030f 	bic.w	r3, r3, #15
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	6811      	ldr	r1, [r2, #0]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	6892      	ldr	r2, [r2, #8]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e5e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e60:	e03c      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d108      	bne.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d123      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d107      	bne.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002eb0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d112      	bne.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ebe:	f023 030f 	bic.w	r3, r3, #15
 8002ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ec4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ec6:	e009      	b.n	8002edc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002eda:	e000      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002edc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002eea:	4618      	mov	r0, r3
 8002eec:	3764      	adds	r7, #100	; 0x64
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	50000100 	.word	0x50000100
 8002efc:	50000400 	.word	0x50000400
 8002f00:	50000500 	.word	0x50000500
 8002f04:	50000300 	.word	0x50000300
 8002f08:	50000700 	.word	0x50000700

08002f0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <ADC_Enable+0x2c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <ADC_Enable+0x2c>
 8002f34:	2301      	movs	r3, #1
 8002f36:	e000      	b.n	8002f3a <ADC_Enable+0x2e>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d143      	bne.n	8002fc6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <ADC_Enable+0xc4>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00d      	beq.n	8002f68 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	f043 0210 	orr.w	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e02f      	b.n	8002fc8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002f78:	f7fe ffb6 	bl	8001ee8 <HAL_GetTick>
 8002f7c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f7e:	e01b      	b.n	8002fb8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f80:	f7fe ffb2 	bl	8001ee8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d914      	bls.n	8002fb8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d00d      	beq.n	8002fb8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	f043 0210 	orr.w	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e007      	b.n	8002fc8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d1dc      	bne.n	8002f80 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	8000003f 	.word	0x8000003f

08002fd4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d108      	bne.n	8003000 <ADC_Disable+0x2c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <ADC_Disable+0x2c>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <ADC_Disable+0x2e>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d047      	beq.n	8003096 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030d 	and.w	r3, r3, #13
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10f      	bne.n	8003034 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0202 	orr.w	r2, r2, #2
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2203      	movs	r2, #3
 800302a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800302c:	f7fe ff5c 	bl	8001ee8 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003032:	e029      	b.n	8003088 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	f043 0201 	orr.w	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e023      	b.n	8003098 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003050:	f7fe ff4a 	bl	8001ee8 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d914      	bls.n	8003088 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10d      	bne.n	8003088 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f043 0210 	orr.w	r2, r3, #16
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307c:	f043 0201 	orr.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e007      	b.n	8003098 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d0dc      	beq.n	8003050 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <__NVIC_SetPriorityGrouping>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030d2:	4a04      	ldr	r2, [pc, #16]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	60d3      	str	r3, [r2, #12]
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_GetPriorityGrouping>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_EnableIRQ>:
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	db0b      	blt.n	800312e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4907      	ldr	r1, [pc, #28]	; (800313c <__NVIC_EnableIRQ+0x38>)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2001      	movs	r0, #1
 8003126:	fa00 f202 	lsl.w	r2, r0, r2
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	e000e100 	.word	0xe000e100

08003140 <__NVIC_SetPriority>:
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003150:	2b00      	cmp	r3, #0
 8003152:	db0a      	blt.n	800316a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <__NVIC_SetPriority+0x4c>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	0112      	lsls	r2, r2, #4
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	440b      	add	r3, r1
 8003164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003168:	e00a      	b.n	8003180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	4908      	ldr	r1, [pc, #32]	; (8003190 <__NVIC_SetPriority+0x50>)
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	3b04      	subs	r3, #4
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	440b      	add	r3, r1
 800317e:	761a      	strb	r2, [r3, #24]
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	f1c3 0307 	rsb	r3, r3, #7
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf28      	it	cs
 80031b2:	2304      	movcs	r3, #4
 80031b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <NVIC_EncodePriority+0x30>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	3b03      	subs	r3, #3
 80031c2:	e000      	b.n	80031c6 <NVIC_EncodePriority+0x32>
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c8:	f04f 32ff 	mov.w	r2, #4294967295
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031dc:	f04f 31ff 	mov.w	r1, #4294967295
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43d9      	mvns	r1, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	4313      	orrs	r3, r2
         );
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3724      	adds	r7, #36	; 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320c:	d301      	bcc.n	8003212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3b01      	subs	r3, #1
 8003218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800321a:	210f      	movs	r1, #15
 800321c:	f04f 30ff 	mov.w	r0, #4294967295
 8003220:	f7ff ff8e 	bl	8003140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <SysTick_Config+0x40>)
 800322c:	2207      	movs	r2, #7
 800322e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e010 	.word	0xe000e010

08003240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff ff29 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 800324e:	bf00      	nop
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	4603      	mov	r3, r0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003268:	f7ff ff3e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800326c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	6978      	ldr	r0, [r7, #20]
 8003274:	f7ff ff8e 	bl	8003194 <NVIC_EncodePriority>
 8003278:	4602      	mov	r2, r0
 800327a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff5d 	bl	8003140 <__NVIC_SetPriority>
}
 8003286:	bf00      	nop
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff31 	bl	8003104 <__NVIC_EnableIRQ>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7ff ffa2 	bl	80031fc <SysTick_Config>
 80032b8:	4603      	mov	r3, r0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e014      	b.n	80032fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	791b      	ldrb	r3, [r3, #4]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fe f963 	bl	80015b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003306:	b480      	push	{r7}
 8003308:	b087      	sub	sp, #28
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	795b      	ldrb	r3, [r3, #5]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d101      	bne.n	8003326 <HAL_DAC_ConfigChannel+0x20>
 8003322:	2302      	movs	r3, #2
 8003324:	e036      	b.n	8003394 <HAL_DAC_ConfigChannel+0x8e>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2202      	movs	r2, #2
 8003330:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800333a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4013      	ands	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6819      	ldr	r1, [r3, #0]
 8003374:	22c0      	movs	r2, #192	; 0xc0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43da      	mvns	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	400a      	ands	r2, r1
 8003384:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2201      	movs	r2, #1
 800338a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	371c      	adds	r7, #28
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e037      	b.n	8003426 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033d0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 f8b3 	bl	8003574 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}  
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2204      	movs	r2, #4
 800344c:	409a      	lsls	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d024      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x72>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01f      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0320 	and.w	r3, r3, #32
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0204 	bic.w	r2, r2, #4
 800347c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003486:	2104      	movs	r1, #4
 8003488:	fa01 f202 	lsl.w	r2, r1, r2
 800348c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d06a      	beq.n	800356c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800349e:	e065      	b.n	800356c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	2202      	movs	r2, #2
 80034a6:	409a      	lsls	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02c      	beq.n	800350a <HAL_DMA_IRQHandler+0xdc>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d027      	beq.n	800350a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10b      	bne.n	80034e0 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 020a 	bic.w	r2, r2, #10
 80034d6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2102      	movs	r1, #2
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d035      	beq.n	800356c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003508:	e030      	b.n	800356c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2208      	movs	r2, #8
 8003510:	409a      	lsls	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d028      	beq.n	800356c <HAL_DMA_IRQHandler+0x13e>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 020e 	bic.w	r2, r2, #14
 8003532:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353c:	2101      	movs	r1, #1
 800353e:	fa01 f202 	lsl.w	r2, r1, r2
 8003542:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355e:	2b00      	cmp	r3, #0
 8003560:	d004      	beq.n	800356c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	4798      	blx	r3
    }
  }
}  
 800356a:	e7ff      	b.n	800356c <HAL_DMA_IRQHandler+0x13e>
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <DMA_CalcBaseAndBitshift+0x60>)
 8003584:	429a      	cmp	r2, r3
 8003586:	d80f      	bhi.n	80035a8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	461a      	mov	r2, r3
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003590:	4413      	add	r3, r2
 8003592:	4a12      	ldr	r2, [pc, #72]	; (80035dc <DMA_CalcBaseAndBitshift+0x68>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	009a      	lsls	r2, r3, #2
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <DMA_CalcBaseAndBitshift+0x6c>)
 80035a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80035a6:	e00e      	b.n	80035c6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <DMA_CalcBaseAndBitshift+0x70>)
 80035b0:	4413      	add	r3, r2
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <DMA_CalcBaseAndBitshift+0x68>)
 80035b4:	fba2 2303 	umull	r2, r3, r2, r3
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	009a      	lsls	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a09      	ldr	r2, [pc, #36]	; (80035e8 <DMA_CalcBaseAndBitshift+0x74>)
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40020407 	.word	0x40020407
 80035d8:	bffdfff8 	.word	0xbffdfff8
 80035dc:	cccccccd 	.word	0xcccccccd
 80035e0:	40020000 	.word	0x40020000
 80035e4:	bffdfbf8 	.word	0xbffdfbf8
 80035e8:	40020400 	.word	0x40020400

080035ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035fa:	e154      	b.n	80038a6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2101      	movs	r1, #1
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	fa01 f303 	lsl.w	r3, r1, r3
 8003608:	4013      	ands	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8146 	beq.w	80038a0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d005      	beq.n	800362c <HAL_GPIO_Init+0x40>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d130      	bne.n	800368e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2203      	movs	r2, #3
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003662:	2201      	movs	r2, #1
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	f003 0201 	and.w	r2, r3, #1
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b03      	cmp	r3, #3
 8003698:	d017      	beq.n	80036ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4013      	ands	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d123      	bne.n	800371e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	08da      	lsrs	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3208      	adds	r2, #8
 80036de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	220f      	movs	r2, #15
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4013      	ands	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	691a      	ldr	r2, [r3, #16]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	08da      	lsrs	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3208      	adds	r2, #8
 8003718:	6939      	ldr	r1, [r7, #16]
 800371a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	2203      	movs	r2, #3
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0203 	and.w	r2, r3, #3
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80a0 	beq.w	80038a0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003760:	4b58      	ldr	r3, [pc, #352]	; (80038c4 <HAL_GPIO_Init+0x2d8>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4a57      	ldr	r2, [pc, #348]	; (80038c4 <HAL_GPIO_Init+0x2d8>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6193      	str	r3, [r2, #24]
 800376c:	4b55      	ldr	r3, [pc, #340]	; (80038c4 <HAL_GPIO_Init+0x2d8>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003778:	4a53      	ldr	r2, [pc, #332]	; (80038c8 <HAL_GPIO_Init+0x2dc>)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	089b      	lsrs	r3, r3, #2
 800377e:	3302      	adds	r3, #2
 8003780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	220f      	movs	r2, #15
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037a2:	d019      	beq.n	80037d8 <HAL_GPIO_Init+0x1ec>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a49      	ldr	r2, [pc, #292]	; (80038cc <HAL_GPIO_Init+0x2e0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_GPIO_Init+0x1e8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a48      	ldr	r2, [pc, #288]	; (80038d0 <HAL_GPIO_Init+0x2e4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00d      	beq.n	80037d0 <HAL_GPIO_Init+0x1e4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a47      	ldr	r2, [pc, #284]	; (80038d4 <HAL_GPIO_Init+0x2e8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <HAL_GPIO_Init+0x1e0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a46      	ldr	r2, [pc, #280]	; (80038d8 <HAL_GPIO_Init+0x2ec>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_GPIO_Init+0x1dc>
 80037c4:	2304      	movs	r3, #4
 80037c6:	e008      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037c8:	2305      	movs	r3, #5
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037cc:	2303      	movs	r3, #3
 80037ce:	e004      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e002      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d4:	2301      	movs	r3, #1
 80037d6:	e000      	b.n	80037da <HAL_GPIO_Init+0x1ee>
 80037d8:	2300      	movs	r3, #0
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	f002 0203 	and.w	r2, r2, #3
 80037e0:	0092      	lsls	r2, r2, #2
 80037e2:	4093      	lsls	r3, r2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037ea:	4937      	ldr	r1, [pc, #220]	; (80038c8 <HAL_GPIO_Init+0x2dc>)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	3302      	adds	r3, #2
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037f8:	4b38      	ldr	r3, [pc, #224]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4013      	ands	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800381c:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003822:	4b2e      	ldr	r3, [pc, #184]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003846:	4a25      	ldr	r2, [pc, #148]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003870:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003876:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800389a:	4a10      	ldr	r2, [pc, #64]	; (80038dc <HAL_GPIO_Init+0x2f0>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3301      	adds	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f aea3 	bne.w	80035fc <HAL_GPIO_Init+0x10>
  }
}
 80038b6:	bf00      	nop
 80038b8:	bf00      	nop
 80038ba:	371c      	adds	r7, #28
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40010000 	.word	0x40010000
 80038cc:	48000400 	.word	0x48000400
 80038d0:	48000800 	.word	0x48000800
 80038d4:	48000c00 	.word	0x48000c00
 80038d8:	48001000 	.word	0x48001000
 80038dc:	40010400 	.word	0x40010400

080038e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	887b      	ldrh	r3, [r7, #2]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	e001      	b.n	8003902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800392c:	e002      	b.n	8003934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e081      	b.n	8003a56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fe94 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2224      	movs	r2, #36	; 0x24
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d107      	bne.n	80039ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	e006      	b.n	80039c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80039c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d104      	bne.n	80039da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69d9      	ldr	r1, [r3, #28]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1a      	ldr	r2, [r3, #32]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0201 	orr.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	4608      	mov	r0, r1
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	817b      	strh	r3, [r7, #10]
 8003a72:	460b      	mov	r3, r1
 8003a74:	813b      	strh	r3, [r7, #8]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	f040 80f9 	bne.w	8003c7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_I2C_Mem_Write+0x34>
 8003a8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0ed      	b.n	8003c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_Mem_Write+0x4e>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e0e6      	b.n	8003c7c <HAL_I2C_Mem_Write+0x21c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ab6:	f7fe fa17 	bl	8001ee8 <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2319      	movs	r3, #25
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f955 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0d1      	b.n	8003c7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2221      	movs	r2, #33	; 0x21
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2240      	movs	r2, #64	; 0x40
 8003ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6a3a      	ldr	r2, [r7, #32]
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003af8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b00:	88f8      	ldrh	r0, [r7, #6]
 8003b02:	893a      	ldrh	r2, [r7, #8]
 8003b04:	8979      	ldrh	r1, [r7, #10]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	4603      	mov	r3, r0
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 f8b9 	bl	8003c88 <I2C_RequestMemoryWrite>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0a9      	b.n	8003c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2bff      	cmp	r3, #255	; 0xff
 8003b30:	d90e      	bls.n	8003b50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	22ff      	movs	r2, #255	; 0xff
 8003b36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	8979      	ldrh	r1, [r7, #10]
 8003b40:	2300      	movs	r3, #0
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 facf 	bl	80040ec <I2C_TransferConfig>
 8003b4e:	e00f      	b.n	8003b70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	8979      	ldrh	r1, [r7, #10]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fabe 	bl	80040ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f94e 	bl	8003e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e07b      	b.n	8003c7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	781a      	ldrb	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d034      	beq.n	8003c28 <HAL_I2C_Mem_Write+0x1c8>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d130      	bne.n	8003c28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2180      	movs	r1, #128	; 0x80
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 f8d1 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e04d      	b.n	8003c7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2bff      	cmp	r3, #255	; 0xff
 8003be8:	d90e      	bls.n	8003c08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	8979      	ldrh	r1, [r7, #10]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fa73 	bl	80040ec <I2C_TransferConfig>
 8003c06:	e00f      	b.n	8003c28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	8979      	ldrh	r1, [r7, #10]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fa62 	bl	80040ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d19e      	bne.n	8003b70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f934 	bl	8003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e01a      	b.n	8003c7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b0a      	ldr	r3, [pc, #40]	; (8003c84 <HAL_I2C_Mem_Write+0x224>)
 8003c5a:	400b      	ands	r3, r1
 8003c5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e000      	b.n	8003c7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c7a:	2302      	movs	r3, #2
  }
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	fe00e800 	.word	0xfe00e800

08003c88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	4608      	mov	r0, r1
 8003c92:	4611      	mov	r1, r2
 8003c94:	461a      	mov	r2, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	817b      	strh	r3, [r7, #10]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	813b      	strh	r3, [r7, #8]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ca2:	88fb      	ldrh	r3, [r7, #6]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <I2C_RequestMemoryWrite+0xa4>)
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 fa1b 	bl	80040ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f8ab 	bl	8003e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e02c      	b.n	8003d24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d105      	bne.n	8003cdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
 8003cda:	e015      	b.n	8003d08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cdc:	893b      	ldrh	r3, [r7, #8]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	69b9      	ldr	r1, [r7, #24]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f891 	bl	8003e16 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e012      	b.n	8003d24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfe:	893b      	ldrh	r3, [r7, #8]
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f830 	bl	8003d78 <I2C_WaitOnFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	80002000 	.word	0x80002000

08003d30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d103      	bne.n	8003d4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d007      	beq.n	8003d6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	619a      	str	r2, [r3, #24]
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d88:	e031      	b.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d02d      	beq.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d92:	f7fe f8a9 	bl	8001ee8 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d122      	bne.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d113      	bne.n	8003dee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	f043 0220 	orr.w	r2, r3, #32
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e00f      	b.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	bf0c      	ite	eq
 8003dfe:	2301      	moveq	r3, #1
 8003e00:	2300      	movne	r3, #0
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	79fb      	ldrb	r3, [r7, #7]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d0be      	beq.n	8003d8a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e22:	e033      	b.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f87f 	bl	8003f2c <I2C_IsErrorOccurred>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e031      	b.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3e:	d025      	beq.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e40:	f7fe f852 	bl	8001ee8 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d302      	bcc.n	8003e56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d11a      	bne.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d013      	beq.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e007      	b.n	8003e9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d1c4      	bne.n	8003e24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb0:	e02f      	b.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f838 	bl	8003f2c <I2C_IsErrorOccurred>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e02d      	b.n	8003f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fe f80f 	bl	8001ee8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d11a      	bne.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d013      	beq.n	8003f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f043 0220 	orr.w	r2, r3, #32
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e007      	b.n	8003f22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0320 	and.w	r3, r3, #32
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d1c8      	bne.n	8003eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d068      	beq.n	800402a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f60:	e049      	b.n	8003ff6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d045      	beq.n	8003ff6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f6a:	f7fd ffbd 	bl	8001ee8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d302      	bcc.n	8003f80 <I2C_IsErrorOccurred+0x54>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d13a      	bne.n	8003ff6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa2:	d121      	bne.n	8003fe8 <I2C_IsErrorOccurred+0xbc>
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003faa:	d01d      	beq.n	8003fe8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fac:	7cfb      	ldrb	r3, [r7, #19]
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d01a      	beq.n	8003fe8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fc2:	f7fd ff91 	bl	8001ee8 <HAL_GetTick>
 8003fc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc8:	e00e      	b.n	8003fe8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fca:	f7fd ff8d 	bl	8001ee8 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b19      	cmp	r3, #25
 8003fd6:	d907      	bls.n	8003fe8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	f043 0320 	orr.w	r3, r3, #32
 8003fde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003fe6:	e006      	b.n	8003ff6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d1e9      	bne.n	8003fca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b20      	cmp	r3, #32
 8004002:	d003      	beq.n	800400c <I2C_IsErrorOccurred+0xe0>
 8004004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0aa      	beq.n	8003f62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800400c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004010:	2b00      	cmp	r3, #0
 8004012:	d103      	bne.n	800401c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2220      	movs	r2, #32
 800401a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	f043 0301 	orr.w	r3, r3, #1
 8004042:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800404c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	f043 0308 	orr.w	r3, r3, #8
 8004064:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800406e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	f043 0302 	orr.w	r3, r3, #2
 8004086:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01c      	beq.n	80040da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f7ff fe45 	bl	8003d30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <I2C_IsErrorOccurred+0x1bc>)
 80040b2:	400b      	ands	r3, r1
 80040b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80040da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	fe00e800 	.word	0xfe00e800

080040ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	607b      	str	r3, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	817b      	strh	r3, [r7, #10]
 80040fa:	4613      	mov	r3, r2
 80040fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040fe:	897b      	ldrh	r3, [r7, #10]
 8004100:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004104:	7a7b      	ldrb	r3, [r7, #9]
 8004106:	041b      	lsls	r3, r3, #16
 8004108:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800410c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	4313      	orrs	r3, r2
 8004116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800411a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	0d5b      	lsrs	r3, r3, #21
 8004126:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800412a:	4b08      	ldr	r3, [pc, #32]	; (800414c <I2C_TransferConfig+0x60>)
 800412c:	430b      	orrs	r3, r1
 800412e:	43db      	mvns	r3, r3
 8004130:	ea02 0103 	and.w	r1, r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800413e:	bf00      	nop
 8004140:	371c      	adds	r7, #28
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	03ff63ff 	.word	0x03ff63ff

08004150 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b20      	cmp	r3, #32
 8004164:	d138      	bne.n	80041d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004170:	2302      	movs	r3, #2
 8004172:	e032      	b.n	80041da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2224      	movs	r2, #36	; 0x24
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	e000      	b.n	80041da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041d8:	2302      	movs	r3, #2
  }
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d139      	bne.n	8004270 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004206:	2302      	movs	r3, #2
 8004208:	e033      	b.n	8004272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2224      	movs	r2, #36	; 0x24
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004238:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004270:	2302      	movs	r3, #2
  }
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800427e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004280:	b08b      	sub	sp, #44	; 0x2c
 8004282:	af06      	add	r7, sp, #24
 8004284:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0c4      	b.n	800441a <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7fd fb35 	bl	8001914 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2203      	movs	r2, #3
 80042ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f003 fad0 	bl	800785c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e040      	b.n	8004344 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	440b      	add	r3, r1
 80042d2:	3301      	adds	r3, #1
 80042d4:	2201      	movs	r2, #1
 80042d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	440b      	add	r3, r1
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	00db      	lsls	r3, r3, #3
 80042fa:	440b      	add	r3, r1
 80042fc:	3303      	adds	r3, #3
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004302:	7bfa      	ldrb	r2, [r7, #15]
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	440b      	add	r3, r1
 8004310:	3338      	adds	r3, #56	; 0x38
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004316:	7bfa      	ldrb	r2, [r7, #15]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	440b      	add	r3, r1
 8004324:	333c      	adds	r3, #60	; 0x3c
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	440b      	add	r3, r1
 8004338:	3340      	adds	r3, #64	; 0x40
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	3301      	adds	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d3b9      	bcc.n	80042c2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
 8004352:	e044      	b.n	80043de <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004366:	2200      	movs	r2, #0
 8004368:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800437c:	7bfa      	ldrb	r2, [r7, #15]
 800437e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	440b      	add	r3, r1
 800438e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	440b      	add	r3, r1
 80043ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	3301      	adds	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
 80043de:	7bfa      	ldrb	r2, [r7, #15]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d3b5      	bcc.n	8004354 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	687e      	ldr	r6, [r7, #4]
 80043f0:	466d      	mov	r5, sp
 80043f2:	f106 0410 	add.w	r4, r6, #16
 80043f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043fa:	6823      	ldr	r3, [r4, #0]
 80043fc:	602b      	str	r3, [r5, #0]
 80043fe:	1d33      	adds	r3, r6, #4
 8004400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004402:	6838      	ldr	r0, [r7, #0]
 8004404:	f003 fa45 	bl	8007892 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800442a:	af00      	add	r7, sp, #0
 800442c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004430:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004434:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f001 b823 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 817d 	beq.w	800475a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004460:	4bbc      	ldr	r3, [pc, #752]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f003 030c 	and.w	r3, r3, #12
 8004468:	2b04      	cmp	r3, #4
 800446a:	d00c      	beq.n	8004486 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800446c:	4bb9      	ldr	r3, [pc, #740]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b08      	cmp	r3, #8
 8004476:	d15c      	bne.n	8004532 <HAL_RCC_OscConfig+0x10e>
 8004478:	4bb6      	ldr	r3, [pc, #728]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d155      	bne.n	8004532 <HAL_RCC_OscConfig+0x10e>
 8004486:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800448a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800449a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449e:	fab3 f383 	clz	r3, r3
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	f043 0301 	orr.w	r3, r3, #1
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d102      	bne.n	80044b8 <HAL_RCC_OscConfig+0x94>
 80044b2:	4ba8      	ldr	r3, [pc, #672]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	e015      	b.n	80044e4 <HAL_RCC_OscConfig+0xc0>
 80044b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044bc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80044c4:	fa93 f3a3 	rbit	r3, r3
 80044c8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80044cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044d0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80044d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80044d8:	fa93 f3a3 	rbit	r3, r3
 80044dc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80044e0:	4b9c      	ldr	r3, [pc, #624]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044e8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80044ec:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80044f0:	fa92 f2a2 	rbit	r2, r2
 80044f4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80044f8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80044fc:	fab2 f282 	clz	r2, r2
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	f042 0220 	orr.w	r2, r2, #32
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	f002 021f 	and.w	r2, r2, #31
 800450c:	2101      	movs	r1, #1
 800450e:	fa01 f202 	lsl.w	r2, r1, r2
 8004512:	4013      	ands	r3, r2
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 811f 	beq.w	8004758 <HAL_RCC_OscConfig+0x334>
 800451a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f040 8116 	bne.w	8004758 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f000 bfaf 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004532:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004536:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x12e>
 8004544:	4b83      	ldr	r3, [pc, #524]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a82      	ldr	r2, [pc, #520]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e036      	b.n	80045c0 <HAL_RCC_OscConfig+0x19c>
 8004552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004556:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0x158>
 8004562:	4b7c      	ldr	r3, [pc, #496]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7b      	ldr	r2, [pc, #492]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b79      	ldr	r3, [pc, #484]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a78      	ldr	r2, [pc, #480]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e021      	b.n	80045c0 <HAL_RCC_OscConfig+0x19c>
 800457c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800458c:	d10c      	bne.n	80045a8 <HAL_RCC_OscConfig+0x184>
 800458e:	4b71      	ldr	r3, [pc, #452]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a70      	ldr	r2, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b6e      	ldr	r3, [pc, #440]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a6d      	ldr	r2, [pc, #436]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80045a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	e00b      	b.n	80045c0 <HAL_RCC_OscConfig+0x19c>
 80045a8:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a69      	ldr	r2, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4b67      	ldr	r3, [pc, #412]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a66      	ldr	r2, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80045ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045be:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045c0:	4b64      	ldr	r3, [pc, #400]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f023 020f 	bic.w	r2, r3, #15
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	495f      	ldr	r1, [pc, #380]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d059      	beq.n	800469e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7fd fc7d 	bl	8001ee8 <HAL_GetTick>
 80045ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd fc78 	bl	8001ee8 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b64      	cmp	r3, #100	; 0x64
 8004602:	d902      	bls.n	800460a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	f000 bf43 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>
 800460a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800460e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004612:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004616:	fa93 f3a3 	rbit	r3, r3
 800461a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800461e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	fab3 f383 	clz	r3, r3
 8004626:	b2db      	uxtb	r3, r3
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b01      	cmp	r3, #1
 8004634:	d102      	bne.n	800463c <HAL_RCC_OscConfig+0x218>
 8004636:	4b47      	ldr	r3, [pc, #284]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	e015      	b.n	8004668 <HAL_RCC_OscConfig+0x244>
 800463c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004640:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004648:	fa93 f3a3 	rbit	r3, r3
 800464c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004654:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004658:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800465c:	fa93 f3a3 	rbit	r3, r3
 8004660:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004664:	4b3b      	ldr	r3, [pc, #236]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800466c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004670:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004674:	fa92 f2a2 	rbit	r2, r2
 8004678:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800467c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004680:	fab2 f282 	clz	r2, r2
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	f042 0220 	orr.w	r2, r2, #32
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	f002 021f 	and.w	r2, r2, #31
 8004690:	2101      	movs	r1, #1
 8004692:	fa01 f202 	lsl.w	r2, r1, r2
 8004696:	4013      	ands	r3, r2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ab      	beq.n	80045f4 <HAL_RCC_OscConfig+0x1d0>
 800469c:	e05d      	b.n	800475a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fd fc23 	bl	8001ee8 <HAL_GetTick>
 80046a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a6:	e00a      	b.n	80046be <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a8:	f7fd fc1e 	bl	8001ee8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b64      	cmp	r3, #100	; 0x64
 80046b6:	d902      	bls.n	80046be <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	f000 bee9 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>
 80046be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80046d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f043 0301 	orr.w	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d102      	bne.n	80046f0 <HAL_RCC_OscConfig+0x2cc>
 80046ea:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	e015      	b.n	800471c <HAL_RCC_OscConfig+0x2f8>
 80046f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046f4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004704:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004708:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800470c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004710:	fa93 f3a3 	rbit	r3, r3
 8004714:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004718:	4b0e      	ldr	r3, [pc, #56]	; (8004754 <HAL_RCC_OscConfig+0x330>)
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004720:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004724:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004728:	fa92 f2a2 	rbit	r2, r2
 800472c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004730:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004734:	fab2 f282 	clz	r2, r2
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	f042 0220 	orr.w	r2, r2, #32
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	f002 021f 	and.w	r2, r2, #31
 8004744:	2101      	movs	r1, #1
 8004746:	fa01 f202 	lsl.w	r2, r1, r2
 800474a:	4013      	ands	r3, r2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ab      	bne.n	80046a8 <HAL_RCC_OscConfig+0x284>
 8004750:	e003      	b.n	800475a <HAL_RCC_OscConfig+0x336>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800475a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800475e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 817d 	beq.w	8004a6a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004770:	4ba6      	ldr	r3, [pc, #664]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800477c:	4ba3      	ldr	r3, [pc, #652]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 030c 	and.w	r3, r3, #12
 8004784:	2b08      	cmp	r3, #8
 8004786:	d172      	bne.n	800486e <HAL_RCC_OscConfig+0x44a>
 8004788:	4ba0      	ldr	r3, [pc, #640]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d16c      	bne.n	800486e <HAL_RCC_OscConfig+0x44a>
 8004794:	2302      	movs	r3, #2
 8004796:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800479e:	fa93 f3a3 	rbit	r3, r3
 80047a2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80047a6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	095b      	lsrs	r3, r3, #5
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f043 0301 	orr.w	r3, r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d102      	bne.n	80047c4 <HAL_RCC_OscConfig+0x3a0>
 80047be:	4b93      	ldr	r3, [pc, #588]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	e013      	b.n	80047ec <HAL_RCC_OscConfig+0x3c8>
 80047c4:	2302      	movs	r3, #2
 80047c6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ca:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80047ce:	fa93 f3a3 	rbit	r3, r3
 80047d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80047d6:	2302      	movs	r3, #2
 80047d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80047dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80047e8:	4b88      	ldr	r3, [pc, #544]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2202      	movs	r2, #2
 80047ee:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80047f2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80047f6:	fa92 f2a2 	rbit	r2, r2
 80047fa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80047fe:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004802:	fab2 f282 	clz	r2, r2
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	f042 0220 	orr.w	r2, r2, #32
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	f002 021f 	and.w	r2, r2, #31
 8004812:	2101      	movs	r1, #1
 8004814:	fa01 f202 	lsl.w	r2, r1, r2
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_RCC_OscConfig+0x410>
 800481e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d002      	beq.n	8004834 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f000 be2e 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004834:	4b75      	ldr	r3, [pc, #468]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800483c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	21f8      	movs	r1, #248	; 0xf8
 800484a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004852:	fa91 f1a1 	rbit	r1, r1
 8004856:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800485a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800485e:	fab1 f181 	clz	r1, r1
 8004862:	b2c9      	uxtb	r1, r1
 8004864:	408b      	lsls	r3, r1
 8004866:	4969      	ldr	r1, [pc, #420]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486c:	e0fd      	b.n	8004a6a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800486e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004872:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8088 	beq.w	8004990 <HAL_RCC_OscConfig+0x56c>
 8004880:	2301      	movs	r3, #1
 8004882:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004892:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004896:	fab3 f383 	clz	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048a0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	461a      	mov	r2, r3
 80048a8:	2301      	movs	r3, #1
 80048aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7fd fb1c 	bl	8001ee8 <HAL_GetTick>
 80048b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048b6:	f7fd fb17 	bl	8001ee8 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d902      	bls.n	80048cc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	f000 bde2 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>
 80048cc:	2302      	movs	r3, #2
 80048ce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80048d6:	fa93 f3a3 	rbit	r3, r3
 80048da:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80048de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f043 0301 	orr.w	r3, r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d102      	bne.n	80048fc <HAL_RCC_OscConfig+0x4d8>
 80048f6:	4b45      	ldr	r3, [pc, #276]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	e013      	b.n	8004924 <HAL_RCC_OscConfig+0x500>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004902:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004906:	fa93 f3a3 	rbit	r3, r3
 800490a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800490e:	2302      	movs	r3, #2
 8004910:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004914:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004920:	4b3a      	ldr	r3, [pc, #232]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	2202      	movs	r2, #2
 8004926:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800492a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800492e:	fa92 f2a2 	rbit	r2, r2
 8004932:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004936:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800493a:	fab2 f282 	clz	r2, r2
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	f042 0220 	orr.w	r2, r2, #32
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	f002 021f 	and.w	r2, r2, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0af      	beq.n	80048b6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	4b2d      	ldr	r3, [pc, #180]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	21f8      	movs	r1, #248	; 0xf8
 800496c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004974:	fa91 f1a1 	rbit	r1, r1
 8004978:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800497c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004980:	fab1 f181 	clz	r1, r1
 8004984:	b2c9      	uxtb	r1, r1
 8004986:	408b      	lsls	r3, r1
 8004988:	4920      	ldr	r1, [pc, #128]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]
 800498e:	e06c      	b.n	8004a6a <HAL_RCC_OscConfig+0x646>
 8004990:	2301      	movs	r3, #1
 8004992:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80049a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	461a      	mov	r2, r3
 80049b8:	2300      	movs	r3, #0
 80049ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fd fa94 	bl	8001ee8 <HAL_GetTick>
 80049c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c4:	e00a      	b.n	80049dc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c6:	f7fd fa8f 	bl	8001ee8 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d902      	bls.n	80049dc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	f000 bd5a 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>
 80049dc:	2302      	movs	r3, #2
 80049de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80049ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f2:	fab3 f383 	clz	r3, r3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	095b      	lsrs	r3, r3, #5
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d104      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5ec>
 8004a06:	4b01      	ldr	r3, [pc, #4]	; (8004a0c <HAL_RCC_OscConfig+0x5e8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	e015      	b.n	8004a38 <HAL_RCC_OscConfig+0x614>
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	2302      	movs	r3, #2
 8004a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a1a:	fa93 f3a3 	rbit	r3, r3
 8004a1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004a22:	2302      	movs	r3, #2
 8004a24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a34:	4bc8      	ldr	r3, [pc, #800]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004a3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004a42:	fa92 f2a2 	rbit	r2, r2
 8004a46:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004a4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004a4e:	fab2 f282 	clz	r2, r2
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	f042 0220 	orr.w	r2, r2, #32
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	f002 021f 	and.w	r2, r2, #31
 8004a5e:	2101      	movs	r1, #1
 8004a60:	fa01 f202 	lsl.w	r2, r1, r2
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1ad      	bne.n	80049c6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 8110 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d079      	beq.n	8004b84 <HAL_RCC_OscConfig+0x760>
 8004a90:	2301      	movs	r3, #1
 8004a92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004a9a:	fa93 f3a3 	rbit	r3, r3
 8004a9e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa6:	fab3 f383 	clz	r3, r3
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	461a      	mov	r2, r3
 8004aae:	4bab      	ldr	r3, [pc, #684]	; (8004d5c <HAL_RCC_OscConfig+0x938>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aba:	f7fd fa15 	bl	8001ee8 <HAL_GetTick>
 8004abe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac4:	f7fd fa10 	bl	8001ee8 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d902      	bls.n	8004ada <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	f000 bcdb 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>
 8004ada:	2302      	movs	r3, #2
 8004adc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004ae4:	fa93 f3a3 	rbit	r3, r3
 8004ae8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004af0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004af4:	2202      	movs	r2, #2
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004afc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	fa93 f2a3 	rbit	r2, r3
 8004b06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b18:	2202      	movs	r2, #2
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	fa93 f2a3 	rbit	r2, r3
 8004b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b2e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b32:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b34:	4b88      	ldr	r3, [pc, #544]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b3c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b40:	2102      	movs	r1, #2
 8004b42:	6019      	str	r1, [r3, #0]
 8004b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	fa93 f1a3 	rbit	r1, r3
 8004b52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b56:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b5a:	6019      	str	r1, [r3, #0]
  return result;
 8004b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b60:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 031f 	and.w	r3, r3, #31
 8004b76:	2101      	movs	r1, #1
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d0a0      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x6a0>
 8004b82:	e08d      	b.n	8004ca0 <HAL_RCC_OscConfig+0x87c>
 8004b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b88:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b94:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	fa93 f2a3 	rbit	r2, r3
 8004b9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004ba6:	601a      	str	r2, [r3, #0]
  return result;
 8004ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004bb0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	461a      	mov	r2, r3
 8004bba:	4b68      	ldr	r3, [pc, #416]	; (8004d5c <HAL_RCC_OscConfig+0x938>)
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc6:	f7fd f98f 	bl	8001ee8 <HAL_GetTick>
 8004bca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd0:	f7fd f98a 	bl	8001ee8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d902      	bls.n	8004be6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	f000 bc55 	b.w	8005490 <HAL_RCC_OscConfig+0x106c>
 8004be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bea:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bee:	2202      	movs	r2, #2
 8004bf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	fa93 f2a3 	rbit	r2, r3
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c0e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c12:	2202      	movs	r2, #2
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	fa93 f2a3 	rbit	r2, r3
 8004c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c36:	2202      	movs	r2, #2
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	fa93 f2a3 	rbit	r2, r3
 8004c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004c50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c52:	4b41      	ldr	r3, [pc, #260]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c5a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004c5e:	2102      	movs	r1, #2
 8004c60:	6019      	str	r1, [r3, #0]
 8004c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c66:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	fa93 f1a3 	rbit	r1, r3
 8004c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c74:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c78:	6019      	str	r1, [r3, #0]
  return result;
 8004c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c7e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	fab3 f383 	clz	r3, r3
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2101      	movs	r1, #1
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d197      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 81a1 	beq.w	8004ff8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cbc:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d116      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc8:	4b23      	ldr	r3, [pc, #140]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	4a22      	ldr	r2, [pc, #136]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	61d3      	str	r3, [r2, #28]
 8004cd4:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cea:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004cee:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf6:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <HAL_RCC_OscConfig+0x93c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11a      	bne.n	8004d38 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <HAL_RCC_OscConfig+0x93c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <HAL_RCC_OscConfig+0x93c>)
 8004d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d0e:	f7fd f8eb 	bl	8001ee8 <HAL_GetTick>
 8004d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d16:	e009      	b.n	8004d2c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d18:	f7fd f8e6 	bl	8001ee8 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b64      	cmp	r3, #100	; 0x64
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e3b1      	b.n	8005490 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_RCC_OscConfig+0x93c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0ef      	beq.n	8004d18 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d10d      	bne.n	8004d64 <HAL_RCC_OscConfig+0x940>
 8004d48:	4b03      	ldr	r3, [pc, #12]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4a02      	ldr	r2, [pc, #8]	; (8004d58 <HAL_RCC_OscConfig+0x934>)
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	6213      	str	r3, [r2, #32]
 8004d54:	e03c      	b.n	8004dd0 <HAL_RCC_OscConfig+0x9ac>
 8004d56:	bf00      	nop
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	10908120 	.word	0x10908120
 8004d60:	40007000 	.word	0x40007000
 8004d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10c      	bne.n	8004d8e <HAL_RCC_OscConfig+0x96a>
 8004d74:	4bc1      	ldr	r3, [pc, #772]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	4ac0      	ldr	r2, [pc, #768]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	6213      	str	r3, [r2, #32]
 8004d80:	4bbe      	ldr	r3, [pc, #760]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	4abd      	ldr	r2, [pc, #756]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004d86:	f023 0304 	bic.w	r3, r3, #4
 8004d8a:	6213      	str	r3, [r2, #32]
 8004d8c:	e020      	b.n	8004dd0 <HAL_RCC_OscConfig+0x9ac>
 8004d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x994>
 8004d9e:	4bb7      	ldr	r3, [pc, #732]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	4ab6      	ldr	r2, [pc, #728]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004da4:	f043 0304 	orr.w	r3, r3, #4
 8004da8:	6213      	str	r3, [r2, #32]
 8004daa:	4bb4      	ldr	r3, [pc, #720]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	4ab3      	ldr	r2, [pc, #716]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6213      	str	r3, [r2, #32]
 8004db6:	e00b      	b.n	8004dd0 <HAL_RCC_OscConfig+0x9ac>
 8004db8:	4bb0      	ldr	r3, [pc, #704]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	4aaf      	ldr	r2, [pc, #700]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004dbe:	f023 0301 	bic.w	r3, r3, #1
 8004dc2:	6213      	str	r3, [r2, #32]
 8004dc4:	4bad      	ldr	r3, [pc, #692]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4aac      	ldr	r2, [pc, #688]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004dca:	f023 0304 	bic.w	r3, r3, #4
 8004dce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004dd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 8081 	beq.w	8004ee4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de2:	f7fd f881 	bl	8001ee8 <HAL_GetTick>
 8004de6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dea:	e00b      	b.n	8004e04 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dec:	f7fd f87c 	bl	8001ee8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e345      	b.n	8005490 <HAL_RCC_OscConfig+0x106c>
 8004e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e08:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	fa93 f2a3 	rbit	r2, r3
 8004e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e22:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004e30:	2202      	movs	r2, #2
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	fa93 f2a3 	rbit	r2, r3
 8004e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e46:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004e4a:	601a      	str	r2, [r3, #0]
  return result;
 8004e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e50:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004e54:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e56:	fab3 f383 	clz	r3, r3
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d102      	bne.n	8004e70 <HAL_RCC_OscConfig+0xa4c>
 8004e6a:	4b84      	ldr	r3, [pc, #528]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	e013      	b.n	8004e98 <HAL_RCC_OscConfig+0xa74>
 8004e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e74:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e78:	2202      	movs	r2, #2
 8004e7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	fa93 f2a3 	rbit	r2, r3
 8004e8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e8e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	4b79      	ldr	r3, [pc, #484]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004e9c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004ea0:	2102      	movs	r1, #2
 8004ea2:	6011      	str	r1, [r2, #0]
 8004ea4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ea8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	fa92 f1a2 	rbit	r1, r2
 8004eb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004eb6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004eba:	6011      	str	r1, [r2, #0]
  return result;
 8004ebc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ec0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	fab2 f282 	clz	r2, r2
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	f002 021f 	and.w	r2, r2, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8004edc:	4013      	ands	r3, r2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d084      	beq.n	8004dec <HAL_RCC_OscConfig+0x9c8>
 8004ee2:	e07f      	b.n	8004fe4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee4:	f7fd f800 	bl	8001ee8 <HAL_GetTick>
 8004ee8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eec:	e00b      	b.n	8004f06 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eee:	f7fc fffb 	bl	8001ee8 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e2c4      	b.n	8005490 <HAL_RCC_OscConfig+0x106c>
 8004f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f0a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004f0e:	2202      	movs	r2, #2
 8004f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	fa93 f2a3 	rbit	r2, r3
 8004f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f24:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f2e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004f32:	2202      	movs	r2, #2
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	fa93 f2a3 	rbit	r2, r3
 8004f44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f48:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f4c:	601a      	str	r2, [r3, #0]
  return result;
 8004f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f52:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004f56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f58:	fab3 f383 	clz	r3, r3
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	f043 0302 	orr.w	r3, r3, #2
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d102      	bne.n	8004f72 <HAL_RCC_OscConfig+0xb4e>
 8004f6c:	4b43      	ldr	r3, [pc, #268]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	e013      	b.n	8004f9a <HAL_RCC_OscConfig+0xb76>
 8004f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f76:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	fa93 f2a3 	rbit	r2, r3
 8004f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f90:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	4b39      	ldr	r3, [pc, #228]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f9e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004faa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	fa92 f1a2 	rbit	r1, r2
 8004fb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fb8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004fbc:	6011      	str	r1, [r2, #0]
  return result;
 8004fbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004fc2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	fab2 f282 	clz	r2, r2
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	f002 021f 	and.w	r2, r2, #31
 8004fd8:	2101      	movs	r1, #1
 8004fda:	fa01 f202 	lsl.w	r2, r1, r2
 8004fde:	4013      	ands	r3, r2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d184      	bne.n	8004eee <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004fe4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fec:	4b23      	ldr	r3, [pc, #140]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 8004ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ff8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ffc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8242 	beq.w	800548e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800500a:	4b1c      	ldr	r3, [pc, #112]	; (800507c <HAL_RCC_OscConfig+0xc58>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 030c 	and.w	r3, r3, #12
 8005012:	2b08      	cmp	r3, #8
 8005014:	f000 8213 	beq.w	800543e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800501c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2b02      	cmp	r3, #2
 8005026:	f040 8162 	bne.w	80052ee <HAL_RCC_OscConfig+0xeca>
 800502a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800502e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005032:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800503c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	fa93 f2a3 	rbit	r2, r3
 8005046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800504a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800504e:	601a      	str	r2, [r3, #0]
  return result;
 8005050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005054:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005058:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505a:	fab3 f383 	clz	r3, r3
 800505e:	b2db      	uxtb	r3, r3
 8005060:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005064:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	461a      	mov	r2, r3
 800506c:	2300      	movs	r3, #0
 800506e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005070:	f7fc ff3a 	bl	8001ee8 <HAL_GetTick>
 8005074:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005078:	e00c      	b.n	8005094 <HAL_RCC_OscConfig+0xc70>
 800507a:	bf00      	nop
 800507c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005080:	f7fc ff32 	bl	8001ee8 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e1fd      	b.n	8005490 <HAL_RCC_OscConfig+0x106c>
 8005094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005098:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800509c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050a6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	fa93 f2a3 	rbit	r2, r3
 80050b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050b4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80050b8:	601a      	str	r2, [r3, #0]
  return result;
 80050ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050be:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80050c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c4:	fab3 f383 	clz	r3, r3
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d102      	bne.n	80050de <HAL_RCC_OscConfig+0xcba>
 80050d8:	4bb0      	ldr	r3, [pc, #704]	; (800539c <HAL_RCC_OscConfig+0xf78>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	e027      	b.n	800512e <HAL_RCC_OscConfig+0xd0a>
 80050de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050e2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80050e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80050ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	fa93 f2a3 	rbit	r2, r3
 80050fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80050fe:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005108:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800510c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005116:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	fa93 f2a3 	rbit	r2, r3
 8005120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005124:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	4b9c      	ldr	r3, [pc, #624]	; (800539c <HAL_RCC_OscConfig+0xf78>)
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005132:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005136:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800513a:	6011      	str	r1, [r2, #0]
 800513c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005140:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	fa92 f1a2 	rbit	r1, r2
 800514a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800514e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005152:	6011      	str	r1, [r2, #0]
  return result;
 8005154:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005158:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	fab2 f282 	clz	r2, r2
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	f042 0220 	orr.w	r2, r2, #32
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	f002 021f 	and.w	r2, r2, #31
 800516e:	2101      	movs	r1, #1
 8005170:	fa01 f202 	lsl.w	r2, r1, r2
 8005174:	4013      	ands	r3, r2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d182      	bne.n	8005080 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800517a:	4b88      	ldr	r3, [pc, #544]	; (800539c <HAL_RCC_OscConfig+0xf78>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005186:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800518e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005192:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	430b      	orrs	r3, r1
 800519c:	497f      	ldr	r1, [pc, #508]	; (800539c <HAL_RCC_OscConfig+0xf78>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	604b      	str	r3, [r1, #4]
 80051a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051a6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80051aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051b4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	fa93 f2a3 	rbit	r2, r3
 80051be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051c2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80051c6:	601a      	str	r2, [r3, #0]
  return result;
 80051c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80051cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80051d0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d2:	fab3 f383 	clz	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80051dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	2301      	movs	r3, #1
 80051e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fc fe7e 	bl	8001ee8 <HAL_GetTick>
 80051ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80051f0:	e009      	b.n	8005206 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fc fe79 	bl	8001ee8 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e144      	b.n	8005490 <HAL_RCC_OscConfig+0x106c>
 8005206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800520a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800520e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005218:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	fa93 f2a3 	rbit	r2, r3
 8005222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005226:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800522a:	601a      	str	r2, [r3, #0]
  return result;
 800522c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005230:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_RCC_OscConfig+0xe2c>
 800524a:	4b54      	ldr	r3, [pc, #336]	; (800539c <HAL_RCC_OscConfig+0xf78>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	e027      	b.n	80052a0 <HAL_RCC_OscConfig+0xe7c>
 8005250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005254:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005258:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800525c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800525e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005262:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	fa93 f2a3 	rbit	r2, r3
 800526c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005270:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800527a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800527e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005288:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	fa93 f2a3 	rbit	r2, r3
 8005292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005296:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	4b3f      	ldr	r3, [pc, #252]	; (800539c <HAL_RCC_OscConfig+0xf78>)
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052a4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80052a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052ac:	6011      	str	r1, [r2, #0]
 80052ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052b2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	fa92 f1a2 	rbit	r1, r2
 80052bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052c0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80052c4:	6011      	str	r1, [r2, #0]
  return result;
 80052c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80052ca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	fab2 f282 	clz	r2, r2
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	f042 0220 	orr.w	r2, r2, #32
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	f002 021f 	and.w	r2, r2, #31
 80052e0:	2101      	movs	r1, #1
 80052e2:	fa01 f202 	lsl.w	r2, r1, r2
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d082      	beq.n	80051f2 <HAL_RCC_OscConfig+0xdce>
 80052ec:	e0cf      	b.n	800548e <HAL_RCC_OscConfig+0x106a>
 80052ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80052f2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80052f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80052fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005300:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	fa93 f2a3 	rbit	r2, r3
 800530a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800530e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005312:	601a      	str	r2, [r3, #0]
  return result;
 8005314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005318:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800531c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531e:	fab3 f383 	clz	r3, r3
 8005322:	b2db      	uxtb	r3, r3
 8005324:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005328:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	461a      	mov	r2, r3
 8005330:	2300      	movs	r3, #0
 8005332:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005334:	f7fc fdd8 	bl	8001ee8 <HAL_GetTick>
 8005338:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800533c:	e009      	b.n	8005352 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533e:	f7fc fdd3 	bl	8001ee8 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e09e      	b.n	8005490 <HAL_RCC_OscConfig+0x106c>
 8005352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005356:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800535a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800535e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005364:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	fa93 f2a3 	rbit	r2, r3
 800536e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005372:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005376:	601a      	str	r2, [r3, #0]
  return result;
 8005378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800537c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005380:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005382:	fab3 f383 	clz	r3, r3
 8005386:	b2db      	uxtb	r3, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b01      	cmp	r3, #1
 8005394:	d104      	bne.n	80053a0 <HAL_RCC_OscConfig+0xf7c>
 8005396:	4b01      	ldr	r3, [pc, #4]	; (800539c <HAL_RCC_OscConfig+0xf78>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	e029      	b.n	80053f0 <HAL_RCC_OscConfig+0xfcc>
 800539c:	40021000 	.word	0x40021000
 80053a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053a4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80053a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053b2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	fa93 f2a3 	rbit	r2, r3
 80053bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053ca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80053ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053d8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	fa93 f2a3 	rbit	r2, r3
 80053e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80053e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	4b2b      	ldr	r3, [pc, #172]	; (800549c <HAL_RCC_OscConfig+0x1078>)
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80053f4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80053f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005402:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8005406:	6812      	ldr	r2, [r2, #0]
 8005408:	fa92 f1a2 	rbit	r1, r2
 800540c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8005410:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005414:	6011      	str	r1, [r2, #0]
  return result;
 8005416:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800541a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	fab2 f282 	clz	r2, r2
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	f042 0220 	orr.w	r2, r2, #32
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	f002 021f 	and.w	r2, r2, #31
 8005430:	2101      	movs	r1, #1
 8005432:	fa01 f202 	lsl.w	r2, r1, r2
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d180      	bne.n	800533e <HAL_RCC_OscConfig+0xf1a>
 800543c:	e027      	b.n	800548e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800543e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005442:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d101      	bne.n	8005452 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e01e      	b.n	8005490 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005452:	4b12      	ldr	r3, [pc, #72]	; (800549c <HAL_RCC_OscConfig+0x1078>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800545a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800545e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005466:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	429a      	cmp	r2, r3
 8005470:	d10b      	bne.n	800548a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005472:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005476:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800547a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800547e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005486:	429a      	cmp	r2, r3
 8005488:	d001      	beq.n	800548e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e000      	b.n	8005490 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	40021000 	.word	0x40021000

080054a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b09e      	sub	sp, #120	; 0x78
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e162      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b8:	4b90      	ldr	r3, [pc, #576]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d910      	bls.n	80054e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c6:	4b8d      	ldr	r3, [pc, #564]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f023 0207 	bic.w	r2, r3, #7
 80054ce:	498b      	ldr	r1, [pc, #556]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d6:	4b89      	ldr	r3, [pc, #548]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d001      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e14a      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0302 	and.w	r3, r3, #2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f4:	4b82      	ldr	r3, [pc, #520]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	497f      	ldr	r1, [pc, #508]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 8005502:	4313      	orrs	r3, r2
 8005504:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80dc 	beq.w	80056cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d13c      	bne.n	8005596 <HAL_RCC_ClockConfig+0xf6>
 800551c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005520:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005524:	fa93 f3a3 	rbit	r3, r3
 8005528:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552c:	fab3 f383 	clz	r3, r3
 8005530:	b2db      	uxtb	r3, r3
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	b2db      	uxtb	r3, r3
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d102      	bne.n	8005546 <HAL_RCC_ClockConfig+0xa6>
 8005540:	4b6f      	ldr	r3, [pc, #444]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	e00f      	b.n	8005566 <HAL_RCC_ClockConfig+0xc6>
 8005546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800554a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800554e:	fa93 f3a3 	rbit	r3, r3
 8005552:	667b      	str	r3, [r7, #100]	; 0x64
 8005554:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005558:	663b      	str	r3, [r7, #96]	; 0x60
 800555a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800555c:	fa93 f3a3 	rbit	r3, r3
 8005560:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005562:	4b67      	ldr	r3, [pc, #412]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800556a:	65ba      	str	r2, [r7, #88]	; 0x58
 800556c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800556e:	fa92 f2a2 	rbit	r2, r2
 8005572:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005576:	fab2 f282 	clz	r2, r2
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	f042 0220 	orr.w	r2, r2, #32
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	f002 021f 	and.w	r2, r2, #31
 8005586:	2101      	movs	r1, #1
 8005588:	fa01 f202 	lsl.w	r2, r1, r2
 800558c:	4013      	ands	r3, r2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d17b      	bne.n	800568a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e0f3      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d13c      	bne.n	8005618 <HAL_RCC_ClockConfig+0x178>
 800559e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a6:	fa93 f3a3 	rbit	r3, r3
 80055aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80055ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ae:	fab3 f383 	clz	r3, r3
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d102      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x128>
 80055c2:	4b4f      	ldr	r3, [pc, #316]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	e00f      	b.n	80055e8 <HAL_RCC_ClockConfig+0x148>
 80055c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d0:	fa93 f3a3 	rbit	r3, r3
 80055d4:	647b      	str	r3, [r7, #68]	; 0x44
 80055d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055da:	643b      	str	r3, [r7, #64]	; 0x40
 80055dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055de:	fa93 f3a3 	rbit	r3, r3
 80055e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e4:	4b46      	ldr	r3, [pc, #280]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80055ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f0:	fa92 f2a2 	rbit	r2, r2
 80055f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80055f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055f8:	fab2 f282 	clz	r2, r2
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	f042 0220 	orr.w	r2, r2, #32
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	f002 021f 	and.w	r2, r2, #31
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f202 	lsl.w	r2, r1, r2
 800560e:	4013      	ands	r3, r2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d13a      	bne.n	800568a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0b2      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
 8005618:	2302      	movs	r3, #2
 800561a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	fa93 f3a3 	rbit	r3, r3
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	fab3 f383 	clz	r3, r3
 800562a:	b2db      	uxtb	r3, r3
 800562c:	095b      	lsrs	r3, r3, #5
 800562e:	b2db      	uxtb	r3, r3
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b01      	cmp	r3, #1
 8005638:	d102      	bne.n	8005640 <HAL_RCC_ClockConfig+0x1a0>
 800563a:	4b31      	ldr	r3, [pc, #196]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	e00d      	b.n	800565c <HAL_RCC_ClockConfig+0x1bc>
 8005640:	2302      	movs	r3, #2
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	fa93 f3a3 	rbit	r3, r3
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
 800564c:	2302      	movs	r3, #2
 800564e:	623b      	str	r3, [r7, #32]
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	fa93 f3a3 	rbit	r3, r3
 8005656:	61fb      	str	r3, [r7, #28]
 8005658:	4b29      	ldr	r3, [pc, #164]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2202      	movs	r2, #2
 800565e:	61ba      	str	r2, [r7, #24]
 8005660:	69ba      	ldr	r2, [r7, #24]
 8005662:	fa92 f2a2 	rbit	r2, r2
 8005666:	617a      	str	r2, [r7, #20]
  return result;
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	fab2 f282 	clz	r2, r2
 800566e:	b2d2      	uxtb	r2, r2
 8005670:	f042 0220 	orr.w	r2, r2, #32
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	f002 021f 	and.w	r2, r2, #31
 800567a:	2101      	movs	r1, #1
 800567c:	fa01 f202 	lsl.w	r2, r1, r2
 8005680:	4013      	ands	r3, r2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e079      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800568a:	4b1d      	ldr	r3, [pc, #116]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f023 0203 	bic.w	r2, r3, #3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	491a      	ldr	r1, [pc, #104]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 8005698:	4313      	orrs	r3, r2
 800569a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800569c:	f7fc fc24 	bl	8001ee8 <HAL_GetTick>
 80056a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a2:	e00a      	b.n	80056ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056a4:	f7fc fc20 	bl	8001ee8 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d901      	bls.n	80056ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e061      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ba:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_RCC_ClockConfig+0x260>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f003 020c 	and.w	r2, r3, #12
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d1eb      	bne.n	80056a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0307 	and.w	r3, r3, #7
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d214      	bcs.n	8005704 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056da:	4b08      	ldr	r3, [pc, #32]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f023 0207 	bic.w	r2, r3, #7
 80056e2:	4906      	ldr	r1, [pc, #24]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ea:	4b04      	ldr	r3, [pc, #16]	; (80056fc <HAL_RCC_ClockConfig+0x25c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e040      	b.n	800577e <HAL_RCC_ClockConfig+0x2de>
 80056fc:	40022000 	.word	0x40022000
 8005700:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d008      	beq.n	8005722 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005710:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	491a      	ldr	r1, [pc, #104]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 800571e:	4313      	orrs	r3, r2
 8005720:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572e:	4b16      	ldr	r3, [pc, #88]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4912      	ldr	r1, [pc, #72]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 800573e:	4313      	orrs	r3, r2
 8005740:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005742:	f000 f829 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005746:	4601      	mov	r1, r0
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_RCC_ClockConfig+0x2e8>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005750:	22f0      	movs	r2, #240	; 0xf0
 8005752:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	fa92 f2a2 	rbit	r2, r2
 800575a:	60fa      	str	r2, [r7, #12]
  return result;
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	fab2 f282 	clz	r2, r2
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	40d3      	lsrs	r3, r2
 8005766:	4a09      	ldr	r2, [pc, #36]	; (800578c <HAL_RCC_ClockConfig+0x2ec>)
 8005768:	5cd3      	ldrb	r3, [r2, r3]
 800576a:	fa21 f303 	lsr.w	r3, r1, r3
 800576e:	4a08      	ldr	r2, [pc, #32]	; (8005790 <HAL_RCC_ClockConfig+0x2f0>)
 8005770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <HAL_RCC_ClockConfig+0x2f4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fc fb72 	bl	8001e60 <HAL_InitTick>
  
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3778      	adds	r7, #120	; 0x78
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	40021000 	.word	0x40021000
 800578c:	080082d8 	.word	0x080082d8
 8005790:	2000004c 	.word	0x2000004c
 8005794:	20000080 	.word	0x20000080

08005798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005798:	b480      	push	{r7}
 800579a:	b08b      	sub	sp, #44	; 0x2c
 800579c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	2300      	movs	r3, #0
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80057b2:	4b29      	ldr	r3, [pc, #164]	; (8005858 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d002      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x30>
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d003      	beq.n	80057ce <HAL_RCC_GetSysClockFreq+0x36>
 80057c6:	e03c      	b.n	8005842 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057c8:	4b24      	ldr	r3, [pc, #144]	; (800585c <HAL_RCC_GetSysClockFreq+0xc4>)
 80057ca:	623b      	str	r3, [r7, #32]
      break;
 80057cc:	e03c      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80057d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80057d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	fa92 f2a2 	rbit	r2, r2
 80057e0:	607a      	str	r2, [r7, #4]
  return result;
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	fab2 f282 	clz	r2, r2
 80057e8:	b2d2      	uxtb	r2, r2
 80057ea:	40d3      	lsrs	r3, r2
 80057ec:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <HAL_RCC_GetSysClockFreq+0xc8>)
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80057f2:	4b19      	ldr	r3, [pc, #100]	; (8005858 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	220f      	movs	r2, #15
 80057fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	fa92 f2a2 	rbit	r2, r2
 8005804:	60fa      	str	r2, [r7, #12]
  return result;
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	fab2 f282 	clz	r2, r2
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	40d3      	lsrs	r3, r2
 8005810:	4a14      	ldr	r2, [pc, #80]	; (8005864 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005812:	5cd3      	ldrb	r3, [r2, r3]
 8005814:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005820:	4a0e      	ldr	r2, [pc, #56]	; (800585c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	fbb2 f2f3 	udiv	r2, r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
 8005830:	e004      	b.n	800583c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4a0c      	ldr	r2, [pc, #48]	; (8005868 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	623b      	str	r3, [r7, #32]
      break;
 8005840:	e002      	b.n	8005848 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005844:	623b      	str	r3, [r7, #32]
      break;
 8005846:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005848:	6a3b      	ldr	r3, [r7, #32]
}
 800584a:	4618      	mov	r0, r3
 800584c:	372c      	adds	r7, #44	; 0x2c
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000
 800585c:	007a1200 	.word	0x007a1200
 8005860:	080082e8 	.word	0x080082e8
 8005864:	080082f8 	.word	0x080082f8
 8005868:	003d0900 	.word	0x003d0900

0800586c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b092      	sub	sp, #72	; 0x48
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800587c:	2300      	movs	r3, #0
 800587e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80d4 	beq.w	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005890:	4b4e      	ldr	r3, [pc, #312]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10e      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800589c:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	4a4a      	ldr	r2, [pc, #296]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058a6:	61d3      	str	r3, [r2, #28]
 80058a8:	4b48      	ldr	r3, [pc, #288]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b0:	60bb      	str	r3, [r7, #8]
 80058b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ba:	4b45      	ldr	r3, [pc, #276]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d118      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058c6:	4b42      	ldr	r3, [pc, #264]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a41      	ldr	r2, [pc, #260]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058d2:	f7fc fb09 	bl	8001ee8 <HAL_GetTick>
 80058d6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058d8:	e008      	b.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058da:	f7fc fb05 	bl	8001ee8 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b64      	cmp	r3, #100	; 0x64
 80058e6:	d901      	bls.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e169      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ec:	4b38      	ldr	r3, [pc, #224]	; (80059d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058f8:	4b34      	ldr	r3, [pc, #208]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8084 	beq.w	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005912:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005914:	429a      	cmp	r2, r3
 8005916:	d07c      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005918:	4b2c      	ldr	r3, [pc, #176]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	fa93 f3a3 	rbit	r3, r3
 800592e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	461a      	mov	r2, r3
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	461a      	mov	r2, r3
 8005942:	2301      	movs	r3, #1
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800594a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594e:	fa93 f3a3 	rbit	r3, r3
 8005952:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005956:	fab3 f383 	clz	r3, r3
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	4b1d      	ldr	r3, [pc, #116]	; (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	461a      	mov	r2, r3
 8005966:	2300      	movs	r3, #0
 8005968:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800596a:	4a18      	ldr	r2, [pc, #96]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d04b      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597a:	f7fc fab5 	bl	8001ee8 <HAL_GetTick>
 800597e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005980:	e00a      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fc fab1 	bl	8001ee8 <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005990:	4293      	cmp	r3, r2
 8005992:	d901      	bls.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e113      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005998:	2302      	movs	r3, #2
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	fa93 f3a3 	rbit	r3, r3
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
 80059a4:	2302      	movs	r3, #2
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	fa93 f3a3 	rbit	r3, r3
 80059ae:	61fb      	str	r3, [r7, #28]
  return result;
 80059b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059b2:	fab3 f383 	clz	r3, r3
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f043 0302 	orr.w	r3, r3, #2
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d108      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80059c6:	4b01      	ldr	r3, [pc, #4]	; (80059cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	e00d      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40007000 	.word	0x40007000
 80059d4:	10908100 	.word	0x10908100
 80059d8:	2302      	movs	r3, #2
 80059da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	fa93 f3a3 	rbit	r3, r3
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	4b78      	ldr	r3, [pc, #480]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	2202      	movs	r2, #2
 80059ea:	613a      	str	r2, [r7, #16]
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	fa92 f2a2 	rbit	r2, r2
 80059f2:	60fa      	str	r2, [r7, #12]
  return result;
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	fab2 f282 	clz	r2, r2
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	f002 021f 	and.w	r2, r2, #31
 8005a06:	2101      	movs	r1, #1
 8005a08:	fa01 f202 	lsl.w	r2, r1, r2
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0b7      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005a12:	4b6d      	ldr	r3, [pc, #436]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	496a      	ldr	r1, [pc, #424]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005a24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d105      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a2c:	4b66      	ldr	r3, [pc, #408]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	4a65      	ldr	r2, [pc, #404]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a36:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a44:	4b60      	ldr	r3, [pc, #384]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f023 0203 	bic.w	r2, r3, #3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	495d      	ldr	r1, [pc, #372]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d008      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a62:	4b59      	ldr	r3, [pc, #356]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	4956      	ldr	r1, [pc, #344]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d008      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a80:	4b51      	ldr	r3, [pc, #324]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	494e      	ldr	r1, [pc, #312]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a9e:	4b4a      	ldr	r3, [pc, #296]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa2:	f023 0210 	bic.w	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	4947      	ldr	r1, [pc, #284]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d008      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005abc:	4b42      	ldr	r3, [pc, #264]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	493f      	ldr	r1, [pc, #252]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ada:	4b3b      	ldr	r3, [pc, #236]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ade:	f023 0220 	bic.w	r2, r3, #32
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	4938      	ldr	r1, [pc, #224]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d008      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005af8:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	4930      	ldr	r1, [pc, #192]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0310 	and.w	r3, r3, #16
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b16:	4b2c      	ldr	r3, [pc, #176]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	4929      	ldr	r1, [pc, #164]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d008      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005b34:	4b24      	ldr	r3, [pc, #144]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4921      	ldr	r1, [pc, #132]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d008      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	491a      	ldr	r1, [pc, #104]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005b70:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	4912      	ldr	r1, [pc, #72]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9a:	490b      	ldr	r1, [pc, #44]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	4903      	ldr	r1, [pc, #12]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3748      	adds	r7, #72	; 0x48
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000

08005bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e09d      	b.n	8005d1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d108      	bne.n	8005bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bee:	d009      	beq.n	8005c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	61da      	str	r2, [r3, #28]
 8005bf6:	e005      	b.n	8005c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fb fd7c 	bl	800171c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c44:	d902      	bls.n	8005c4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e002      	b.n	8005c52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c5a:	d007      	beq.n	8005c6c <HAL_SPI_Init+0xa0>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c64:	d002      	beq.n	8005c6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	f003 0301 	and.w	r3, r3, #1
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	ea42 0103 	orr.w	r1, r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	0c1b      	lsrs	r3, r3, #16
 8005cc8:	f003 0204 	and.w	r2, r3, #4
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	f003 0308 	and.w	r3, r3, #8
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ce8:	ea42 0103 	orr.w	r1, r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b082      	sub	sp, #8
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e049      	b.n	8005dc8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7fb fd29 	bl	80017a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4610      	mov	r0, r2
 8005d62:	f000 ff99 	bl	8006c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d001      	beq.n	8005de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e042      	b.n	8005e6e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a21      	ldr	r2, [pc, #132]	; (8005e7c <HAL_TIM_Base_Start+0xac>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_TIM_Base_Start+0x5c>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e02:	d013      	beq.n	8005e2c <HAL_TIM_Base_Start+0x5c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <HAL_TIM_Base_Start+0xb0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_TIM_Base_Start+0x5c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <HAL_TIM_Base_Start+0xb4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_TIM_Base_Start+0x5c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_TIM_Base_Start+0xb8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_TIM_Base_Start+0x5c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a19      	ldr	r2, [pc, #100]	; (8005e8c <HAL_TIM_Base_Start+0xbc>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d115      	bne.n	8005e58 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <HAL_TIM_Base_Start+0xc0>)
 8005e34:	4013      	ands	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b06      	cmp	r3, #6
 8005e3c:	d015      	beq.n	8005e6a <HAL_TIM_Base_Start+0x9a>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e44:	d011      	beq.n	8005e6a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f042 0201 	orr.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e56:	e008      	b.n	8005e6a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0201 	orr.w	r2, r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e000      	b.n	8005e6c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	00010007 	.word	0x00010007

08005e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e049      	b.n	8005f3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7fb fcd0 	bl	8001860 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	4610      	mov	r0, r2
 8005ed4:	f000 fee0 	bl	8006c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <HAL_TIM_PWM_Start+0x24>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	bf14      	ite	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	2300      	moveq	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	e03c      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x9e>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d109      	bne.n	8005f82 <HAL_TIM_PWM_Start+0x3e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	bf14      	ite	ne
 8005f7a:	2301      	movne	r3, #1
 8005f7c:	2300      	moveq	r3, #0
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	e02f      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x9e>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d109      	bne.n	8005f9c <HAL_TIM_PWM_Start+0x58>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	bf14      	ite	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	2300      	moveq	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	e022      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x9e>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d109      	bne.n	8005fb6 <HAL_TIM_PWM_Start+0x72>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	bf14      	ite	ne
 8005fae:	2301      	movne	r3, #1
 8005fb0:	2300      	moveq	r3, #0
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	e015      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x9e>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b10      	cmp	r3, #16
 8005fba:	d109      	bne.n	8005fd0 <HAL_TIM_PWM_Start+0x8c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	bf14      	ite	ne
 8005fc8:	2301      	movne	r3, #1
 8005fca:	2300      	moveq	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	e008      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x9e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	bf14      	ite	ne
 8005fdc:	2301      	movne	r3, #1
 8005fde:	2300      	moveq	r3, #0
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e097      	b.n	800611a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d104      	bne.n	8005ffa <HAL_TIM_PWM_Start+0xb6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ff8:	e023      	b.n	8006042 <HAL_TIM_PWM_Start+0xfe>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d104      	bne.n	800600a <HAL_TIM_PWM_Start+0xc6>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006008:	e01b      	b.n	8006042 <HAL_TIM_PWM_Start+0xfe>
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d104      	bne.n	800601a <HAL_TIM_PWM_Start+0xd6>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006018:	e013      	b.n	8006042 <HAL_TIM_PWM_Start+0xfe>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b0c      	cmp	r3, #12
 800601e:	d104      	bne.n	800602a <HAL_TIM_PWM_Start+0xe6>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006028:	e00b      	b.n	8006042 <HAL_TIM_PWM_Start+0xfe>
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	2b10      	cmp	r3, #16
 800602e:	d104      	bne.n	800603a <HAL_TIM_PWM_Start+0xf6>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006038:	e003      	b.n	8006042 <HAL_TIM_PWM_Start+0xfe>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2202      	movs	r2, #2
 800603e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2201      	movs	r2, #1
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fb42 	bl	80076d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a33      	ldr	r2, [pc, #204]	; (8006124 <HAL_TIM_PWM_Start+0x1e0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d013      	beq.n	8006082 <HAL_TIM_PWM_Start+0x13e>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a32      	ldr	r2, [pc, #200]	; (8006128 <HAL_TIM_PWM_Start+0x1e4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00e      	beq.n	8006082 <HAL_TIM_PWM_Start+0x13e>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a30      	ldr	r2, [pc, #192]	; (800612c <HAL_TIM_PWM_Start+0x1e8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d009      	beq.n	8006082 <HAL_TIM_PWM_Start+0x13e>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a2f      	ldr	r2, [pc, #188]	; (8006130 <HAL_TIM_PWM_Start+0x1ec>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d004      	beq.n	8006082 <HAL_TIM_PWM_Start+0x13e>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2d      	ldr	r2, [pc, #180]	; (8006134 <HAL_TIM_PWM_Start+0x1f0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d101      	bne.n	8006086 <HAL_TIM_PWM_Start+0x142>
 8006082:	2301      	movs	r3, #1
 8006084:	e000      	b.n	8006088 <HAL_TIM_PWM_Start+0x144>
 8006086:	2300      	movs	r3, #0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800609a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a20      	ldr	r2, [pc, #128]	; (8006124 <HAL_TIM_PWM_Start+0x1e0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d018      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x194>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ae:	d013      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x194>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a20      	ldr	r2, [pc, #128]	; (8006138 <HAL_TIM_PWM_Start+0x1f4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00e      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x194>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1f      	ldr	r2, [pc, #124]	; (800613c <HAL_TIM_PWM_Start+0x1f8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x194>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a17      	ldr	r2, [pc, #92]	; (8006128 <HAL_TIM_PWM_Start+0x1e4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_PWM_Start+0x194>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a16      	ldr	r2, [pc, #88]	; (800612c <HAL_TIM_PWM_Start+0x1e8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d115      	bne.n	8006104 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	4b18      	ldr	r3, [pc, #96]	; (8006140 <HAL_TIM_PWM_Start+0x1fc>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b06      	cmp	r3, #6
 80060e8:	d015      	beq.n	8006116 <HAL_TIM_PWM_Start+0x1d2>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f0:	d011      	beq.n	8006116 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0201 	orr.w	r2, r2, #1
 8006100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006102:	e008      	b.n	8006116 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0201 	orr.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e000      	b.n	8006118 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006116:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40013400 	.word	0x40013400
 800612c:	40014000 	.word	0x40014000
 8006130:	40014400 	.word	0x40014400
 8006134:	40014800 	.word	0x40014800
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800
 8006140:	00010007 	.word	0x00010007

08006144 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e049      	b.n	80061ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f841 	bl	80061f2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 fd88 	bl	8006c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
	...

08006208 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006212:	2300      	movs	r3, #0
 8006214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <HAL_TIM_IC_Start_IT+0x1e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006222:	b2db      	uxtb	r3, r3
 8006224:	e023      	b.n	800626e <HAL_TIM_IC_Start_IT+0x66>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b04      	cmp	r3, #4
 800622a:	d104      	bne.n	8006236 <HAL_TIM_IC_Start_IT+0x2e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006232:	b2db      	uxtb	r3, r3
 8006234:	e01b      	b.n	800626e <HAL_TIM_IC_Start_IT+0x66>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b08      	cmp	r3, #8
 800623a:	d104      	bne.n	8006246 <HAL_TIM_IC_Start_IT+0x3e>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006242:	b2db      	uxtb	r3, r3
 8006244:	e013      	b.n	800626e <HAL_TIM_IC_Start_IT+0x66>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b0c      	cmp	r3, #12
 800624a:	d104      	bne.n	8006256 <HAL_TIM_IC_Start_IT+0x4e>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006252:	b2db      	uxtb	r3, r3
 8006254:	e00b      	b.n	800626e <HAL_TIM_IC_Start_IT+0x66>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b10      	cmp	r3, #16
 800625a:	d104      	bne.n	8006266 <HAL_TIM_IC_Start_IT+0x5e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006262:	b2db      	uxtb	r3, r3
 8006264:	e003      	b.n	800626e <HAL_TIM_IC_Start_IT+0x66>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800626c:	b2db      	uxtb	r3, r3
 800626e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <HAL_TIM_IC_Start_IT+0x78>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800627c:	b2db      	uxtb	r3, r3
 800627e:	e013      	b.n	80062a8 <HAL_TIM_IC_Start_IT+0xa0>
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b04      	cmp	r3, #4
 8006284:	d104      	bne.n	8006290 <HAL_TIM_IC_Start_IT+0x88>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800628c:	b2db      	uxtb	r3, r3
 800628e:	e00b      	b.n	80062a8 <HAL_TIM_IC_Start_IT+0xa0>
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b08      	cmp	r3, #8
 8006294:	d104      	bne.n	80062a0 <HAL_TIM_IC_Start_IT+0x98>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800629c:	b2db      	uxtb	r3, r3
 800629e:	e003      	b.n	80062a8 <HAL_TIM_IC_Start_IT+0xa0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d102      	bne.n	80062b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80062b0:	7b7b      	ldrb	r3, [r7, #13]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d001      	beq.n	80062ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e0d8      	b.n	800646c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <HAL_TIM_IC_Start_IT+0xc2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062c8:	e023      	b.n	8006312 <HAL_TIM_IC_Start_IT+0x10a>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d104      	bne.n	80062da <HAL_TIM_IC_Start_IT+0xd2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2202      	movs	r2, #2
 80062d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062d8:	e01b      	b.n	8006312 <HAL_TIM_IC_Start_IT+0x10a>
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d104      	bne.n	80062ea <HAL_TIM_IC_Start_IT+0xe2>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062e8:	e013      	b.n	8006312 <HAL_TIM_IC_Start_IT+0x10a>
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b0c      	cmp	r3, #12
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_IC_Start_IT+0xf2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062f8:	e00b      	b.n	8006312 <HAL_TIM_IC_Start_IT+0x10a>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b10      	cmp	r3, #16
 80062fe:	d104      	bne.n	800630a <HAL_TIM_IC_Start_IT+0x102>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006308:	e003      	b.n	8006312 <HAL_TIM_IC_Start_IT+0x10a>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d104      	bne.n	8006322 <HAL_TIM_IC_Start_IT+0x11a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006320:	e013      	b.n	800634a <HAL_TIM_IC_Start_IT+0x142>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	2b04      	cmp	r3, #4
 8006326:	d104      	bne.n	8006332 <HAL_TIM_IC_Start_IT+0x12a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006330:	e00b      	b.n	800634a <HAL_TIM_IC_Start_IT+0x142>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b08      	cmp	r3, #8
 8006336:	d104      	bne.n	8006342 <HAL_TIM_IC_Start_IT+0x13a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006340:	e003      	b.n	800634a <HAL_TIM_IC_Start_IT+0x142>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2202      	movs	r2, #2
 8006346:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b0c      	cmp	r3, #12
 800634e:	d841      	bhi.n	80063d4 <HAL_TIM_IC_Start_IT+0x1cc>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <HAL_TIM_IC_Start_IT+0x150>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	0800638d 	.word	0x0800638d
 800635c:	080063d5 	.word	0x080063d5
 8006360:	080063d5 	.word	0x080063d5
 8006364:	080063d5 	.word	0x080063d5
 8006368:	0800639f 	.word	0x0800639f
 800636c:	080063d5 	.word	0x080063d5
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063d5 	.word	0x080063d5
 8006378:	080063b1 	.word	0x080063b1
 800637c:	080063d5 	.word	0x080063d5
 8006380:	080063d5 	.word	0x080063d5
 8006384:	080063d5 	.word	0x080063d5
 8006388:	080063c3 	.word	0x080063c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0202 	orr.w	r2, r2, #2
 800639a:	60da      	str	r2, [r3, #12]
      break;
 800639c:	e01d      	b.n	80063da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0204 	orr.w	r2, r2, #4
 80063ac:	60da      	str	r2, [r3, #12]
      break;
 80063ae:	e014      	b.n	80063da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0208 	orr.w	r2, r2, #8
 80063be:	60da      	str	r2, [r3, #12]
      break;
 80063c0:	e00b      	b.n	80063da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0210 	orr.w	r2, r2, #16
 80063d0:	60da      	str	r2, [r3, #12]
      break;
 80063d2:	e002      	b.n	80063da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
      break;
 80063d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d144      	bne.n	800646a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2201      	movs	r2, #1
 80063e6:	6839      	ldr	r1, [r7, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f001 f973 	bl	80076d4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a20      	ldr	r2, [pc, #128]	; (8006474 <HAL_TIM_IC_Start_IT+0x26c>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d018      	beq.n	800642a <HAL_TIM_IC_Start_IT+0x222>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006400:	d013      	beq.n	800642a <HAL_TIM_IC_Start_IT+0x222>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <HAL_TIM_IC_Start_IT+0x270>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00e      	beq.n	800642a <HAL_TIM_IC_Start_IT+0x222>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1a      	ldr	r2, [pc, #104]	; (800647c <HAL_TIM_IC_Start_IT+0x274>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d009      	beq.n	800642a <HAL_TIM_IC_Start_IT+0x222>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a19      	ldr	r2, [pc, #100]	; (8006480 <HAL_TIM_IC_Start_IT+0x278>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_TIM_IC_Start_IT+0x222>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a17      	ldr	r2, [pc, #92]	; (8006484 <HAL_TIM_IC_Start_IT+0x27c>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d115      	bne.n	8006456 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	4b15      	ldr	r3, [pc, #84]	; (8006488 <HAL_TIM_IC_Start_IT+0x280>)
 8006432:	4013      	ands	r3, r2
 8006434:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	2b06      	cmp	r3, #6
 800643a:	d015      	beq.n	8006468 <HAL_TIM_IC_Start_IT+0x260>
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006442:	d011      	beq.n	8006468 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0201 	orr.w	r2, r2, #1
 8006452:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006454:	e008      	b.n	8006468 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0201 	orr.w	r2, r2, #1
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	e000      	b.n	800646a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006468:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40013400 	.word	0x40013400
 8006484:	40014000 	.word	0x40014000
 8006488:	00010007 	.word	0x00010007

0800648c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d122      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d11b      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f06f 0202 	mvn.w	r2, #2
 80064b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fa fb0a 	bl	8000ae8 <HAL_TIM_IC_CaptureCallback>
 80064d4:	e005      	b.n	80064e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fbc0 	bl	8006c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fbc7 	bl	8006c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d122      	bne.n	800653c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b04      	cmp	r3, #4
 8006502:	d11b      	bne.n	800653c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0204 	mvn.w	r2, #4
 800650c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2202      	movs	r2, #2
 8006512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f7fa fae0 	bl	8000ae8 <HAL_TIM_IC_CaptureCallback>
 8006528:	e005      	b.n	8006536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fb96 	bl	8006c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fb9d 	bl	8006c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b08      	cmp	r3, #8
 8006548:	d122      	bne.n	8006590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0308 	and.w	r3, r3, #8
 8006554:	2b08      	cmp	r3, #8
 8006556:	d11b      	bne.n	8006590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0208 	mvn.w	r2, #8
 8006560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2204      	movs	r2, #4
 8006566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7fa fab6 	bl	8000ae8 <HAL_TIM_IC_CaptureCallback>
 800657c:	e005      	b.n	800658a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fb6c 	bl	8006c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fb73 	bl	8006c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0310 	and.w	r3, r3, #16
 800659a:	2b10      	cmp	r3, #16
 800659c:	d122      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d11b      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0210 	mvn.w	r2, #16
 80065b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2208      	movs	r2, #8
 80065ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fa fa8c 	bl	8000ae8 <HAL_TIM_IC_CaptureCallback>
 80065d0:	e005      	b.n	80065de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fb42 	bl	8006c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fb49 	bl	8006c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d10e      	bne.n	8006610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0201 	mvn.w	r2, #1
 8006608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fb1c 	bl	8006c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	d10e      	bne.n	800663c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006628:	2b80      	cmp	r3, #128	; 0x80
 800662a:	d107      	bne.n	800663c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f001 f8fc 	bl	8007834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800664a:	d10e      	bne.n	800666a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006656:	2b80      	cmp	r3, #128	; 0x80
 8006658:	d107      	bne.n	800666a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f001 f8ef 	bl	8007848 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d10e      	bne.n	8006696 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d107      	bne.n	8006696 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800668e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 faf7 	bl	8006c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d10e      	bne.n	80066c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d107      	bne.n	80066c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f06f 0220 	mvn.w	r2, #32
 80066ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 f8af 	bl	8007820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80066e4:	2302      	movs	r3, #2
 80066e6:	e088      	b.n	80067fa <HAL_TIM_IC_ConfigChannel+0x130>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d11b      	bne.n	800672e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006706:	f000 fe2d 	bl	8007364 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 020c 	bic.w	r2, r2, #12
 8006718:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6999      	ldr	r1, [r3, #24]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	430a      	orrs	r2, r1
 800672a:	619a      	str	r2, [r3, #24]
 800672c:	e060      	b.n	80067f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b04      	cmp	r3, #4
 8006732:	d11c      	bne.n	800676e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006744:	f000 fea5 	bl	8007492 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006756:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6999      	ldr	r1, [r3, #24]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	619a      	str	r2, [r3, #24]
 800676c:	e040      	b.n	80067f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b08      	cmp	r3, #8
 8006772:	d11b      	bne.n	80067ac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006784:	f000 fef2 	bl	800756c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	69da      	ldr	r2, [r3, #28]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 020c 	bic.w	r2, r2, #12
 8006796:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69d9      	ldr	r1, [r3, #28]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	61da      	str	r2, [r3, #28]
 80067aa:	e021      	b.n	80067f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2b0c      	cmp	r3, #12
 80067b0:	d11c      	bne.n	80067ec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80067c2:	f000 ff0f 	bl	80075e4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067d4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	021a      	lsls	r2, r3, #8
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	61da      	str	r2, [r3, #28]
 80067ea:	e001      	b.n	80067f0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800681e:	2302      	movs	r3, #2
 8006820:	e0ff      	b.n	8006a22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2b14      	cmp	r3, #20
 800682e:	f200 80f0 	bhi.w	8006a12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	0800688d 	.word	0x0800688d
 800683c:	08006a13 	.word	0x08006a13
 8006840:	08006a13 	.word	0x08006a13
 8006844:	08006a13 	.word	0x08006a13
 8006848:	080068cd 	.word	0x080068cd
 800684c:	08006a13 	.word	0x08006a13
 8006850:	08006a13 	.word	0x08006a13
 8006854:	08006a13 	.word	0x08006a13
 8006858:	0800690f 	.word	0x0800690f
 800685c:	08006a13 	.word	0x08006a13
 8006860:	08006a13 	.word	0x08006a13
 8006864:	08006a13 	.word	0x08006a13
 8006868:	0800694f 	.word	0x0800694f
 800686c:	08006a13 	.word	0x08006a13
 8006870:	08006a13 	.word	0x08006a13
 8006874:	08006a13 	.word	0x08006a13
 8006878:	08006991 	.word	0x08006991
 800687c:	08006a13 	.word	0x08006a13
 8006880:	08006a13 	.word	0x08006a13
 8006884:	08006a13 	.word	0x08006a13
 8006888:	080069d1 	.word	0x080069d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68b9      	ldr	r1, [r7, #8]
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fa90 	bl	8006db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699a      	ldr	r2, [r3, #24]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0208 	orr.w	r2, r2, #8
 80068a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0204 	bic.w	r2, r2, #4
 80068b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6999      	ldr	r1, [r3, #24]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	619a      	str	r2, [r3, #24]
      break;
 80068ca:	e0a5      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68b9      	ldr	r1, [r7, #8]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fb00 	bl	8006ed8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699a      	ldr	r2, [r3, #24]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6999      	ldr	r1, [r3, #24]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	021a      	lsls	r2, r3, #8
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	619a      	str	r2, [r3, #24]
      break;
 800690c:	e084      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68b9      	ldr	r1, [r7, #8]
 8006914:	4618      	mov	r0, r3
 8006916:	f000 fb69 	bl	8006fec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69da      	ldr	r2, [r3, #28]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0208 	orr.w	r2, r2, #8
 8006928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0204 	bic.w	r2, r2, #4
 8006938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69d9      	ldr	r1, [r3, #28]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	61da      	str	r2, [r3, #28]
      break;
 800694c:	e064      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fbd1 	bl	80070fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69d9      	ldr	r1, [r3, #28]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	021a      	lsls	r2, r3, #8
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	61da      	str	r2, [r3, #28]
      break;
 800698e:	e043      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fc1a 	bl	80071d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0208 	orr.w	r2, r2, #8
 80069aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0204 	bic.w	r2, r2, #4
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069ce:	e023      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68b9      	ldr	r1, [r7, #8]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fc5e 	bl	8007298 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	021a      	lsls	r2, r3, #8
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a10:	e002      	b.n	8006a18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	75fb      	strb	r3, [r7, #23]
      break;
 8006a16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIM_ConfigClockSource+0x1c>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e0b6      	b.n	8006bb6 <HAL_TIM_ConfigClockSource+0x18a>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a84:	d03e      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0xd8>
 8006a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8a:	f200 8087 	bhi.w	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a92:	f000 8086 	beq.w	8006ba2 <HAL_TIM_ConfigClockSource+0x176>
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9a:	d87f      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006a9c:	2b70      	cmp	r3, #112	; 0x70
 8006a9e:	d01a      	beq.n	8006ad6 <HAL_TIM_ConfigClockSource+0xaa>
 8006aa0:	2b70      	cmp	r3, #112	; 0x70
 8006aa2:	d87b      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006aa4:	2b60      	cmp	r3, #96	; 0x60
 8006aa6:	d050      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x11e>
 8006aa8:	2b60      	cmp	r3, #96	; 0x60
 8006aaa:	d877      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006aac:	2b50      	cmp	r3, #80	; 0x50
 8006aae:	d03c      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0xfe>
 8006ab0:	2b50      	cmp	r3, #80	; 0x50
 8006ab2:	d873      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006ab4:	2b40      	cmp	r3, #64	; 0x40
 8006ab6:	d058      	beq.n	8006b6a <HAL_TIM_ConfigClockSource+0x13e>
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d86f      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006abc:	2b30      	cmp	r3, #48	; 0x30
 8006abe:	d064      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15e>
 8006ac0:	2b30      	cmp	r3, #48	; 0x30
 8006ac2:	d86b      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006ac4:	2b20      	cmp	r3, #32
 8006ac6:	d060      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15e>
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	d867      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d05c      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15e>
 8006ad0:	2b10      	cmp	r3, #16
 8006ad2:	d05a      	beq.n	8006b8a <HAL_TIM_ConfigClockSource+0x15e>
 8006ad4:	e062      	b.n	8006b9c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ae6:	f000 fdd5 	bl	8007694 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	609a      	str	r2, [r3, #8]
      break;
 8006b02:	e04f      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b14:	f000 fdbe 	bl	8007694 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b26:	609a      	str	r2, [r3, #8]
      break;
 8006b28:	e03c      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b36:	461a      	mov	r2, r3
 8006b38:	f000 fc7c 	bl	8007434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2150      	movs	r1, #80	; 0x50
 8006b42:	4618      	mov	r0, r3
 8006b44:	f000 fd8b 	bl	800765e <TIM_ITRx_SetConfig>
      break;
 8006b48:	e02c      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b56:	461a      	mov	r2, r3
 8006b58:	f000 fcd8 	bl	800750c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2160      	movs	r1, #96	; 0x60
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fd7b 	bl	800765e <TIM_ITRx_SetConfig>
      break;
 8006b68:	e01c      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b76:	461a      	mov	r2, r3
 8006b78:	f000 fc5c 	bl	8007434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2140      	movs	r1, #64	; 0x40
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fd6b 	bl	800765e <TIM_ITRx_SetConfig>
      break;
 8006b88:	e00c      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f000 fd62 	bl	800765e <TIM_ITRx_SetConfig>
      break;
 8006b9a:	e003      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba0:	e000      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
	...

08006bc0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	2b0c      	cmp	r3, #12
 8006bd2:	d831      	bhi.n	8006c38 <HAL_TIM_ReadCapturedValue+0x78>
 8006bd4:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <HAL_TIM_ReadCapturedValue+0x1c>)
 8006bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bda:	bf00      	nop
 8006bdc:	08006c11 	.word	0x08006c11
 8006be0:	08006c39 	.word	0x08006c39
 8006be4:	08006c39 	.word	0x08006c39
 8006be8:	08006c39 	.word	0x08006c39
 8006bec:	08006c1b 	.word	0x08006c1b
 8006bf0:	08006c39 	.word	0x08006c39
 8006bf4:	08006c39 	.word	0x08006c39
 8006bf8:	08006c39 	.word	0x08006c39
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c39 	.word	0x08006c39
 8006c04:	08006c39 	.word	0x08006c39
 8006c08:	08006c39 	.word	0x08006c39
 8006c0c:	08006c2f 	.word	0x08006c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c16:	60fb      	str	r3, [r7, #12]

      break;
 8006c18:	e00f      	b.n	8006c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	60fb      	str	r3, [r7, #12]

      break;
 8006c22:	e00a      	b.n	8006c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	60fb      	str	r3, [r7, #12]

      break;
 8006c2c:	e005      	b.n	8006c3a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	60fb      	str	r3, [r7, #12]

      break;
 8006c36:	e000      	b.n	8006c3a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006c38:	bf00      	nop
  }

  return tmpreg;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a3c      	ldr	r2, [pc, #240]	; (8006d9c <TIM_Base_SetConfig+0x104>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00f      	beq.n	8006cd0 <TIM_Base_SetConfig+0x38>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb6:	d00b      	beq.n	8006cd0 <TIM_Base_SetConfig+0x38>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a39      	ldr	r2, [pc, #228]	; (8006da0 <TIM_Base_SetConfig+0x108>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d007      	beq.n	8006cd0 <TIM_Base_SetConfig+0x38>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a38      	ldr	r2, [pc, #224]	; (8006da4 <TIM_Base_SetConfig+0x10c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d003      	beq.n	8006cd0 <TIM_Base_SetConfig+0x38>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a37      	ldr	r2, [pc, #220]	; (8006da8 <TIM_Base_SetConfig+0x110>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d108      	bne.n	8006ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2d      	ldr	r2, [pc, #180]	; (8006d9c <TIM_Base_SetConfig+0x104>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d01b      	beq.n	8006d22 <TIM_Base_SetConfig+0x8a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf0:	d017      	beq.n	8006d22 <TIM_Base_SetConfig+0x8a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a2a      	ldr	r2, [pc, #168]	; (8006da0 <TIM_Base_SetConfig+0x108>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <TIM_Base_SetConfig+0x8a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a29      	ldr	r2, [pc, #164]	; (8006da4 <TIM_Base_SetConfig+0x10c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00f      	beq.n	8006d22 <TIM_Base_SetConfig+0x8a>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a28      	ldr	r2, [pc, #160]	; (8006da8 <TIM_Base_SetConfig+0x110>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00b      	beq.n	8006d22 <TIM_Base_SetConfig+0x8a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a27      	ldr	r2, [pc, #156]	; (8006dac <TIM_Base_SetConfig+0x114>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_Base_SetConfig+0x8a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a26      	ldr	r2, [pc, #152]	; (8006db0 <TIM_Base_SetConfig+0x118>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_Base_SetConfig+0x8a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a25      	ldr	r2, [pc, #148]	; (8006db4 <TIM_Base_SetConfig+0x11c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <TIM_Base_SetConfig+0x104>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d00f      	beq.n	8006d80 <TIM_Base_SetConfig+0xe8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a11      	ldr	r2, [pc, #68]	; (8006da8 <TIM_Base_SetConfig+0x110>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d00b      	beq.n	8006d80 <TIM_Base_SetConfig+0xe8>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a10      	ldr	r2, [pc, #64]	; (8006dac <TIM_Base_SetConfig+0x114>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d007      	beq.n	8006d80 <TIM_Base_SetConfig+0xe8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <TIM_Base_SetConfig+0x118>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d003      	beq.n	8006d80 <TIM_Base_SetConfig+0xe8>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a0e      	ldr	r2, [pc, #56]	; (8006db4 <TIM_Base_SetConfig+0x11c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d103      	bne.n	8006d88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691a      	ldr	r2, [r3, #16]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	615a      	str	r2, [r3, #20]
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40012c00 	.word	0x40012c00
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40013400 	.word	0x40013400
 8006dac:	40014000 	.word	0x40014000
 8006db0:	40014400 	.word	0x40014400
 8006db4:	40014800 	.word	0x40014800

08006db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b087      	sub	sp, #28
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	f023 0201 	bic.w	r2, r3, #1
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 0303 	bic.w	r3, r3, #3
 8006df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f023 0302 	bic.w	r3, r3, #2
 8006e04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a2c      	ldr	r2, [pc, #176]	; (8006ec4 <TIM_OC1_SetConfig+0x10c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00f      	beq.n	8006e38 <TIM_OC1_SetConfig+0x80>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a2b      	ldr	r2, [pc, #172]	; (8006ec8 <TIM_OC1_SetConfig+0x110>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00b      	beq.n	8006e38 <TIM_OC1_SetConfig+0x80>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a2a      	ldr	r2, [pc, #168]	; (8006ecc <TIM_OC1_SetConfig+0x114>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_OC1_SetConfig+0x80>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a29      	ldr	r2, [pc, #164]	; (8006ed0 <TIM_OC1_SetConfig+0x118>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC1_SetConfig+0x80>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a28      	ldr	r2, [pc, #160]	; (8006ed4 <TIM_OC1_SetConfig+0x11c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10c      	bne.n	8006e52 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f023 0308 	bic.w	r3, r3, #8
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	697a      	ldr	r2, [r7, #20]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 0304 	bic.w	r3, r3, #4
 8006e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a1b      	ldr	r2, [pc, #108]	; (8006ec4 <TIM_OC1_SetConfig+0x10c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00f      	beq.n	8006e7a <TIM_OC1_SetConfig+0xc2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a1a      	ldr	r2, [pc, #104]	; (8006ec8 <TIM_OC1_SetConfig+0x110>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d00b      	beq.n	8006e7a <TIM_OC1_SetConfig+0xc2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a19      	ldr	r2, [pc, #100]	; (8006ecc <TIM_OC1_SetConfig+0x114>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d007      	beq.n	8006e7a <TIM_OC1_SetConfig+0xc2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a18      	ldr	r2, [pc, #96]	; (8006ed0 <TIM_OC1_SetConfig+0x118>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_OC1_SetConfig+0xc2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a17      	ldr	r2, [pc, #92]	; (8006ed4 <TIM_OC1_SetConfig+0x11c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d111      	bne.n	8006e9e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685a      	ldr	r2, [r3, #4]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	621a      	str	r2, [r3, #32]
}
 8006eb8:	bf00      	nop
 8006eba:	371c      	adds	r7, #28
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40014000 	.word	0x40014000
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40014800 	.word	0x40014800

08006ed8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	f023 0210 	bic.w	r2, r3, #16
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	f023 0320 	bic.w	r3, r3, #32
 8006f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a28      	ldr	r2, [pc, #160]	; (8006fd8 <TIM_OC2_SetConfig+0x100>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_OC2_SetConfig+0x6c>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a27      	ldr	r2, [pc, #156]	; (8006fdc <TIM_OC2_SetConfig+0x104>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d10d      	bne.n	8006f60 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <TIM_OC2_SetConfig+0x100>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00f      	beq.n	8006f88 <TIM_OC2_SetConfig+0xb0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <TIM_OC2_SetConfig+0x104>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00b      	beq.n	8006f88 <TIM_OC2_SetConfig+0xb0>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a1b      	ldr	r2, [pc, #108]	; (8006fe0 <TIM_OC2_SetConfig+0x108>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_OC2_SetConfig+0xb0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <TIM_OC2_SetConfig+0x10c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_OC2_SetConfig+0xb0>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <TIM_OC2_SetConfig+0x110>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d113      	bne.n	8006fb0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f8e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f96:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40013400 	.word	0x40013400
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800

08006fec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b087      	sub	sp, #28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a27      	ldr	r2, [pc, #156]	; (80070e8 <TIM_OC3_SetConfig+0xfc>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_OC3_SetConfig+0x6a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a26      	ldr	r2, [pc, #152]	; (80070ec <TIM_OC3_SetConfig+0x100>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10d      	bne.n	8007072 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800705c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007070:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1c      	ldr	r2, [pc, #112]	; (80070e8 <TIM_OC3_SetConfig+0xfc>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00f      	beq.n	800709a <TIM_OC3_SetConfig+0xae>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1b      	ldr	r2, [pc, #108]	; (80070ec <TIM_OC3_SetConfig+0x100>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00b      	beq.n	800709a <TIM_OC3_SetConfig+0xae>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1a      	ldr	r2, [pc, #104]	; (80070f0 <TIM_OC3_SetConfig+0x104>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d007      	beq.n	800709a <TIM_OC3_SetConfig+0xae>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a19      	ldr	r2, [pc, #100]	; (80070f4 <TIM_OC3_SetConfig+0x108>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_OC3_SetConfig+0xae>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a18      	ldr	r2, [pc, #96]	; (80070f8 <TIM_OC3_SetConfig+0x10c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d113      	bne.n	80070c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40012c00 	.word	0x40012c00
 80070ec:	40013400 	.word	0x40013400
 80070f0:	40014000 	.word	0x40014000
 80070f4:	40014400 	.word	0x40014400
 80070f8:	40014800 	.word	0x40014800

080070fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800712a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800714a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	031b      	lsls	r3, r3, #12
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a18      	ldr	r2, [pc, #96]	; (80071bc <TIM_OC4_SetConfig+0xc0>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00f      	beq.n	8007180 <TIM_OC4_SetConfig+0x84>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a17      	ldr	r2, [pc, #92]	; (80071c0 <TIM_OC4_SetConfig+0xc4>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00b      	beq.n	8007180 <TIM_OC4_SetConfig+0x84>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a16      	ldr	r2, [pc, #88]	; (80071c4 <TIM_OC4_SetConfig+0xc8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d007      	beq.n	8007180 <TIM_OC4_SetConfig+0x84>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <TIM_OC4_SetConfig+0xcc>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d003      	beq.n	8007180 <TIM_OC4_SetConfig+0x84>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a14      	ldr	r2, [pc, #80]	; (80071cc <TIM_OC4_SetConfig+0xd0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d109      	bne.n	8007194 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	019b      	lsls	r3, r3, #6
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40013400 	.word	0x40013400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40014400 	.word	0x40014400
 80071cc:	40014800 	.word	0x40014800

080071d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007214:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	041b      	lsls	r3, r3, #16
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a17      	ldr	r2, [pc, #92]	; (8007284 <TIM_OC5_SetConfig+0xb4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00f      	beq.n	800724a <TIM_OC5_SetConfig+0x7a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a16      	ldr	r2, [pc, #88]	; (8007288 <TIM_OC5_SetConfig+0xb8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00b      	beq.n	800724a <TIM_OC5_SetConfig+0x7a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a15      	ldr	r2, [pc, #84]	; (800728c <TIM_OC5_SetConfig+0xbc>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d007      	beq.n	800724a <TIM_OC5_SetConfig+0x7a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a14      	ldr	r2, [pc, #80]	; (8007290 <TIM_OC5_SetConfig+0xc0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <TIM_OC5_SetConfig+0x7a>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a13      	ldr	r2, [pc, #76]	; (8007294 <TIM_OC5_SetConfig+0xc4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d109      	bne.n	800725e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007250:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	021b      	lsls	r3, r3, #8
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4313      	orrs	r3, r2
 800725c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40012c00 	.word	0x40012c00
 8007288:	40013400 	.word	0x40013400
 800728c:	40014000 	.word	0x40014000
 8007290:	40014400 	.word	0x40014400
 8007294:	40014800 	.word	0x40014800

08007298 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	051b      	lsls	r3, r3, #20
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a18      	ldr	r2, [pc, #96]	; (8007350 <TIM_OC6_SetConfig+0xb8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00f      	beq.n	8007314 <TIM_OC6_SetConfig+0x7c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a17      	ldr	r2, [pc, #92]	; (8007354 <TIM_OC6_SetConfig+0xbc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00b      	beq.n	8007314 <TIM_OC6_SetConfig+0x7c>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a16      	ldr	r2, [pc, #88]	; (8007358 <TIM_OC6_SetConfig+0xc0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d007      	beq.n	8007314 <TIM_OC6_SetConfig+0x7c>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a15      	ldr	r2, [pc, #84]	; (800735c <TIM_OC6_SetConfig+0xc4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <TIM_OC6_SetConfig+0x7c>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a14      	ldr	r2, [pc, #80]	; (8007360 <TIM_OC6_SetConfig+0xc8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d109      	bne.n	8007328 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800731a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	029b      	lsls	r3, r3, #10
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	621a      	str	r2, [r3, #32]
}
 8007342:	bf00      	nop
 8007344:	371c      	adds	r7, #28
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	40012c00 	.word	0x40012c00
 8007354:	40013400 	.word	0x40013400
 8007358:	40014000 	.word	0x40014000
 800735c:	40014400 	.word	0x40014400
 8007360:	40014800 	.word	0x40014800

08007364 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f023 0201 	bic.w	r2, r3, #1
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	4a24      	ldr	r2, [pc, #144]	; (8007420 <TIM_TI1_SetConfig+0xbc>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <TIM_TI1_SetConfig+0x56>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007398:	d00f      	beq.n	80073ba <TIM_TI1_SetConfig+0x56>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4a21      	ldr	r2, [pc, #132]	; (8007424 <TIM_TI1_SetConfig+0xc0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d00b      	beq.n	80073ba <TIM_TI1_SetConfig+0x56>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4a20      	ldr	r2, [pc, #128]	; (8007428 <TIM_TI1_SetConfig+0xc4>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d007      	beq.n	80073ba <TIM_TI1_SetConfig+0x56>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	4a1f      	ldr	r2, [pc, #124]	; (800742c <TIM_TI1_SetConfig+0xc8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d003      	beq.n	80073ba <TIM_TI1_SetConfig+0x56>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4a1e      	ldr	r2, [pc, #120]	; (8007430 <TIM_TI1_SetConfig+0xcc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d101      	bne.n	80073be <TIM_TI1_SetConfig+0x5a>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <TIM_TI1_SetConfig+0x5c>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f023 0303 	bic.w	r3, r3, #3
 80073ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e003      	b.n	80073de <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f043 0301 	orr.w	r3, r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f023 030a 	bic.w	r3, r3, #10
 80073f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	f003 030a 	and.w	r3, r3, #10
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	4313      	orrs	r3, r2
 8007404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	621a      	str	r2, [r3, #32]
}
 8007412:	bf00      	nop
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	40012c00 	.word	0x40012c00
 8007424:	40000400 	.word	0x40000400
 8007428:	40000800 	.word	0x40000800
 800742c:	40013400 	.word	0x40013400
 8007430:	40014000 	.word	0x40014000

08007434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	f023 0201 	bic.w	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800745e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f023 030a 	bic.w	r3, r3, #10
 8007470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007472:	697a      	ldr	r2, [r7, #20]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4313      	orrs	r3, r2
 8007478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	621a      	str	r2, [r3, #32]
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007492:	b480      	push	{r7}
 8007494:	b087      	sub	sp, #28
 8007496:	af00      	add	r7, sp, #0
 8007498:	60f8      	str	r0, [r7, #12]
 800749a:	60b9      	str	r1, [r7, #8]
 800749c:	607a      	str	r2, [r7, #4]
 800749e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f023 0210 	bic.w	r2, r3, #16
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	021b      	lsls	r3, r3, #8
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	031b      	lsls	r3, r3, #12
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	011b      	lsls	r3, r3, #4
 80074ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	621a      	str	r2, [r3, #32]
}
 8007500:	bf00      	nop
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	f023 0210 	bic.w	r2, r3, #16
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007536:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	031b      	lsls	r3, r3, #12
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007548:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	4313      	orrs	r3, r2
 8007552:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	693a      	ldr	r2, [r7, #16]
 800755e:	621a      	str	r2, [r3, #32]
}
 8007560:	bf00      	nop
 8007562:	371c      	adds	r7, #28
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f023 0303 	bic.w	r3, r3, #3
 8007598:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4313      	orrs	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80075bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	621a      	str	r2, [r3, #32]
}
 80075d8:	bf00      	nop
 80075da:	371c      	adds	r7, #28
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
 80075f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007610:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007622:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	031b      	lsls	r3, r3, #12
 8007628:	b29b      	uxth	r3, r3
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007636:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	031b      	lsls	r3, r3, #12
 800763c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	4313      	orrs	r3, r2
 8007644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	621a      	str	r2, [r3, #32]
}
 8007652:	bf00      	nop
 8007654:	371c      	adds	r7, #28
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	f043 0307 	orr.w	r3, r3, #7
 8007680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	609a      	str	r2, [r3, #8]
}
 8007688:	bf00      	nop
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	021a      	lsls	r2, r3, #8
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	bf00      	nop
 80076ca:	371c      	adds	r7, #28
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	2201      	movs	r2, #1
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a1a      	ldr	r2, [r3, #32]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	43db      	mvns	r3, r3
 80076f6:	401a      	ands	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a1a      	ldr	r2, [r3, #32]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	fa01 f303 	lsl.w	r3, r1, r3
 800770c:	431a      	orrs	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
	...

08007720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007734:	2302      	movs	r3, #2
 8007736:	e063      	b.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a2b      	ldr	r2, [pc, #172]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d004      	beq.n	800776c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d108      	bne.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007772:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007784:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a1b      	ldr	r2, [pc, #108]	; (800780c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d018      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077aa:	d013      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a18      	ldr	r2, [pc, #96]	; (8007814 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00e      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a17      	ldr	r2, [pc, #92]	; (8007818 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d009      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a12      	ldr	r2, [pc, #72]	; (8007810 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d004      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a13      	ldr	r2, [pc, #76]	; (800781c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d10c      	bne.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40013400 	.word	0x40013400
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40014000 	.word	0x40014000

08007820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007828:	bf00      	nop
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007864:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007868:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	b29b      	uxth	r3, r3
 8007876:	43db      	mvns	r3, r3
 8007878:	b29b      	uxth	r3, r3
 800787a:	4013      	ands	r3, r2
 800787c:	b29a      	uxth	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007892:	b084      	sub	sp, #16
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	f107 0014 	add.w	r0, r7, #20
 80078a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	b004      	add	sp, #16
 80078d2:	4770      	bx	lr

080078d4 <malloc>:
 80078d4:	4b02      	ldr	r3, [pc, #8]	; (80078e0 <malloc+0xc>)
 80078d6:	4601      	mov	r1, r0
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	f000 b823 	b.w	8007924 <_malloc_r>
 80078de:	bf00      	nop
 80078e0:	200000d4 	.word	0x200000d4

080078e4 <sbrk_aligned>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	4e0e      	ldr	r6, [pc, #56]	; (8007920 <sbrk_aligned+0x3c>)
 80078e8:	460c      	mov	r4, r1
 80078ea:	6831      	ldr	r1, [r6, #0]
 80078ec:	4605      	mov	r5, r0
 80078ee:	b911      	cbnz	r1, 80078f6 <sbrk_aligned+0x12>
 80078f0:	f000 f8de 	bl	8007ab0 <_sbrk_r>
 80078f4:	6030      	str	r0, [r6, #0]
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 f8d9 	bl	8007ab0 <_sbrk_r>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	d00a      	beq.n	8007918 <sbrk_aligned+0x34>
 8007902:	1cc4      	adds	r4, r0, #3
 8007904:	f024 0403 	bic.w	r4, r4, #3
 8007908:	42a0      	cmp	r0, r4
 800790a:	d007      	beq.n	800791c <sbrk_aligned+0x38>
 800790c:	1a21      	subs	r1, r4, r0
 800790e:	4628      	mov	r0, r5
 8007910:	f000 f8ce 	bl	8007ab0 <_sbrk_r>
 8007914:	3001      	adds	r0, #1
 8007916:	d101      	bne.n	800791c <sbrk_aligned+0x38>
 8007918:	f04f 34ff 	mov.w	r4, #4294967295
 800791c:	4620      	mov	r0, r4
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	20000654 	.word	0x20000654

08007924 <_malloc_r>:
 8007924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007928:	1ccd      	adds	r5, r1, #3
 800792a:	f025 0503 	bic.w	r5, r5, #3
 800792e:	3508      	adds	r5, #8
 8007930:	2d0c      	cmp	r5, #12
 8007932:	bf38      	it	cc
 8007934:	250c      	movcc	r5, #12
 8007936:	2d00      	cmp	r5, #0
 8007938:	4607      	mov	r7, r0
 800793a:	db01      	blt.n	8007940 <_malloc_r+0x1c>
 800793c:	42a9      	cmp	r1, r5
 800793e:	d905      	bls.n	800794c <_malloc_r+0x28>
 8007940:	230c      	movs	r3, #12
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	2600      	movs	r6, #0
 8007946:	4630      	mov	r0, r6
 8007948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007a20 <_malloc_r+0xfc>
 8007950:	f000 f868 	bl	8007a24 <__malloc_lock>
 8007954:	f8d8 3000 	ldr.w	r3, [r8]
 8007958:	461c      	mov	r4, r3
 800795a:	bb5c      	cbnz	r4, 80079b4 <_malloc_r+0x90>
 800795c:	4629      	mov	r1, r5
 800795e:	4638      	mov	r0, r7
 8007960:	f7ff ffc0 	bl	80078e4 <sbrk_aligned>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	4604      	mov	r4, r0
 8007968:	d155      	bne.n	8007a16 <_malloc_r+0xf2>
 800796a:	f8d8 4000 	ldr.w	r4, [r8]
 800796e:	4626      	mov	r6, r4
 8007970:	2e00      	cmp	r6, #0
 8007972:	d145      	bne.n	8007a00 <_malloc_r+0xdc>
 8007974:	2c00      	cmp	r4, #0
 8007976:	d048      	beq.n	8007a0a <_malloc_r+0xe6>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	4631      	mov	r1, r6
 800797c:	4638      	mov	r0, r7
 800797e:	eb04 0903 	add.w	r9, r4, r3
 8007982:	f000 f895 	bl	8007ab0 <_sbrk_r>
 8007986:	4581      	cmp	r9, r0
 8007988:	d13f      	bne.n	8007a0a <_malloc_r+0xe6>
 800798a:	6821      	ldr	r1, [r4, #0]
 800798c:	1a6d      	subs	r5, r5, r1
 800798e:	4629      	mov	r1, r5
 8007990:	4638      	mov	r0, r7
 8007992:	f7ff ffa7 	bl	80078e4 <sbrk_aligned>
 8007996:	3001      	adds	r0, #1
 8007998:	d037      	beq.n	8007a0a <_malloc_r+0xe6>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	442b      	add	r3, r5
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	f8d8 3000 	ldr.w	r3, [r8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d038      	beq.n	8007a1a <_malloc_r+0xf6>
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	42a2      	cmp	r2, r4
 80079ac:	d12b      	bne.n	8007a06 <_malloc_r+0xe2>
 80079ae:	2200      	movs	r2, #0
 80079b0:	605a      	str	r2, [r3, #4]
 80079b2:	e00f      	b.n	80079d4 <_malloc_r+0xb0>
 80079b4:	6822      	ldr	r2, [r4, #0]
 80079b6:	1b52      	subs	r2, r2, r5
 80079b8:	d41f      	bmi.n	80079fa <_malloc_r+0xd6>
 80079ba:	2a0b      	cmp	r2, #11
 80079bc:	d917      	bls.n	80079ee <_malloc_r+0xca>
 80079be:	1961      	adds	r1, r4, r5
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	6025      	str	r5, [r4, #0]
 80079c4:	bf18      	it	ne
 80079c6:	6059      	strne	r1, [r3, #4]
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	bf08      	it	eq
 80079cc:	f8c8 1000 	streq.w	r1, [r8]
 80079d0:	5162      	str	r2, [r4, r5]
 80079d2:	604b      	str	r3, [r1, #4]
 80079d4:	4638      	mov	r0, r7
 80079d6:	f104 060b 	add.w	r6, r4, #11
 80079da:	f000 f829 	bl	8007a30 <__malloc_unlock>
 80079de:	f026 0607 	bic.w	r6, r6, #7
 80079e2:	1d23      	adds	r3, r4, #4
 80079e4:	1af2      	subs	r2, r6, r3
 80079e6:	d0ae      	beq.n	8007946 <_malloc_r+0x22>
 80079e8:	1b9b      	subs	r3, r3, r6
 80079ea:	50a3      	str	r3, [r4, r2]
 80079ec:	e7ab      	b.n	8007946 <_malloc_r+0x22>
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	6862      	ldr	r2, [r4, #4]
 80079f2:	d1dd      	bne.n	80079b0 <_malloc_r+0x8c>
 80079f4:	f8c8 2000 	str.w	r2, [r8]
 80079f8:	e7ec      	b.n	80079d4 <_malloc_r+0xb0>
 80079fa:	4623      	mov	r3, r4
 80079fc:	6864      	ldr	r4, [r4, #4]
 80079fe:	e7ac      	b.n	800795a <_malloc_r+0x36>
 8007a00:	4634      	mov	r4, r6
 8007a02:	6876      	ldr	r6, [r6, #4]
 8007a04:	e7b4      	b.n	8007970 <_malloc_r+0x4c>
 8007a06:	4613      	mov	r3, r2
 8007a08:	e7cc      	b.n	80079a4 <_malloc_r+0x80>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f000 f80e 	bl	8007a30 <__malloc_unlock>
 8007a14:	e797      	b.n	8007946 <_malloc_r+0x22>
 8007a16:	6025      	str	r5, [r4, #0]
 8007a18:	e7dc      	b.n	80079d4 <_malloc_r+0xb0>
 8007a1a:	605b      	str	r3, [r3, #4]
 8007a1c:	deff      	udf	#255	; 0xff
 8007a1e:	bf00      	nop
 8007a20:	20000650 	.word	0x20000650

08007a24 <__malloc_lock>:
 8007a24:	4801      	ldr	r0, [pc, #4]	; (8007a2c <__malloc_lock+0x8>)
 8007a26:	f000 b87d 	b.w	8007b24 <__retarget_lock_acquire_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	20000794 	.word	0x20000794

08007a30 <__malloc_unlock>:
 8007a30:	4801      	ldr	r0, [pc, #4]	; (8007a38 <__malloc_unlock+0x8>)
 8007a32:	f000 b878 	b.w	8007b26 <__retarget_lock_release_recursive>
 8007a36:	bf00      	nop
 8007a38:	20000794 	.word	0x20000794

08007a3c <siprintf>:
 8007a3c:	b40e      	push	{r1, r2, r3}
 8007a3e:	b500      	push	{lr}
 8007a40:	b09c      	sub	sp, #112	; 0x70
 8007a42:	ab1d      	add	r3, sp, #116	; 0x74
 8007a44:	9002      	str	r0, [sp, #8]
 8007a46:	9006      	str	r0, [sp, #24]
 8007a48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a4c:	4809      	ldr	r0, [pc, #36]	; (8007a74 <siprintf+0x38>)
 8007a4e:	9107      	str	r1, [sp, #28]
 8007a50:	9104      	str	r1, [sp, #16]
 8007a52:	4909      	ldr	r1, [pc, #36]	; (8007a78 <siprintf+0x3c>)
 8007a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a58:	9105      	str	r1, [sp, #20]
 8007a5a:	6800      	ldr	r0, [r0, #0]
 8007a5c:	9301      	str	r3, [sp, #4]
 8007a5e:	a902      	add	r1, sp, #8
 8007a60:	f000 f908 	bl	8007c74 <_svfiprintf_r>
 8007a64:	9b02      	ldr	r3, [sp, #8]
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	b01c      	add	sp, #112	; 0x70
 8007a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a70:	b003      	add	sp, #12
 8007a72:	4770      	bx	lr
 8007a74:	200000d4 	.word	0x200000d4
 8007a78:	ffff0208 	.word	0xffff0208

08007a7c <memset>:
 8007a7c:	4402      	add	r2, r0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d100      	bne.n	8007a86 <memset+0xa>
 8007a84:	4770      	bx	lr
 8007a86:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8a:	e7f9      	b.n	8007a80 <memset+0x4>

08007a8c <strncmp>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	b16a      	cbz	r2, 8007aac <strncmp+0x20>
 8007a90:	3901      	subs	r1, #1
 8007a92:	1884      	adds	r4, r0, r2
 8007a94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d103      	bne.n	8007aa8 <strncmp+0x1c>
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d001      	beq.n	8007aa8 <strncmp+0x1c>
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	d1f5      	bne.n	8007a94 <strncmp+0x8>
 8007aa8:	1ad0      	subs	r0, r2, r3
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	4610      	mov	r0, r2
 8007aae:	e7fc      	b.n	8007aaa <strncmp+0x1e>

08007ab0 <_sbrk_r>:
 8007ab0:	b538      	push	{r3, r4, r5, lr}
 8007ab2:	4d06      	ldr	r5, [pc, #24]	; (8007acc <_sbrk_r+0x1c>)
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	4608      	mov	r0, r1
 8007aba:	602b      	str	r3, [r5, #0]
 8007abc:	f7f9 fffe 	bl	8001abc <_sbrk>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_sbrk_r+0x1a>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_sbrk_r+0x1a>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	20000790 	.word	0x20000790

08007ad0 <__errno>:
 8007ad0:	4b01      	ldr	r3, [pc, #4]	; (8007ad8 <__errno+0x8>)
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	200000d4 	.word	0x200000d4

08007adc <__libc_init_array>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4d0d      	ldr	r5, [pc, #52]	; (8007b14 <__libc_init_array+0x38>)
 8007ae0:	4c0d      	ldr	r4, [pc, #52]	; (8007b18 <__libc_init_array+0x3c>)
 8007ae2:	1b64      	subs	r4, r4, r5
 8007ae4:	10a4      	asrs	r4, r4, #2
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	42a6      	cmp	r6, r4
 8007aea:	d109      	bne.n	8007b00 <__libc_init_array+0x24>
 8007aec:	4d0b      	ldr	r5, [pc, #44]	; (8007b1c <__libc_init_array+0x40>)
 8007aee:	4c0c      	ldr	r4, [pc, #48]	; (8007b20 <__libc_init_array+0x44>)
 8007af0:	f000 fbae 	bl	8008250 <_init>
 8007af4:	1b64      	subs	r4, r4, r5
 8007af6:	10a4      	asrs	r4, r4, #2
 8007af8:	2600      	movs	r6, #0
 8007afa:	42a6      	cmp	r6, r4
 8007afc:	d105      	bne.n	8007b0a <__libc_init_array+0x2e>
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b04:	4798      	blx	r3
 8007b06:	3601      	adds	r6, #1
 8007b08:	e7ee      	b.n	8007ae8 <__libc_init_array+0xc>
 8007b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0e:	4798      	blx	r3
 8007b10:	3601      	adds	r6, #1
 8007b12:	e7f2      	b.n	8007afa <__libc_init_array+0x1e>
 8007b14:	0800833c 	.word	0x0800833c
 8007b18:	0800833c 	.word	0x0800833c
 8007b1c:	0800833c 	.word	0x0800833c
 8007b20:	08008340 	.word	0x08008340

08007b24 <__retarget_lock_acquire_recursive>:
 8007b24:	4770      	bx	lr

08007b26 <__retarget_lock_release_recursive>:
 8007b26:	4770      	bx	lr

08007b28 <_free_r>:
 8007b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b2a:	2900      	cmp	r1, #0
 8007b2c:	d044      	beq.n	8007bb8 <_free_r+0x90>
 8007b2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b32:	9001      	str	r0, [sp, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	f1a1 0404 	sub.w	r4, r1, #4
 8007b3a:	bfb8      	it	lt
 8007b3c:	18e4      	addlt	r4, r4, r3
 8007b3e:	f7ff ff71 	bl	8007a24 <__malloc_lock>
 8007b42:	4a1e      	ldr	r2, [pc, #120]	; (8007bbc <_free_r+0x94>)
 8007b44:	9801      	ldr	r0, [sp, #4]
 8007b46:	6813      	ldr	r3, [r2, #0]
 8007b48:	b933      	cbnz	r3, 8007b58 <_free_r+0x30>
 8007b4a:	6063      	str	r3, [r4, #4]
 8007b4c:	6014      	str	r4, [r2, #0]
 8007b4e:	b003      	add	sp, #12
 8007b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b54:	f7ff bf6c 	b.w	8007a30 <__malloc_unlock>
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	d908      	bls.n	8007b6e <_free_r+0x46>
 8007b5c:	6825      	ldr	r5, [r4, #0]
 8007b5e:	1961      	adds	r1, r4, r5
 8007b60:	428b      	cmp	r3, r1
 8007b62:	bf01      	itttt	eq
 8007b64:	6819      	ldreq	r1, [r3, #0]
 8007b66:	685b      	ldreq	r3, [r3, #4]
 8007b68:	1949      	addeq	r1, r1, r5
 8007b6a:	6021      	streq	r1, [r4, #0]
 8007b6c:	e7ed      	b.n	8007b4a <_free_r+0x22>
 8007b6e:	461a      	mov	r2, r3
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	b10b      	cbz	r3, 8007b78 <_free_r+0x50>
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	d9fa      	bls.n	8007b6e <_free_r+0x46>
 8007b78:	6811      	ldr	r1, [r2, #0]
 8007b7a:	1855      	adds	r5, r2, r1
 8007b7c:	42a5      	cmp	r5, r4
 8007b7e:	d10b      	bne.n	8007b98 <_free_r+0x70>
 8007b80:	6824      	ldr	r4, [r4, #0]
 8007b82:	4421      	add	r1, r4
 8007b84:	1854      	adds	r4, r2, r1
 8007b86:	42a3      	cmp	r3, r4
 8007b88:	6011      	str	r1, [r2, #0]
 8007b8a:	d1e0      	bne.n	8007b4e <_free_r+0x26>
 8007b8c:	681c      	ldr	r4, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	6053      	str	r3, [r2, #4]
 8007b92:	440c      	add	r4, r1
 8007b94:	6014      	str	r4, [r2, #0]
 8007b96:	e7da      	b.n	8007b4e <_free_r+0x26>
 8007b98:	d902      	bls.n	8007ba0 <_free_r+0x78>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	6003      	str	r3, [r0, #0]
 8007b9e:	e7d6      	b.n	8007b4e <_free_r+0x26>
 8007ba0:	6825      	ldr	r5, [r4, #0]
 8007ba2:	1961      	adds	r1, r4, r5
 8007ba4:	428b      	cmp	r3, r1
 8007ba6:	bf04      	itt	eq
 8007ba8:	6819      	ldreq	r1, [r3, #0]
 8007baa:	685b      	ldreq	r3, [r3, #4]
 8007bac:	6063      	str	r3, [r4, #4]
 8007bae:	bf04      	itt	eq
 8007bb0:	1949      	addeq	r1, r1, r5
 8007bb2:	6021      	streq	r1, [r4, #0]
 8007bb4:	6054      	str	r4, [r2, #4]
 8007bb6:	e7ca      	b.n	8007b4e <_free_r+0x26>
 8007bb8:	b003      	add	sp, #12
 8007bba:	bd30      	pop	{r4, r5, pc}
 8007bbc:	20000650 	.word	0x20000650

08007bc0 <__ssputs_r>:
 8007bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc4:	688e      	ldr	r6, [r1, #8]
 8007bc6:	461f      	mov	r7, r3
 8007bc8:	42be      	cmp	r6, r7
 8007bca:	680b      	ldr	r3, [r1, #0]
 8007bcc:	4682      	mov	sl, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	4690      	mov	r8, r2
 8007bd2:	d82c      	bhi.n	8007c2e <__ssputs_r+0x6e>
 8007bd4:	898a      	ldrh	r2, [r1, #12]
 8007bd6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bda:	d026      	beq.n	8007c2a <__ssputs_r+0x6a>
 8007bdc:	6965      	ldr	r5, [r4, #20]
 8007bde:	6909      	ldr	r1, [r1, #16]
 8007be0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007be4:	eba3 0901 	sub.w	r9, r3, r1
 8007be8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bec:	1c7b      	adds	r3, r7, #1
 8007bee:	444b      	add	r3, r9
 8007bf0:	106d      	asrs	r5, r5, #1
 8007bf2:	429d      	cmp	r5, r3
 8007bf4:	bf38      	it	cc
 8007bf6:	461d      	movcc	r5, r3
 8007bf8:	0553      	lsls	r3, r2, #21
 8007bfa:	d527      	bpl.n	8007c4c <__ssputs_r+0x8c>
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	f7ff fe91 	bl	8007924 <_malloc_r>
 8007c02:	4606      	mov	r6, r0
 8007c04:	b360      	cbz	r0, 8007c60 <__ssputs_r+0xa0>
 8007c06:	6921      	ldr	r1, [r4, #16]
 8007c08:	464a      	mov	r2, r9
 8007c0a:	f000 fadb 	bl	80081c4 <memcpy>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c18:	81a3      	strh	r3, [r4, #12]
 8007c1a:	6126      	str	r6, [r4, #16]
 8007c1c:	6165      	str	r5, [r4, #20]
 8007c1e:	444e      	add	r6, r9
 8007c20:	eba5 0509 	sub.w	r5, r5, r9
 8007c24:	6026      	str	r6, [r4, #0]
 8007c26:	60a5      	str	r5, [r4, #8]
 8007c28:	463e      	mov	r6, r7
 8007c2a:	42be      	cmp	r6, r7
 8007c2c:	d900      	bls.n	8007c30 <__ssputs_r+0x70>
 8007c2e:	463e      	mov	r6, r7
 8007c30:	6820      	ldr	r0, [r4, #0]
 8007c32:	4632      	mov	r2, r6
 8007c34:	4641      	mov	r1, r8
 8007c36:	f000 faab 	bl	8008190 <memmove>
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	1b9b      	subs	r3, r3, r6
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	4433      	add	r3, r6
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	2000      	movs	r0, #0
 8007c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	f000 fac7 	bl	80081e0 <_realloc_r>
 8007c52:	4606      	mov	r6, r0
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1e0      	bne.n	8007c1a <__ssputs_r+0x5a>
 8007c58:	6921      	ldr	r1, [r4, #16]
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f7ff ff64 	bl	8007b28 <_free_r>
 8007c60:	230c      	movs	r3, #12
 8007c62:	f8ca 3000 	str.w	r3, [sl]
 8007c66:	89a3      	ldrh	r3, [r4, #12]
 8007c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6c:	81a3      	strh	r3, [r4, #12]
 8007c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c72:	e7e9      	b.n	8007c48 <__ssputs_r+0x88>

08007c74 <_svfiprintf_r>:
 8007c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c78:	4698      	mov	r8, r3
 8007c7a:	898b      	ldrh	r3, [r1, #12]
 8007c7c:	061b      	lsls	r3, r3, #24
 8007c7e:	b09d      	sub	sp, #116	; 0x74
 8007c80:	4607      	mov	r7, r0
 8007c82:	460d      	mov	r5, r1
 8007c84:	4614      	mov	r4, r2
 8007c86:	d50e      	bpl.n	8007ca6 <_svfiprintf_r+0x32>
 8007c88:	690b      	ldr	r3, [r1, #16]
 8007c8a:	b963      	cbnz	r3, 8007ca6 <_svfiprintf_r+0x32>
 8007c8c:	2140      	movs	r1, #64	; 0x40
 8007c8e:	f7ff fe49 	bl	8007924 <_malloc_r>
 8007c92:	6028      	str	r0, [r5, #0]
 8007c94:	6128      	str	r0, [r5, #16]
 8007c96:	b920      	cbnz	r0, 8007ca2 <_svfiprintf_r+0x2e>
 8007c98:	230c      	movs	r3, #12
 8007c9a:	603b      	str	r3, [r7, #0]
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca0:	e0d0      	b.n	8007e44 <_svfiprintf_r+0x1d0>
 8007ca2:	2340      	movs	r3, #64	; 0x40
 8007ca4:	616b      	str	r3, [r5, #20]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8007caa:	2320      	movs	r3, #32
 8007cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cb4:	2330      	movs	r3, #48	; 0x30
 8007cb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007e5c <_svfiprintf_r+0x1e8>
 8007cba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cbe:	f04f 0901 	mov.w	r9, #1
 8007cc2:	4623      	mov	r3, r4
 8007cc4:	469a      	mov	sl, r3
 8007cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cca:	b10a      	cbz	r2, 8007cd0 <_svfiprintf_r+0x5c>
 8007ccc:	2a25      	cmp	r2, #37	; 0x25
 8007cce:	d1f9      	bne.n	8007cc4 <_svfiprintf_r+0x50>
 8007cd0:	ebba 0b04 	subs.w	fp, sl, r4
 8007cd4:	d00b      	beq.n	8007cee <_svfiprintf_r+0x7a>
 8007cd6:	465b      	mov	r3, fp
 8007cd8:	4622      	mov	r2, r4
 8007cda:	4629      	mov	r1, r5
 8007cdc:	4638      	mov	r0, r7
 8007cde:	f7ff ff6f 	bl	8007bc0 <__ssputs_r>
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	f000 80a9 	beq.w	8007e3a <_svfiprintf_r+0x1c6>
 8007ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cea:	445a      	add	r2, fp
 8007cec:	9209      	str	r2, [sp, #36]	; 0x24
 8007cee:	f89a 3000 	ldrb.w	r3, [sl]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 80a1 	beq.w	8007e3a <_svfiprintf_r+0x1c6>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d02:	f10a 0a01 	add.w	sl, sl, #1
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	9307      	str	r3, [sp, #28]
 8007d0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d0e:	931a      	str	r3, [sp, #104]	; 0x68
 8007d10:	4654      	mov	r4, sl
 8007d12:	2205      	movs	r2, #5
 8007d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d18:	4850      	ldr	r0, [pc, #320]	; (8007e5c <_svfiprintf_r+0x1e8>)
 8007d1a:	f7f8 fa59 	bl	80001d0 <memchr>
 8007d1e:	9a04      	ldr	r2, [sp, #16]
 8007d20:	b9d8      	cbnz	r0, 8007d5a <_svfiprintf_r+0xe6>
 8007d22:	06d0      	lsls	r0, r2, #27
 8007d24:	bf44      	itt	mi
 8007d26:	2320      	movmi	r3, #32
 8007d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d2c:	0711      	lsls	r1, r2, #28
 8007d2e:	bf44      	itt	mi
 8007d30:	232b      	movmi	r3, #43	; 0x2b
 8007d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d36:	f89a 3000 	ldrb.w	r3, [sl]
 8007d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d3c:	d015      	beq.n	8007d6a <_svfiprintf_r+0xf6>
 8007d3e:	9a07      	ldr	r2, [sp, #28]
 8007d40:	4654      	mov	r4, sl
 8007d42:	2000      	movs	r0, #0
 8007d44:	f04f 0c0a 	mov.w	ip, #10
 8007d48:	4621      	mov	r1, r4
 8007d4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d4e:	3b30      	subs	r3, #48	; 0x30
 8007d50:	2b09      	cmp	r3, #9
 8007d52:	d94d      	bls.n	8007df0 <_svfiprintf_r+0x17c>
 8007d54:	b1b0      	cbz	r0, 8007d84 <_svfiprintf_r+0x110>
 8007d56:	9207      	str	r2, [sp, #28]
 8007d58:	e014      	b.n	8007d84 <_svfiprintf_r+0x110>
 8007d5a:	eba0 0308 	sub.w	r3, r0, r8
 8007d5e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d62:	4313      	orrs	r3, r2
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	46a2      	mov	sl, r4
 8007d68:	e7d2      	b.n	8007d10 <_svfiprintf_r+0x9c>
 8007d6a:	9b03      	ldr	r3, [sp, #12]
 8007d6c:	1d19      	adds	r1, r3, #4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	9103      	str	r1, [sp, #12]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bfbb      	ittet	lt
 8007d76:	425b      	neglt	r3, r3
 8007d78:	f042 0202 	orrlt.w	r2, r2, #2
 8007d7c:	9307      	strge	r3, [sp, #28]
 8007d7e:	9307      	strlt	r3, [sp, #28]
 8007d80:	bfb8      	it	lt
 8007d82:	9204      	strlt	r2, [sp, #16]
 8007d84:	7823      	ldrb	r3, [r4, #0]
 8007d86:	2b2e      	cmp	r3, #46	; 0x2e
 8007d88:	d10c      	bne.n	8007da4 <_svfiprintf_r+0x130>
 8007d8a:	7863      	ldrb	r3, [r4, #1]
 8007d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d8e:	d134      	bne.n	8007dfa <_svfiprintf_r+0x186>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	1d1a      	adds	r2, r3, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	9203      	str	r2, [sp, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bfb8      	it	lt
 8007d9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007da0:	3402      	adds	r4, #2
 8007da2:	9305      	str	r3, [sp, #20]
 8007da4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007e6c <_svfiprintf_r+0x1f8>
 8007da8:	7821      	ldrb	r1, [r4, #0]
 8007daa:	2203      	movs	r2, #3
 8007dac:	4650      	mov	r0, sl
 8007dae:	f7f8 fa0f 	bl	80001d0 <memchr>
 8007db2:	b138      	cbz	r0, 8007dc4 <_svfiprintf_r+0x150>
 8007db4:	9b04      	ldr	r3, [sp, #16]
 8007db6:	eba0 000a 	sub.w	r0, r0, sl
 8007dba:	2240      	movs	r2, #64	; 0x40
 8007dbc:	4082      	lsls	r2, r0
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	3401      	adds	r4, #1
 8007dc2:	9304      	str	r3, [sp, #16]
 8007dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc8:	4825      	ldr	r0, [pc, #148]	; (8007e60 <_svfiprintf_r+0x1ec>)
 8007dca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dce:	2206      	movs	r2, #6
 8007dd0:	f7f8 f9fe 	bl	80001d0 <memchr>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d038      	beq.n	8007e4a <_svfiprintf_r+0x1d6>
 8007dd8:	4b22      	ldr	r3, [pc, #136]	; (8007e64 <_svfiprintf_r+0x1f0>)
 8007dda:	bb1b      	cbnz	r3, 8007e24 <_svfiprintf_r+0x1b0>
 8007ddc:	9b03      	ldr	r3, [sp, #12]
 8007dde:	3307      	adds	r3, #7
 8007de0:	f023 0307 	bic.w	r3, r3, #7
 8007de4:	3308      	adds	r3, #8
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dea:	4433      	add	r3, r6
 8007dec:	9309      	str	r3, [sp, #36]	; 0x24
 8007dee:	e768      	b.n	8007cc2 <_svfiprintf_r+0x4e>
 8007df0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007df4:	460c      	mov	r4, r1
 8007df6:	2001      	movs	r0, #1
 8007df8:	e7a6      	b.n	8007d48 <_svfiprintf_r+0xd4>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	3401      	adds	r4, #1
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	4619      	mov	r1, r3
 8007e02:	f04f 0c0a 	mov.w	ip, #10
 8007e06:	4620      	mov	r0, r4
 8007e08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e0c:	3a30      	subs	r2, #48	; 0x30
 8007e0e:	2a09      	cmp	r2, #9
 8007e10:	d903      	bls.n	8007e1a <_svfiprintf_r+0x1a6>
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0c6      	beq.n	8007da4 <_svfiprintf_r+0x130>
 8007e16:	9105      	str	r1, [sp, #20]
 8007e18:	e7c4      	b.n	8007da4 <_svfiprintf_r+0x130>
 8007e1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e1e:	4604      	mov	r4, r0
 8007e20:	2301      	movs	r3, #1
 8007e22:	e7f0      	b.n	8007e06 <_svfiprintf_r+0x192>
 8007e24:	ab03      	add	r3, sp, #12
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4b0f      	ldr	r3, [pc, #60]	; (8007e68 <_svfiprintf_r+0x1f4>)
 8007e2c:	a904      	add	r1, sp, #16
 8007e2e:	4638      	mov	r0, r7
 8007e30:	f3af 8000 	nop.w
 8007e34:	1c42      	adds	r2, r0, #1
 8007e36:	4606      	mov	r6, r0
 8007e38:	d1d6      	bne.n	8007de8 <_svfiprintf_r+0x174>
 8007e3a:	89ab      	ldrh	r3, [r5, #12]
 8007e3c:	065b      	lsls	r3, r3, #25
 8007e3e:	f53f af2d 	bmi.w	8007c9c <_svfiprintf_r+0x28>
 8007e42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e44:	b01d      	add	sp, #116	; 0x74
 8007e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4a:	ab03      	add	r3, sp, #12
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	462a      	mov	r2, r5
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <_svfiprintf_r+0x1f4>)
 8007e52:	a904      	add	r1, sp, #16
 8007e54:	4638      	mov	r0, r7
 8007e56:	f000 f879 	bl	8007f4c <_printf_i>
 8007e5a:	e7eb      	b.n	8007e34 <_svfiprintf_r+0x1c0>
 8007e5c:	08008308 	.word	0x08008308
 8007e60:	08008312 	.word	0x08008312
 8007e64:	00000000 	.word	0x00000000
 8007e68:	08007bc1 	.word	0x08007bc1
 8007e6c:	0800830e 	.word	0x0800830e

08007e70 <_printf_common>:
 8007e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	4616      	mov	r6, r2
 8007e76:	4699      	mov	r9, r3
 8007e78:	688a      	ldr	r2, [r1, #8]
 8007e7a:	690b      	ldr	r3, [r1, #16]
 8007e7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e80:	4293      	cmp	r3, r2
 8007e82:	bfb8      	it	lt
 8007e84:	4613      	movlt	r3, r2
 8007e86:	6033      	str	r3, [r6, #0]
 8007e88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e8c:	4607      	mov	r7, r0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	b10a      	cbz	r2, 8007e96 <_printf_common+0x26>
 8007e92:	3301      	adds	r3, #1
 8007e94:	6033      	str	r3, [r6, #0]
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	0699      	lsls	r1, r3, #26
 8007e9a:	bf42      	ittt	mi
 8007e9c:	6833      	ldrmi	r3, [r6, #0]
 8007e9e:	3302      	addmi	r3, #2
 8007ea0:	6033      	strmi	r3, [r6, #0]
 8007ea2:	6825      	ldr	r5, [r4, #0]
 8007ea4:	f015 0506 	ands.w	r5, r5, #6
 8007ea8:	d106      	bne.n	8007eb8 <_printf_common+0x48>
 8007eaa:	f104 0a19 	add.w	sl, r4, #25
 8007eae:	68e3      	ldr	r3, [r4, #12]
 8007eb0:	6832      	ldr	r2, [r6, #0]
 8007eb2:	1a9b      	subs	r3, r3, r2
 8007eb4:	42ab      	cmp	r3, r5
 8007eb6:	dc26      	bgt.n	8007f06 <_printf_common+0x96>
 8007eb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ebc:	1e13      	subs	r3, r2, #0
 8007ebe:	6822      	ldr	r2, [r4, #0]
 8007ec0:	bf18      	it	ne
 8007ec2:	2301      	movne	r3, #1
 8007ec4:	0692      	lsls	r2, r2, #26
 8007ec6:	d42b      	bmi.n	8007f20 <_printf_common+0xb0>
 8007ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ecc:	4649      	mov	r1, r9
 8007ece:	4638      	mov	r0, r7
 8007ed0:	47c0      	blx	r8
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d01e      	beq.n	8007f14 <_printf_common+0xa4>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	6922      	ldr	r2, [r4, #16]
 8007eda:	f003 0306 	and.w	r3, r3, #6
 8007ede:	2b04      	cmp	r3, #4
 8007ee0:	bf02      	ittt	eq
 8007ee2:	68e5      	ldreq	r5, [r4, #12]
 8007ee4:	6833      	ldreq	r3, [r6, #0]
 8007ee6:	1aed      	subeq	r5, r5, r3
 8007ee8:	68a3      	ldr	r3, [r4, #8]
 8007eea:	bf0c      	ite	eq
 8007eec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ef0:	2500      	movne	r5, #0
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	bfc4      	itt	gt
 8007ef6:	1a9b      	subgt	r3, r3, r2
 8007ef8:	18ed      	addgt	r5, r5, r3
 8007efa:	2600      	movs	r6, #0
 8007efc:	341a      	adds	r4, #26
 8007efe:	42b5      	cmp	r5, r6
 8007f00:	d11a      	bne.n	8007f38 <_printf_common+0xc8>
 8007f02:	2000      	movs	r0, #0
 8007f04:	e008      	b.n	8007f18 <_printf_common+0xa8>
 8007f06:	2301      	movs	r3, #1
 8007f08:	4652      	mov	r2, sl
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	47c0      	blx	r8
 8007f10:	3001      	adds	r0, #1
 8007f12:	d103      	bne.n	8007f1c <_printf_common+0xac>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1c:	3501      	adds	r5, #1
 8007f1e:	e7c6      	b.n	8007eae <_printf_common+0x3e>
 8007f20:	18e1      	adds	r1, r4, r3
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	2030      	movs	r0, #48	; 0x30
 8007f26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f2a:	4422      	add	r2, r4
 8007f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f34:	3302      	adds	r3, #2
 8007f36:	e7c7      	b.n	8007ec8 <_printf_common+0x58>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4622      	mov	r2, r4
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	4638      	mov	r0, r7
 8007f40:	47c0      	blx	r8
 8007f42:	3001      	adds	r0, #1
 8007f44:	d0e6      	beq.n	8007f14 <_printf_common+0xa4>
 8007f46:	3601      	adds	r6, #1
 8007f48:	e7d9      	b.n	8007efe <_printf_common+0x8e>
	...

08007f4c <_printf_i>:
 8007f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	7e0f      	ldrb	r7, [r1, #24]
 8007f52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f54:	2f78      	cmp	r7, #120	; 0x78
 8007f56:	4691      	mov	r9, r2
 8007f58:	4680      	mov	r8, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	469a      	mov	sl, r3
 8007f5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f62:	d807      	bhi.n	8007f74 <_printf_i+0x28>
 8007f64:	2f62      	cmp	r7, #98	; 0x62
 8007f66:	d80a      	bhi.n	8007f7e <_printf_i+0x32>
 8007f68:	2f00      	cmp	r7, #0
 8007f6a:	f000 80d4 	beq.w	8008116 <_printf_i+0x1ca>
 8007f6e:	2f58      	cmp	r7, #88	; 0x58
 8007f70:	f000 80c0 	beq.w	80080f4 <_printf_i+0x1a8>
 8007f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f7c:	e03a      	b.n	8007ff4 <_printf_i+0xa8>
 8007f7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f82:	2b15      	cmp	r3, #21
 8007f84:	d8f6      	bhi.n	8007f74 <_printf_i+0x28>
 8007f86:	a101      	add	r1, pc, #4	; (adr r1, 8007f8c <_printf_i+0x40>)
 8007f88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f8c:	08007fe5 	.word	0x08007fe5
 8007f90:	08007ff9 	.word	0x08007ff9
 8007f94:	08007f75 	.word	0x08007f75
 8007f98:	08007f75 	.word	0x08007f75
 8007f9c:	08007f75 	.word	0x08007f75
 8007fa0:	08007f75 	.word	0x08007f75
 8007fa4:	08007ff9 	.word	0x08007ff9
 8007fa8:	08007f75 	.word	0x08007f75
 8007fac:	08007f75 	.word	0x08007f75
 8007fb0:	08007f75 	.word	0x08007f75
 8007fb4:	08007f75 	.word	0x08007f75
 8007fb8:	080080fd 	.word	0x080080fd
 8007fbc:	08008025 	.word	0x08008025
 8007fc0:	080080b7 	.word	0x080080b7
 8007fc4:	08007f75 	.word	0x08007f75
 8007fc8:	08007f75 	.word	0x08007f75
 8007fcc:	0800811f 	.word	0x0800811f
 8007fd0:	08007f75 	.word	0x08007f75
 8007fd4:	08008025 	.word	0x08008025
 8007fd8:	08007f75 	.word	0x08007f75
 8007fdc:	08007f75 	.word	0x08007f75
 8007fe0:	080080bf 	.word	0x080080bf
 8007fe4:	682b      	ldr	r3, [r5, #0]
 8007fe6:	1d1a      	adds	r2, r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	602a      	str	r2, [r5, #0]
 8007fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e09f      	b.n	8008138 <_printf_i+0x1ec>
 8007ff8:	6820      	ldr	r0, [r4, #0]
 8007ffa:	682b      	ldr	r3, [r5, #0]
 8007ffc:	0607      	lsls	r7, r0, #24
 8007ffe:	f103 0104 	add.w	r1, r3, #4
 8008002:	6029      	str	r1, [r5, #0]
 8008004:	d501      	bpl.n	800800a <_printf_i+0xbe>
 8008006:	681e      	ldr	r6, [r3, #0]
 8008008:	e003      	b.n	8008012 <_printf_i+0xc6>
 800800a:	0646      	lsls	r6, r0, #25
 800800c:	d5fb      	bpl.n	8008006 <_printf_i+0xba>
 800800e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008012:	2e00      	cmp	r6, #0
 8008014:	da03      	bge.n	800801e <_printf_i+0xd2>
 8008016:	232d      	movs	r3, #45	; 0x2d
 8008018:	4276      	negs	r6, r6
 800801a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800801e:	485a      	ldr	r0, [pc, #360]	; (8008188 <_printf_i+0x23c>)
 8008020:	230a      	movs	r3, #10
 8008022:	e012      	b.n	800804a <_printf_i+0xfe>
 8008024:	682b      	ldr	r3, [r5, #0]
 8008026:	6820      	ldr	r0, [r4, #0]
 8008028:	1d19      	adds	r1, r3, #4
 800802a:	6029      	str	r1, [r5, #0]
 800802c:	0605      	lsls	r5, r0, #24
 800802e:	d501      	bpl.n	8008034 <_printf_i+0xe8>
 8008030:	681e      	ldr	r6, [r3, #0]
 8008032:	e002      	b.n	800803a <_printf_i+0xee>
 8008034:	0641      	lsls	r1, r0, #25
 8008036:	d5fb      	bpl.n	8008030 <_printf_i+0xe4>
 8008038:	881e      	ldrh	r6, [r3, #0]
 800803a:	4853      	ldr	r0, [pc, #332]	; (8008188 <_printf_i+0x23c>)
 800803c:	2f6f      	cmp	r7, #111	; 0x6f
 800803e:	bf0c      	ite	eq
 8008040:	2308      	moveq	r3, #8
 8008042:	230a      	movne	r3, #10
 8008044:	2100      	movs	r1, #0
 8008046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800804a:	6865      	ldr	r5, [r4, #4]
 800804c:	60a5      	str	r5, [r4, #8]
 800804e:	2d00      	cmp	r5, #0
 8008050:	bfa2      	ittt	ge
 8008052:	6821      	ldrge	r1, [r4, #0]
 8008054:	f021 0104 	bicge.w	r1, r1, #4
 8008058:	6021      	strge	r1, [r4, #0]
 800805a:	b90e      	cbnz	r6, 8008060 <_printf_i+0x114>
 800805c:	2d00      	cmp	r5, #0
 800805e:	d04b      	beq.n	80080f8 <_printf_i+0x1ac>
 8008060:	4615      	mov	r5, r2
 8008062:	fbb6 f1f3 	udiv	r1, r6, r3
 8008066:	fb03 6711 	mls	r7, r3, r1, r6
 800806a:	5dc7      	ldrb	r7, [r0, r7]
 800806c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008070:	4637      	mov	r7, r6
 8008072:	42bb      	cmp	r3, r7
 8008074:	460e      	mov	r6, r1
 8008076:	d9f4      	bls.n	8008062 <_printf_i+0x116>
 8008078:	2b08      	cmp	r3, #8
 800807a:	d10b      	bne.n	8008094 <_printf_i+0x148>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	07de      	lsls	r6, r3, #31
 8008080:	d508      	bpl.n	8008094 <_printf_i+0x148>
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	6861      	ldr	r1, [r4, #4]
 8008086:	4299      	cmp	r1, r3
 8008088:	bfde      	ittt	le
 800808a:	2330      	movle	r3, #48	; 0x30
 800808c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008090:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008094:	1b52      	subs	r2, r2, r5
 8008096:	6122      	str	r2, [r4, #16]
 8008098:	f8cd a000 	str.w	sl, [sp]
 800809c:	464b      	mov	r3, r9
 800809e:	aa03      	add	r2, sp, #12
 80080a0:	4621      	mov	r1, r4
 80080a2:	4640      	mov	r0, r8
 80080a4:	f7ff fee4 	bl	8007e70 <_printf_common>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d14a      	bne.n	8008142 <_printf_i+0x1f6>
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	b004      	add	sp, #16
 80080b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	f043 0320 	orr.w	r3, r3, #32
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	4833      	ldr	r0, [pc, #204]	; (800818c <_printf_i+0x240>)
 80080c0:	2778      	movs	r7, #120	; 0x78
 80080c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	6829      	ldr	r1, [r5, #0]
 80080ca:	061f      	lsls	r7, r3, #24
 80080cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80080d0:	d402      	bmi.n	80080d8 <_printf_i+0x18c>
 80080d2:	065f      	lsls	r7, r3, #25
 80080d4:	bf48      	it	mi
 80080d6:	b2b6      	uxthmi	r6, r6
 80080d8:	07df      	lsls	r7, r3, #31
 80080da:	bf48      	it	mi
 80080dc:	f043 0320 	orrmi.w	r3, r3, #32
 80080e0:	6029      	str	r1, [r5, #0]
 80080e2:	bf48      	it	mi
 80080e4:	6023      	strmi	r3, [r4, #0]
 80080e6:	b91e      	cbnz	r6, 80080f0 <_printf_i+0x1a4>
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	f023 0320 	bic.w	r3, r3, #32
 80080ee:	6023      	str	r3, [r4, #0]
 80080f0:	2310      	movs	r3, #16
 80080f2:	e7a7      	b.n	8008044 <_printf_i+0xf8>
 80080f4:	4824      	ldr	r0, [pc, #144]	; (8008188 <_printf_i+0x23c>)
 80080f6:	e7e4      	b.n	80080c2 <_printf_i+0x176>
 80080f8:	4615      	mov	r5, r2
 80080fa:	e7bd      	b.n	8008078 <_printf_i+0x12c>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	6826      	ldr	r6, [r4, #0]
 8008100:	6961      	ldr	r1, [r4, #20]
 8008102:	1d18      	adds	r0, r3, #4
 8008104:	6028      	str	r0, [r5, #0]
 8008106:	0635      	lsls	r5, r6, #24
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	d501      	bpl.n	8008110 <_printf_i+0x1c4>
 800810c:	6019      	str	r1, [r3, #0]
 800810e:	e002      	b.n	8008116 <_printf_i+0x1ca>
 8008110:	0670      	lsls	r0, r6, #25
 8008112:	d5fb      	bpl.n	800810c <_printf_i+0x1c0>
 8008114:	8019      	strh	r1, [r3, #0]
 8008116:	2300      	movs	r3, #0
 8008118:	6123      	str	r3, [r4, #16]
 800811a:	4615      	mov	r5, r2
 800811c:	e7bc      	b.n	8008098 <_printf_i+0x14c>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	1d1a      	adds	r2, r3, #4
 8008122:	602a      	str	r2, [r5, #0]
 8008124:	681d      	ldr	r5, [r3, #0]
 8008126:	6862      	ldr	r2, [r4, #4]
 8008128:	2100      	movs	r1, #0
 800812a:	4628      	mov	r0, r5
 800812c:	f7f8 f850 	bl	80001d0 <memchr>
 8008130:	b108      	cbz	r0, 8008136 <_printf_i+0x1ea>
 8008132:	1b40      	subs	r0, r0, r5
 8008134:	6060      	str	r0, [r4, #4]
 8008136:	6863      	ldr	r3, [r4, #4]
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	2300      	movs	r3, #0
 800813c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008140:	e7aa      	b.n	8008098 <_printf_i+0x14c>
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	462a      	mov	r2, r5
 8008146:	4649      	mov	r1, r9
 8008148:	4640      	mov	r0, r8
 800814a:	47d0      	blx	sl
 800814c:	3001      	adds	r0, #1
 800814e:	d0ad      	beq.n	80080ac <_printf_i+0x160>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	079b      	lsls	r3, r3, #30
 8008154:	d413      	bmi.n	800817e <_printf_i+0x232>
 8008156:	68e0      	ldr	r0, [r4, #12]
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	4298      	cmp	r0, r3
 800815c:	bfb8      	it	lt
 800815e:	4618      	movlt	r0, r3
 8008160:	e7a6      	b.n	80080b0 <_printf_i+0x164>
 8008162:	2301      	movs	r3, #1
 8008164:	4632      	mov	r2, r6
 8008166:	4649      	mov	r1, r9
 8008168:	4640      	mov	r0, r8
 800816a:	47d0      	blx	sl
 800816c:	3001      	adds	r0, #1
 800816e:	d09d      	beq.n	80080ac <_printf_i+0x160>
 8008170:	3501      	adds	r5, #1
 8008172:	68e3      	ldr	r3, [r4, #12]
 8008174:	9903      	ldr	r1, [sp, #12]
 8008176:	1a5b      	subs	r3, r3, r1
 8008178:	42ab      	cmp	r3, r5
 800817a:	dcf2      	bgt.n	8008162 <_printf_i+0x216>
 800817c:	e7eb      	b.n	8008156 <_printf_i+0x20a>
 800817e:	2500      	movs	r5, #0
 8008180:	f104 0619 	add.w	r6, r4, #25
 8008184:	e7f5      	b.n	8008172 <_printf_i+0x226>
 8008186:	bf00      	nop
 8008188:	08008319 	.word	0x08008319
 800818c:	0800832a 	.word	0x0800832a

08008190 <memmove>:
 8008190:	4288      	cmp	r0, r1
 8008192:	b510      	push	{r4, lr}
 8008194:	eb01 0402 	add.w	r4, r1, r2
 8008198:	d902      	bls.n	80081a0 <memmove+0x10>
 800819a:	4284      	cmp	r4, r0
 800819c:	4623      	mov	r3, r4
 800819e:	d807      	bhi.n	80081b0 <memmove+0x20>
 80081a0:	1e43      	subs	r3, r0, #1
 80081a2:	42a1      	cmp	r1, r4
 80081a4:	d008      	beq.n	80081b8 <memmove+0x28>
 80081a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081ae:	e7f8      	b.n	80081a2 <memmove+0x12>
 80081b0:	4402      	add	r2, r0
 80081b2:	4601      	mov	r1, r0
 80081b4:	428a      	cmp	r2, r1
 80081b6:	d100      	bne.n	80081ba <memmove+0x2a>
 80081b8:	bd10      	pop	{r4, pc}
 80081ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081c2:	e7f7      	b.n	80081b4 <memmove+0x24>

080081c4 <memcpy>:
 80081c4:	440a      	add	r2, r1
 80081c6:	4291      	cmp	r1, r2
 80081c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80081cc:	d100      	bne.n	80081d0 <memcpy+0xc>
 80081ce:	4770      	bx	lr
 80081d0:	b510      	push	{r4, lr}
 80081d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081da:	4291      	cmp	r1, r2
 80081dc:	d1f9      	bne.n	80081d2 <memcpy+0xe>
 80081de:	bd10      	pop	{r4, pc}

080081e0 <_realloc_r>:
 80081e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e4:	4680      	mov	r8, r0
 80081e6:	4614      	mov	r4, r2
 80081e8:	460e      	mov	r6, r1
 80081ea:	b921      	cbnz	r1, 80081f6 <_realloc_r+0x16>
 80081ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	4611      	mov	r1, r2
 80081f2:	f7ff bb97 	b.w	8007924 <_malloc_r>
 80081f6:	b92a      	cbnz	r2, 8008204 <_realloc_r+0x24>
 80081f8:	f7ff fc96 	bl	8007b28 <_free_r>
 80081fc:	4625      	mov	r5, r4
 80081fe:	4628      	mov	r0, r5
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	f000 f81b 	bl	800823e <_malloc_usable_size_r>
 8008208:	4284      	cmp	r4, r0
 800820a:	4607      	mov	r7, r0
 800820c:	d802      	bhi.n	8008214 <_realloc_r+0x34>
 800820e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008212:	d812      	bhi.n	800823a <_realloc_r+0x5a>
 8008214:	4621      	mov	r1, r4
 8008216:	4640      	mov	r0, r8
 8008218:	f7ff fb84 	bl	8007924 <_malloc_r>
 800821c:	4605      	mov	r5, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	d0ed      	beq.n	80081fe <_realloc_r+0x1e>
 8008222:	42bc      	cmp	r4, r7
 8008224:	4622      	mov	r2, r4
 8008226:	4631      	mov	r1, r6
 8008228:	bf28      	it	cs
 800822a:	463a      	movcs	r2, r7
 800822c:	f7ff ffca 	bl	80081c4 <memcpy>
 8008230:	4631      	mov	r1, r6
 8008232:	4640      	mov	r0, r8
 8008234:	f7ff fc78 	bl	8007b28 <_free_r>
 8008238:	e7e1      	b.n	80081fe <_realloc_r+0x1e>
 800823a:	4635      	mov	r5, r6
 800823c:	e7df      	b.n	80081fe <_realloc_r+0x1e>

0800823e <_malloc_usable_size_r>:
 800823e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008242:	1f18      	subs	r0, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	bfbc      	itt	lt
 8008248:	580b      	ldrlt	r3, [r1, r0]
 800824a:	18c0      	addlt	r0, r0, r3
 800824c:	4770      	bx	lr
	...

08008250 <_init>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr

0800825c <_fini>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr
