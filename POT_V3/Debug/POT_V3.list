
POT_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cf4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003e7c  08003e7c  00004e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eac  08003eac  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003eac  08003eac  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003eac  08003eac  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00004eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00004eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003eb4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000418  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f011  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002299  00000000  00000000  0001404d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  000162e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d1  00000000  00000000  00016fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001db15  00000000  00000000  00017979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a3d  00000000  00000000  0003548e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3d30  00000000  00000000  00046ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fabfb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034d4  00000000  00000000  000fac40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  000fe114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e64 	.word	0x08003e64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003e64 	.word	0x08003e64

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fbe0 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81a 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f98c 	bl	80004f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f8ea 	bl	80003b0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f928 	bl	8000430 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f964 	bl	80004ac <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80001e4:	f000 f874 	bl	80002d0 <MX_ADC1_Init>

  Potentiometer_Init();
 80001e8:	f000 fa06 	bl	80005f8 <Potentiometer_Init>

  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <main+0x38>)
 80001ee:	f000 fe15 	bl	8000e1c <HAL_ADC_Start>

  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  readValue = Potentiometer_Read();
 80001f2:	f000 fa0b 	bl	800060c <Potentiometer_Read>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a02      	ldr	r2, [pc, #8]	@ (8000204 <main+0x3c>)
 80001fa:	6013      	str	r3, [r2, #0]
 80001fc:	e7f9      	b.n	80001f2 <main+0x2a>
 80001fe:	bf00      	nop
 8000200:	20000028 	.word	0x20000028
 8000204:	2000041c 	.word	0x2000041c

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b09e      	sub	sp, #120	@ 0x78
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f003 fdf7 	bl	8003e0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	223c      	movs	r2, #60	@ 0x3c
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f003 fde9 	bl	8003e0a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000238:	2303      	movs	r3, #3
 800023a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800023c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000240:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000252:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000256:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000258:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800025c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000262:	4618      	mov	r0, r3
 8000264:	f002 f916 	bl	8002494 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800026e:	f000 f9bd 	bl	80005ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000282:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000288:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800028c:	2101      	movs	r1, #1
 800028e:	4618      	mov	r0, r3
 8000290:	f003 f93e 	bl	8003510 <HAL_RCC_ClockConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800029a:	f000 f9a7 	bl	80005ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800029e:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <SystemClock_Config+0xc4>)
 80002a0:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002a6:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002b2:	463b      	mov	r3, r7
 80002b4:	4618      	mov	r0, r3
 80002b6:	f003 fb11 	bl	80038dc <HAL_RCCEx_PeriphCLKConfig>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002c0:	f000 f994 	bl	80005ec <Error_Handler>
  }
}
 80002c4:	bf00      	nop
 80002c6:	3778      	adds	r7, #120	@ 0x78
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	000200a0 	.word	0x000200a0

080002d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b08a      	sub	sp, #40	@ 0x28
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002d6:	f107 031c 	add.w	r3, r7, #28
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	611a      	str	r2, [r3, #16]
 80002f0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f2:	4b2e      	ldr	r3, [pc, #184]	@ (80003ac <MX_ADC1_Init+0xdc>)
 80002f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80002f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002fa:	4b2c      	ldr	r3, [pc, #176]	@ (80003ac <MX_ADC1_Init+0xdc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000300:	4b2a      	ldr	r3, [pc, #168]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000306:	4b29      	ldr	r3, [pc, #164]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800030c:	4b27      	ldr	r3, [pc, #156]	@ (80003ac <MX_ADC1_Init+0xdc>)
 800030e:	2201      	movs	r2, #1
 8000310:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000312:	4b26      	ldr	r3, [pc, #152]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000314:	2200      	movs	r2, #0
 8000316:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800031a:	4b24      	ldr	r3, [pc, #144]	@ (80003ac <MX_ADC1_Init+0xdc>)
 800031c:	2200      	movs	r2, #0
 800031e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000320:	4b22      	ldr	r3, [pc, #136]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000322:	2201      	movs	r2, #1
 8000324:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000326:	4b21      	ldr	r3, [pc, #132]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800032c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ac <MX_ADC1_Init+0xdc>)
 800032e:	2201      	movs	r2, #1
 8000330:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000332:	4b1e      	ldr	r3, [pc, #120]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033a:	4b1c      	ldr	r3, [pc, #112]	@ (80003ac <MX_ADC1_Init+0xdc>)
 800033c:	2204      	movs	r2, #4
 800033e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000340:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000342:	2200      	movs	r2, #0
 8000344:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000346:	4b19      	ldr	r3, [pc, #100]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000348:	2200      	movs	r2, #0
 800034a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800034c:	4817      	ldr	r0, [pc, #92]	@ (80003ac <MX_ADC1_Init+0xdc>)
 800034e:	f000 fb85 	bl	8000a5c <HAL_ADC_Init>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000358:	f000 f948 	bl	80005ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800035c:	2300      	movs	r3, #0
 800035e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000360:	f107 031c 	add.w	r3, r7, #28
 8000364:	4619      	mov	r1, r3
 8000366:	4811      	ldr	r0, [pc, #68]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000368:	f001 fa68 	bl	800183c <HAL_ADCEx_MultiModeConfigChannel>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000372:	f000 f93b 	bl	80005ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000376:	2309      	movs	r3, #9
 8000378:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800037a:	2301      	movs	r3, #1
 800037c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800037e:	2301      	movs	r3, #1
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038e:	1d3b      	adds	r3, r7, #4
 8000390:	4619      	mov	r1, r3
 8000392:	4806      	ldr	r0, [pc, #24]	@ (80003ac <MX_ADC1_Init+0xdc>)
 8000394:	f000 ff68 	bl	8001268 <HAL_ADC_ConfigChannel>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800039e:	f000 f925 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	3728      	adds	r7, #40	@ 0x28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000028 	.word	0x20000028

080003b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003b6:	4a1c      	ldr	r2, [pc, #112]	@ (8000428 <MX_I2C1_Init+0x78>)
 80003b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003bc:	4a1b      	ldr	r2, [pc, #108]	@ (800042c <MX_I2C1_Init+0x7c>)
 80003be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003c0:	4b18      	ldr	r3, [pc, #96]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c6:	4b17      	ldr	r3, [pc, #92]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003cc:	4b15      	ldr	r3, [pc, #84]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003d2:	4b14      	ldr	r3, [pc, #80]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003d8:	4b12      	ldr	r3, [pc, #72]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003de:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003ea:	480e      	ldr	r0, [pc, #56]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003ec:	f001 fe5a 	bl	80020a4 <HAL_I2C_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003f6:	f000 f8f9 	bl	80005ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003fa:	2100      	movs	r1, #0
 80003fc:	4809      	ldr	r0, [pc, #36]	@ (8000424 <MX_I2C1_Init+0x74>)
 80003fe:	f001 fee0 	bl	80021c2 <HAL_I2CEx_ConfigAnalogFilter>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000408:	f000 f8f0 	bl	80005ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800040c:	2100      	movs	r1, #0
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <MX_I2C1_Init+0x74>)
 8000410:	f001 ff22 	bl	8002258 <HAL_I2CEx_ConfigDigitalFilter>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800041a:	f000 f8e7 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000078 	.word	0x20000078
 8000428:	40005400 	.word	0x40005400
 800042c:	2000090e 	.word	0x2000090e

08000430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000436:	4a1c      	ldr	r2, [pc, #112]	@ (80004a8 <MX_SPI1_Init+0x78>)
 8000438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800043c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000448:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800044a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800044e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800045e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000462:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000466:	2208      	movs	r2, #8
 8000468:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800046c:	2200      	movs	r2, #0
 800046e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000472:	2200      	movs	r2, #0
 8000474:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000476:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800047c:	4b09      	ldr	r3, [pc, #36]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800047e:	2207      	movs	r2, #7
 8000480:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000482:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000488:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800048a:	2208      	movs	r2, #8
 800048c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000490:	f003 fbd4 	bl	8003c3c <HAL_SPI_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800049a:	f000 f8a7 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	200000cc 	.word	0x200000cc
 80004a8:	40013000 	.word	0x40013000

080004ac <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004b0:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <MX_USB_PCD_Init+0x3c>)
 80004b2:	4a0e      	ldr	r2, [pc, #56]	@ (80004ec <MX_USB_PCD_Init+0x40>)
 80004b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <MX_USB_PCD_Init+0x3c>)
 80004b8:	2208      	movs	r2, #8
 80004ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004bc:	4b0a      	ldr	r3, [pc, #40]	@ (80004e8 <MX_USB_PCD_Init+0x3c>)
 80004be:	2202      	movs	r2, #2
 80004c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004c2:	4b09      	ldr	r3, [pc, #36]	@ (80004e8 <MX_USB_PCD_Init+0x3c>)
 80004c4:	2202      	movs	r2, #2
 80004c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004c8:	4b07      	ldr	r3, [pc, #28]	@ (80004e8 <MX_USB_PCD_Init+0x3c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <MX_USB_PCD_Init+0x3c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004d4:	4804      	ldr	r0, [pc, #16]	@ (80004e8 <MX_USB_PCD_Init+0x3c>)
 80004d6:	f001 ff0b 	bl	80022f0 <HAL_PCD_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004e0:	f000 f884 	bl	80005ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000130 	.word	0x20000130
 80004ec:	40005c00 	.word	0x40005c00

080004f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	@ 0x28
 80004f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000506:	4b37      	ldr	r3, [pc, #220]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a36      	ldr	r2, [pc, #216]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 800050c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b34      	ldr	r3, [pc, #208]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b31      	ldr	r3, [pc, #196]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a30      	ldr	r2, [pc, #192]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000524:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b2e      	ldr	r3, [pc, #184]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b2b      	ldr	r3, [pc, #172]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a2a      	ldr	r2, [pc, #168]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 800053c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b25      	ldr	r3, [pc, #148]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a24      	ldr	r2, [pc, #144]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b22      	ldr	r3, [pc, #136]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b1f      	ldr	r3, [pc, #124]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a1e      	ldr	r2, [pc, #120]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 800056c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <MX_GPIO_Init+0xf4>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800057e:	2200      	movs	r2, #0
 8000580:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000584:	4818      	ldr	r0, [pc, #96]	@ (80005e8 <MX_GPIO_Init+0xf8>)
 8000586:	f001 fd75 	bl	8002074 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800058a:	2337      	movs	r3, #55	@ 0x37
 800058c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800058e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	4619      	mov	r1, r3
 800059e:	4812      	ldr	r0, [pc, #72]	@ (80005e8 <MX_GPIO_Init+0xf8>)
 80005a0:	f001 fbee 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005a4:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80005a8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b2:	2300      	movs	r3, #0
 80005b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	480a      	ldr	r0, [pc, #40]	@ (80005e8 <MX_GPIO_Init+0xf8>)
 80005be:	f001 fbdf 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d8:	f001 fbd2 	bl	8001d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	@ 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48001000 	.word	0x48001000

080005ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f0:	b672      	cpsid	i
}
 80005f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <Error_Handler+0x8>

080005f8 <Potentiometer_Init>:
#include "pot.h"

extern ADC_HandleTypeDef hadc1;

void Potentiometer_Init(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80005fc:	4802      	ldr	r0, [pc, #8]	@ (8000608 <Potentiometer_Init+0x10>)
 80005fe:	f000 fc0d 	bl	8000e1c <HAL_ADC_Start>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000028 	.word	0x20000028

0800060c <Potentiometer_Read>:

uint32_t Potentiometer_Read(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    HAL_ADC_PollForConversion(&hadc1, 1000);
 8000610:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000614:	4804      	ldr	r0, [pc, #16]	@ (8000628 <Potentiometer_Read+0x1c>)
 8000616:	f000 fd17 	bl	8001048 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 800061a:	4803      	ldr	r0, [pc, #12]	@ (8000628 <Potentiometer_Read+0x1c>)
 800061c:	f000 fe16 	bl	800124c <HAL_ADC_GetValue>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000028 	.word	0x20000028

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000632:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <HAL_MspInit+0x44>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a0e      	ldr	r2, [pc, #56]	@ (8000670 <HAL_MspInit+0x44>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <HAL_MspInit+0x44>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <HAL_MspInit+0x44>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a08      	ldr	r2, [pc, #32]	@ (8000670 <HAL_MspInit+0x44>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <HAL_MspInit+0x44>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000662:	2007      	movs	r0, #7
 8000664:	f001 fb58 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000694:	d13b      	bne.n	800070e <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 800069c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 80006a4:	695b      	ldr	r3, [r3, #20]
 80006a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a19      	ldr	r2, [pc, #100]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 80006b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	4a13      	ldr	r2, [pc, #76]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 80006cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006d0:	6153      	str	r3, [r2, #20]
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <HAL_ADC_MspInit+0xa4>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    PF2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006de:	2308      	movs	r3, #8
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	480a      	ldr	r0, [pc, #40]	@ (800071c <HAL_ADC_MspInit+0xa8>)
 80006f2:	f001 fb45 	bl	8001d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006f6:	2304      	movs	r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <HAL_ADC_MspInit+0xac>)
 800070a:	f001 fb39 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800070e:	bf00      	nop
 8000710:	3728      	adds	r7, #40	@ 0x28
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000
 800071c:	48000800 	.word	0x48000800
 8000720:	48001400 	.word	0x48001400

08000724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a17      	ldr	r2, [pc, #92]	@ (80007a0 <HAL_I2C_MspInit+0x7c>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d127      	bne.n	8000796 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <HAL_I2C_MspInit+0x80>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a16      	ldr	r2, [pc, #88]	@ (80007a4 <HAL_I2C_MspInit+0x80>)
 800074c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000750:	6153      	str	r3, [r2, #20]
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <HAL_I2C_MspInit+0x80>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800075e:	23c0      	movs	r3, #192	@ 0xc0
 8000760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000762:	2312      	movs	r3, #18
 8000764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	2301      	movs	r3, #1
 8000768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076e:	2304      	movs	r3, #4
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <HAL_I2C_MspInit+0x84>)
 800077a:	f001 fb01 	bl	8001d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <HAL_I2C_MspInit+0x80>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <HAL_I2C_MspInit+0x80>)
 8000784:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <HAL_I2C_MspInit+0x80>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000796:	bf00      	nop
 8000798:	3728      	adds	r7, #40	@ 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40005400 	.word	0x40005400
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000400 	.word	0x48000400

080007ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a17      	ldr	r2, [pc, #92]	@ (8000828 <HAL_SPI_MspInit+0x7c>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d128      	bne.n	8000820 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007ce:	4b17      	ldr	r3, [pc, #92]	@ (800082c <HAL_SPI_MspInit+0x80>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a16      	ldr	r2, [pc, #88]	@ (800082c <HAL_SPI_MspInit+0x80>)
 80007d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <HAL_SPI_MspInit+0x80>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <HAL_SPI_MspInit+0x80>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	4a10      	ldr	r2, [pc, #64]	@ (800082c <HAL_SPI_MspInit+0x80>)
 80007ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007f0:	6153      	str	r3, [r2, #20]
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <HAL_SPI_MspInit+0x80>)
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007fe:	23e0      	movs	r3, #224	@ 0xe0
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800080e:	2305      	movs	r3, #5
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081c:	f001 fab0 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	@ 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40013000 	.word	0x40013000
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <HAL_PCD_MspInit+0x80>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d129      	bne.n	80008a6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <HAL_PCD_MspInit+0x84>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <HAL_PCD_MspInit+0x84>)
 8000858:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800085c:	6153      	str	r3, [r2, #20]
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_PCD_MspInit+0x84>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800086a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800086e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800087c:	230e      	movs	r3, #14
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088a:	f001 fa79 	bl	8001d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_PCD_MspInit+0x84>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_PCD_MspInit+0x84>)
 8000894:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_PCD_MspInit+0x84>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40005c00 	.word	0x40005c00
 80008b4:	40021000 	.word	0x40021000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 f885 	bl	8000a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000974 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000940:	f7ff ffea 	bl	8000918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000944:	480c      	ldr	r0, [pc, #48]	@ (8000978 <LoopForever+0x6>)
  ldr r1, =_edata
 8000946:	490d      	ldr	r1, [pc, #52]	@ (800097c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000948:	4a0d      	ldr	r2, [pc, #52]	@ (8000980 <LoopForever+0xe>)
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800094c:	e002      	b.n	8000954 <LoopCopyDataInit>

0800094e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000952:	3304      	adds	r3, #4

08000954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000958:	d3f9      	bcc.n	800094e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095a:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <LoopForever+0x12>)
  ldr r4, =_ebss
 800095c:	4c0a      	ldr	r4, [pc, #40]	@ (8000988 <LoopForever+0x16>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000960:	e001      	b.n	8000966 <LoopFillZerobss>

08000962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000964:	3204      	adds	r2, #4

08000966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000968:	d3fb      	bcc.n	8000962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800096a:	f003 fa57 	bl	8003e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096e:	f7ff fc2b 	bl	80001c8 <main>

08000972 <LoopForever>:

LoopForever:
    b LoopForever
 8000972:	e7fe      	b.n	8000972 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000974:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000980:	08003eb4 	.word	0x08003eb4
  ldr r2, =_sbss
 8000984:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000988:	20000424 	.word	0x20000424

0800098c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC1_2_IRQHandler>
	...

08000990 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000994:	4b08      	ldr	r3, [pc, #32]	@ (80009b8 <HAL_Init+0x28>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a07      	ldr	r2, [pc, #28]	@ (80009b8 <HAL_Init+0x28>)
 800099a:	f043 0310 	orr.w	r3, r3, #16
 800099e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a0:	2003      	movs	r0, #3
 80009a2:	f001 f9b9 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a6:	2000      	movs	r0, #0
 80009a8:	f000 f808 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009ac:	f7ff fe3e 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40022000 	.word	0x40022000

080009bc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <HAL_InitTick+0x54>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <HAL_InitTick+0x58>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f9c3 	bl	8001d66 <HAL_SYSTICK_Config>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2b0f      	cmp	r3, #15
 80009ee:	d80a      	bhi.n	8000a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f0:	2200      	movs	r2, #0
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009f8:	f001 f999 	bl	8001d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009fc:	4a06      	ldr	r2, [pc, #24]	@ (8000a18 <HAL_InitTick+0x5c>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e000      	b.n	8000a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000000 	.word	0x20000000
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000004 	.word	0x20000004

08000a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	@ (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000420 	.word	0x20000420

08000a44 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000420 	.word	0x20000420

08000a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b09a      	sub	sp, #104	@ 0x68
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d101      	bne.n	8000a7c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	e1c9      	b.n	8000e10 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d176      	bne.n	8000b7c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d152      	bne.n	8000b3c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff fddf 	bl	8000674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d13b      	bne.n	8000b3c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f001 f80f 	bl	8001ae8 <ADC_Disable>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	f003 0310 	and.w	r3, r3, #16
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d12f      	bne.n	8000b3c <HAL_ADC_Init+0xe0>
 8000adc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d12b      	bne.n	8000b3c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000aec:	f023 0302 	bic.w	r3, r3, #2
 8000af0:	f043 0202 	orr.w	r2, r3, #2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000b06:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	689a      	ldr	r2, [r3, #8]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000b16:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b18:	4b86      	ldr	r3, [pc, #536]	@ (8000d34 <HAL_ADC_Init+0x2d8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a86      	ldr	r2, [pc, #536]	@ (8000d38 <HAL_ADC_Init+0x2dc>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9a      	lsrs	r2, r3, #18
 8000b24:	4613      	mov	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b2e:	e002      	b.n	8000b36 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1f9      	bne.n	8000b30 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d007      	beq.n	8000b5a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b58:	d110      	bne.n	8000b7c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f023 0312 	bic.w	r3, r3, #18
 8000b62:	f043 0210 	orr.w	r2, r3, #16
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	f043 0201 	orr.w	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f040 8136 	bne.w	8000df6 <HAL_ADC_Init+0x39a>
 8000b8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 8131 	bne.w	8000df6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 8129 	bne.w	8000df6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000bac:	f043 0202 	orr.w	r2, r3, #2
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bbc:	d004      	beq.n	8000bc8 <HAL_ADC_Init+0x16c>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a5e      	ldr	r2, [pc, #376]	@ (8000d3c <HAL_ADC_Init+0x2e0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d101      	bne.n	8000bcc <HAL_ADC_Init+0x170>
 8000bc8:	4b5d      	ldr	r3, [pc, #372]	@ (8000d40 <HAL_ADC_Init+0x2e4>)
 8000bca:	e000      	b.n	8000bce <HAL_ADC_Init+0x172>
 8000bcc:	4b5d      	ldr	r3, [pc, #372]	@ (8000d44 <HAL_ADC_Init+0x2e8>)
 8000bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd8:	d102      	bne.n	8000be0 <HAL_ADC_Init+0x184>
 8000bda:	4b58      	ldr	r3, [pc, #352]	@ (8000d3c <HAL_ADC_Init+0x2e0>)
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	e01a      	b.n	8000c16 <HAL_ADC_Init+0x1ba>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a55      	ldr	r2, [pc, #340]	@ (8000d3c <HAL_ADC_Init+0x2e0>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d103      	bne.n	8000bf2 <HAL_ADC_Init+0x196>
 8000bea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	e011      	b.n	8000c16 <HAL_ADC_Init+0x1ba>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a54      	ldr	r2, [pc, #336]	@ (8000d48 <HAL_ADC_Init+0x2ec>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d102      	bne.n	8000c02 <HAL_ADC_Init+0x1a6>
 8000bfc:	4b53      	ldr	r3, [pc, #332]	@ (8000d4c <HAL_ADC_Init+0x2f0>)
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	e009      	b.n	8000c16 <HAL_ADC_Init+0x1ba>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a51      	ldr	r2, [pc, #324]	@ (8000d4c <HAL_ADC_Init+0x2f0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d102      	bne.n	8000c12 <HAL_ADC_Init+0x1b6>
 8000c0c:	4b4e      	ldr	r3, [pc, #312]	@ (8000d48 <HAL_ADC_Init+0x2ec>)
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	e001      	b.n	8000c16 <HAL_ADC_Init+0x1ba>
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d108      	bne.n	8000c36 <HAL_ADC_Init+0x1da>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d101      	bne.n	8000c36 <HAL_ADC_Init+0x1da>
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <HAL_ADC_Init+0x1dc>
 8000c36:	2300      	movs	r3, #0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d11c      	bne.n	8000c76 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d010      	beq.n	8000c64 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 0303 	and.w	r3, r3, #3
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d107      	bne.n	8000c5e <HAL_ADC_Init+0x202>
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d101      	bne.n	8000c5e <HAL_ADC_Init+0x202>
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e000      	b.n	8000c60 <HAL_ADC_Init+0x204>
 8000c5e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d108      	bne.n	8000c76 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	431a      	orrs	r2, r3
 8000c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c74:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	7e5b      	ldrb	r3, [r3, #25]
 8000c7a:	035b      	lsls	r3, r3, #13
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000c80:	2a01      	cmp	r2, #1
 8000c82:	d002      	beq.n	8000c8a <HAL_ADC_Init+0x22e>
 8000c84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c88:	e000      	b.n	8000c8c <HAL_ADC_Init+0x230>
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	431a      	orrs	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d11b      	bne.n	8000ce2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7e5b      	ldrb	r3, [r3, #25]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d109      	bne.n	8000cc6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	045a      	lsls	r2, r3, #17
 8000cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8000cc4:	e00d      	b.n	8000ce2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000cce:	f043 0220 	orr.w	r2, r3, #32
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cda:	f043 0201 	orr.w	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d03a      	beq.n	8000d60 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a16      	ldr	r2, [pc, #88]	@ (8000d48 <HAL_ADC_Init+0x2ec>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d004      	beq.n	8000cfe <HAL_ADC_Init+0x2a2>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a14      	ldr	r2, [pc, #80]	@ (8000d4c <HAL_ADC_Init+0x2f0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d128      	bne.n	8000d50 <HAL_ADC_Init+0x2f4>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d02:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000d06:	d012      	beq.n	8000d2e <HAL_ADC_Init+0x2d2>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d10:	d00a      	beq.n	8000d28 <HAL_ADC_Init+0x2cc>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d16:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000d1a:	d002      	beq.n	8000d22 <HAL_ADC_Init+0x2c6>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d20:	e018      	b.n	8000d54 <HAL_ADC_Init+0x2f8>
 8000d22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d26:	e015      	b.n	8000d54 <HAL_ADC_Init+0x2f8>
 8000d28:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000d2c:	e012      	b.n	8000d54 <HAL_ADC_Init+0x2f8>
 8000d2e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000d32:	e00f      	b.n	8000d54 <HAL_ADC_Init+0x2f8>
 8000d34:	20000000 	.word	0x20000000
 8000d38:	431bde83 	.word	0x431bde83
 8000d3c:	50000100 	.word	0x50000100
 8000d40:	50000300 	.word	0x50000300
 8000d44:	50000700 	.word	0x50000700
 8000d48:	50000400 	.word	0x50000400
 8000d4c:	50000500 	.word	0x50000500
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d114      	bne.n	8000d98 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d7c:	f023 0302 	bic.w	r3, r3, #2
 8000d80:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7e1b      	ldrb	r3, [r3, #24]
 8000d86:	039a      	lsls	r2, r3, #14
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4313      	orrs	r3, r2
 8000d92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d94:	4313      	orrs	r3, r2
 8000d96:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <HAL_ADC_Init+0x3bc>)
 8000da0:	4013      	ands	r3, r2
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	6812      	ldr	r2, [r2, #0]
 8000da6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000da8:	430b      	orrs	r3, r1
 8000daa:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d10c      	bne.n	8000dce <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f023 010f 	bic.w	r1, r3, #15
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	1e5a      	subs	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dcc:	e007      	b.n	8000dde <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 020f 	bic.w	r2, r2, #15
 8000ddc:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	f023 0303 	bic.w	r3, r3, #3
 8000dec:	f043 0201 	orr.w	r2, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000df4:	e00a      	b.n	8000e0c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f023 0312 	bic.w	r3, r3, #18
 8000dfe:	f043 0210 	orr.w	r2, r3, #16
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000e06:	2301      	movs	r3, #1
 8000e08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000e0c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3768      	adds	r7, #104	@ 0x68
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	fff0c007 	.word	0xfff0c007

08000e1c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f040 80f9 	bne.w	800102a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Start+0x2a>
 8000e42:	2302      	movs	r3, #2
 8000e44:	e0f4      	b.n	8001030 <HAL_ADC_Start+0x214>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f000 fde6 	bl	8001a20 <ADC_Enable>
 8000e54:	4603      	mov	r3, r0
 8000e56:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 80e0 	bne.w	8001020 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e7c:	d004      	beq.n	8000e88 <HAL_ADC_Start+0x6c>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a6d      	ldr	r2, [pc, #436]	@ (8001038 <HAL_ADC_Start+0x21c>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d106      	bne.n	8000e96 <HAL_ADC_Start+0x7a>
 8000e88:	4b6c      	ldr	r3, [pc, #432]	@ (800103c <HAL_ADC_Start+0x220>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 031f 	and.w	r3, r3, #31
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d010      	beq.n	8000eb6 <HAL_ADC_Start+0x9a>
 8000e94:	e005      	b.n	8000ea2 <HAL_ADC_Start+0x86>
 8000e96:	4b6a      	ldr	r3, [pc, #424]	@ (8001040 <HAL_ADC_Start+0x224>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 031f 	and.w	r3, r3, #31
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d009      	beq.n	8000eb6 <HAL_ADC_Start+0x9a>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000eaa:	d004      	beq.n	8000eb6 <HAL_ADC_Start+0x9a>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a64      	ldr	r2, [pc, #400]	@ (8001044 <HAL_ADC_Start+0x228>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d115      	bne.n	8000ee2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d036      	beq.n	8000f3e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ed8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000ee0:	e02d      	b.n	8000f3e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ef6:	d004      	beq.n	8000f02 <HAL_ADC_Start+0xe6>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a4e      	ldr	r2, [pc, #312]	@ (8001038 <HAL_ADC_Start+0x21c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d10a      	bne.n	8000f18 <HAL_ADC_Start+0xfc>
 8000f02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	e008      	b.n	8000f2a <HAL_ADC_Start+0x10e>
 8000f18:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <HAL_ADC_Start+0x228>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d007      	beq.n	8000f3e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f4a:	d106      	bne.n	8000f5a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f50:	f023 0206 	bic.w	r2, r3, #6
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f58:	e002      	b.n	8000f60 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2200      	movs	r2, #0
 8000f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	221c      	movs	r2, #28
 8000f6e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f78:	d004      	beq.n	8000f84 <HAL_ADC_Start+0x168>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8001038 <HAL_ADC_Start+0x21c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d106      	bne.n	8000f92 <HAL_ADC_Start+0x176>
 8000f84:	4b2d      	ldr	r3, [pc, #180]	@ (800103c <HAL_ADC_Start+0x220>)
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d03e      	beq.n	800100e <HAL_ADC_Start+0x1f2>
 8000f90:	e005      	b.n	8000f9e <HAL_ADC_Start+0x182>
 8000f92:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <HAL_ADC_Start+0x224>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 031f 	and.w	r3, r3, #31
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d037      	beq.n	800100e <HAL_ADC_Start+0x1f2>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fa6:	d004      	beq.n	8000fb2 <HAL_ADC_Start+0x196>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a22      	ldr	r2, [pc, #136]	@ (8001038 <HAL_ADC_Start+0x21c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d106      	bne.n	8000fc0 <HAL_ADC_Start+0x1a4>
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <HAL_ADC_Start+0x220>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	2b05      	cmp	r3, #5
 8000fbc:	d027      	beq.n	800100e <HAL_ADC_Start+0x1f2>
 8000fbe:	e005      	b.n	8000fcc <HAL_ADC_Start+0x1b0>
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001040 <HAL_ADC_Start+0x224>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 031f 	and.w	r3, r3, #31
 8000fc8:	2b05      	cmp	r3, #5
 8000fca:	d020      	beq.n	800100e <HAL_ADC_Start+0x1f2>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fd4:	d004      	beq.n	8000fe0 <HAL_ADC_Start+0x1c4>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a17      	ldr	r2, [pc, #92]	@ (8001038 <HAL_ADC_Start+0x21c>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d106      	bne.n	8000fee <HAL_ADC_Start+0x1d2>
 8000fe0:	4b16      	ldr	r3, [pc, #88]	@ (800103c <HAL_ADC_Start+0x220>)
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f003 031f 	and.w	r3, r3, #31
 8000fe8:	2b09      	cmp	r3, #9
 8000fea:	d010      	beq.n	800100e <HAL_ADC_Start+0x1f2>
 8000fec:	e005      	b.n	8000ffa <HAL_ADC_Start+0x1de>
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <HAL_ADC_Start+0x224>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	2b09      	cmp	r3, #9
 8000ff8:	d009      	beq.n	800100e <HAL_ADC_Start+0x1f2>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001002:	d004      	beq.n	800100e <HAL_ADC_Start+0x1f2>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_ADC_Start+0x228>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d10f      	bne.n	800102e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0204 	orr.w	r2, r2, #4
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	e006      	b.n	800102e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001028:	e001      	b.n	800102e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800102a:	2302      	movs	r3, #2
 800102c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	50000100 	.word	0x50000100
 800103c:	50000300 	.word	0x50000300
 8001040:	50000700 	.word	0x50000700
 8001044:	50000400 	.word	0x50000400

08001048 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	2b08      	cmp	r3, #8
 800105c:	d102      	bne.n	8001064 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800105e:	2308      	movs	r3, #8
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	e03a      	b.n	80010da <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800106c:	d004      	beq.n	8001078 <HAL_ADC_PollForConversion+0x30>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a72      	ldr	r2, [pc, #456]	@ (800123c <HAL_ADC_PollForConversion+0x1f4>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d101      	bne.n	800107c <HAL_ADC_PollForConversion+0x34>
 8001078:	4b71      	ldr	r3, [pc, #452]	@ (8001240 <HAL_ADC_PollForConversion+0x1f8>)
 800107a:	e000      	b.n	800107e <HAL_ADC_PollForConversion+0x36>
 800107c:	4b71      	ldr	r3, [pc, #452]	@ (8001244 <HAL_ADC_PollForConversion+0x1fc>)
 800107e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 031f 	and.w	r3, r3, #31
 8001088:	2b00      	cmp	r3, #0
 800108a:	d112      	bne.n	80010b2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b01      	cmp	r3, #1
 8001098:	d11d      	bne.n	80010d6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f043 0220 	orr.w	r2, r3, #32
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e0bf      	b.n	8001232 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	f043 0220 	orr.w	r2, r3, #32
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e0ad      	b.n	8001232 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010d6:	230c      	movs	r3, #12
 80010d8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e2:	d004      	beq.n	80010ee <HAL_ADC_PollForConversion+0xa6>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a54      	ldr	r2, [pc, #336]	@ (800123c <HAL_ADC_PollForConversion+0x1f4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d106      	bne.n	80010fc <HAL_ADC_PollForConversion+0xb4>
 80010ee:	4b54      	ldr	r3, [pc, #336]	@ (8001240 <HAL_ADC_PollForConversion+0x1f8>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d010      	beq.n	800111c <HAL_ADC_PollForConversion+0xd4>
 80010fa:	e005      	b.n	8001108 <HAL_ADC_PollForConversion+0xc0>
 80010fc:	4b51      	ldr	r3, [pc, #324]	@ (8001244 <HAL_ADC_PollForConversion+0x1fc>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	2b00      	cmp	r3, #0
 8001106:	d009      	beq.n	800111c <HAL_ADC_PollForConversion+0xd4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001110:	d004      	beq.n	800111c <HAL_ADC_PollForConversion+0xd4>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_ADC_PollForConversion+0x200>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d104      	bne.n	8001126 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	e00f      	b.n	8001146 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800112e:	d004      	beq.n	800113a <HAL_ADC_PollForConversion+0xf2>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a41      	ldr	r2, [pc, #260]	@ (800123c <HAL_ADC_PollForConversion+0x1f4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d102      	bne.n	8001140 <HAL_ADC_PollForConversion+0xf8>
 800113a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800113e:	e000      	b.n	8001142 <HAL_ADC_PollForConversion+0xfa>
 8001140:	4b41      	ldr	r3, [pc, #260]	@ (8001248 <HAL_ADC_PollForConversion+0x200>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001146:	f7ff fc7d 	bl	8000a44 <HAL_GetTick>
 800114a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800114c:	e021      	b.n	8001192 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001154:	d01d      	beq.n	8001192 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d007      	beq.n	800116c <HAL_ADC_PollForConversion+0x124>
 800115c:	f7ff fc72 	bl	8000a44 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d212      	bcs.n	8001192 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10b      	bne.n	8001192 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f043 0204 	orr.w	r2, r3, #4
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e04f      	b.n	8001232 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d0d6      	beq.n	800114e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d131      	bne.n	800121e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d12c      	bne.n	800121e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d125      	bne.n	800121e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d112      	bne.n	8001206 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d112      	bne.n	800121e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fc:	f043 0201 	orr.w	r2, r3, #1
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	641a      	str	r2, [r3, #64]	@ 0x40
 8001204:	e00b      	b.n	800121e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f043 0220 	orr.w	r2, r3, #32
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	50000100 	.word	0x50000100
 8001240:	50000300 	.word	0x50000300
 8001244:	50000700 	.word	0x50000700
 8001248:	50000400 	.word	0x50000400

0800124c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001268:	b480      	push	{r7}
 800126a:	b09b      	sub	sp, #108	@ 0x6c
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001282:	2b01      	cmp	r3, #1
 8001284:	d101      	bne.n	800128a <HAL_ADC_ConfigChannel+0x22>
 8001286:	2302      	movs	r3, #2
 8001288:	e2c8      	b.n	800181c <HAL_ADC_ConfigChannel+0x5b4>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2201      	movs	r2, #1
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	f040 82ac 	bne.w	80017fa <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	d81c      	bhi.n	80012e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	461a      	mov	r2, r3
 80012be:	231f      	movs	r3, #31
 80012c0:	4093      	lsls	r3, r2
 80012c2:	43db      	mvns	r3, r3
 80012c4:	4019      	ands	r1, r3
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa00 f203 	lsl.w	r2, r0, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80012e2:	e063      	b.n	80013ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d81e      	bhi.n	800132a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	3b1e      	subs	r3, #30
 8001300:	221f      	movs	r2, #31
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	4019      	ands	r1, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	4613      	mov	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	3b1e      	subs	r3, #30
 800131c:	fa00 f203 	lsl.w	r2, r0, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	635a      	str	r2, [r3, #52]	@ 0x34
 8001328:	e040      	b.n	80013ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b0e      	cmp	r3, #14
 8001330:	d81e      	bhi.n	8001370 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	3b3c      	subs	r3, #60	@ 0x3c
 8001346:	221f      	movs	r2, #31
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	4019      	ands	r1, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	4413      	add	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	3b3c      	subs	r3, #60	@ 0x3c
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	639a      	str	r2, [r3, #56]	@ 0x38
 800136e:	e01d      	b.n	80013ac <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4413      	add	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	3b5a      	subs	r3, #90	@ 0x5a
 8001384:	221f      	movs	r2, #31
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	4019      	ands	r1, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	6818      	ldr	r0, [r3, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	4413      	add	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	3b5a      	subs	r3, #90	@ 0x5a
 80013a0:	fa00 f203 	lsl.w	r2, r0, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f040 80e5 	bne.w	8001586 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d91c      	bls.n	80013fe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6999      	ldr	r1, [r3, #24]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	3b1e      	subs	r3, #30
 80013d6:	2207      	movs	r2, #7
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	4019      	ands	r1, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	6898      	ldr	r0, [r3, #8]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	3b1e      	subs	r3, #30
 80013f0:	fa00 f203 	lsl.w	r2, r0, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	619a      	str	r2, [r3, #24]
 80013fc:	e019      	b.n	8001432 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6959      	ldr	r1, [r3, #20]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	2207      	movs	r2, #7
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	4019      	ands	r1, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	6898      	ldr	r0, [r3, #8]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	fa00 f203 	lsl.w	r2, r0, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	430a      	orrs	r2, r1
 8001430:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	3b01      	subs	r3, #1
 8001450:	2b03      	cmp	r3, #3
 8001452:	d84f      	bhi.n	80014f4 <HAL_ADC_ConfigChannel+0x28c>
 8001454:	a201      	add	r2, pc, #4	@ (adr r2, 800145c <HAL_ADC_ConfigChannel+0x1f4>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	0800146d 	.word	0x0800146d
 8001460:	0800148f 	.word	0x0800148f
 8001464:	080014b1 	.word	0x080014b1
 8001468:	080014d3 	.word	0x080014d3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001472:	4b99      	ldr	r3, [pc, #612]	@ (80016d8 <HAL_ADC_ConfigChannel+0x470>)
 8001474:	4013      	ands	r3, r2
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	0691      	lsls	r1, r2, #26
 800147c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800147e:	430a      	orrs	r2, r1
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800148a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800148c:	e07b      	b.n	8001586 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001494:	4b90      	ldr	r3, [pc, #576]	@ (80016d8 <HAL_ADC_ConfigChannel+0x470>)
 8001496:	4013      	ands	r3, r2
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	0691      	lsls	r1, r2, #26
 800149e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014a0:	430a      	orrs	r2, r1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014ac:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014ae:	e06a      	b.n	8001586 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80014b6:	4b88      	ldr	r3, [pc, #544]	@ (80016d8 <HAL_ADC_ConfigChannel+0x470>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	0691      	lsls	r1, r2, #26
 80014c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014c2:	430a      	orrs	r2, r1
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014ce:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014d0:	e059      	b.n	8001586 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014d8:	4b7f      	ldr	r3, [pc, #508]	@ (80016d8 <HAL_ADC_ConfigChannel+0x470>)
 80014da:	4013      	ands	r3, r2
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	0691      	lsls	r1, r2, #26
 80014e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014e4:	430a      	orrs	r2, r1
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014f0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014f2:	e048      	b.n	8001586 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	069b      	lsls	r3, r3, #26
 8001504:	429a      	cmp	r2, r3
 8001506:	d107      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001516:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800151e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	069b      	lsls	r3, r3, #26
 8001528:	429a      	cmp	r2, r3
 800152a:	d107      	bne.n	800153c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800153a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001542:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	069b      	lsls	r3, r3, #26
 800154c:	429a      	cmp	r2, r3
 800154e:	d107      	bne.n	8001560 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800155e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001566:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	069b      	lsls	r3, r3, #26
 8001570:	429a      	cmp	r2, r3
 8001572:	d107      	bne.n	8001584 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001582:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001584:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d108      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x33e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x33e>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x340>
 80015a6:	2300      	movs	r3, #0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 8131 	bne.w	8001810 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d00f      	beq.n	80015d6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2201      	movs	r2, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43da      	mvns	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	400a      	ands	r2, r1
 80015d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80015d4:	e049      	b.n	800166a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2201      	movs	r2, #1
 80015e4:	409a      	lsls	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d91c      	bls.n	8001632 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6999      	ldr	r1, [r3, #24]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	3b1b      	subs	r3, #27
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	3b1b      	subs	r3, #27
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	619a      	str	r2, [r3, #24]
 8001630:	e01b      	b.n	800166a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6959      	ldr	r1, [r3, #20]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	2207      	movs	r2, #7
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	4019      	ands	r1, r3
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	6898      	ldr	r0, [r3, #8]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	fa00 f203 	lsl.w	r2, r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001672:	d004      	beq.n	800167e <HAL_ADC_ConfigChannel+0x416>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <HAL_ADC_ConfigChannel+0x474>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x41a>
 800167e:	4b18      	ldr	r3, [pc, #96]	@ (80016e0 <HAL_ADC_ConfigChannel+0x478>)
 8001680:	e000      	b.n	8001684 <HAL_ADC_ConfigChannel+0x41c>
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <HAL_ADC_ConfigChannel+0x47c>)
 8001684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d105      	bne.n	800169a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800168e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800169e:	2b11      	cmp	r3, #17
 80016a0:	d105      	bne.n	80016ae <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	f040 80ac 	bne.w	8001810 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 80a5 	bne.w	8001810 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016ce:	d10b      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x480>
 80016d0:	4b02      	ldr	r3, [pc, #8]	@ (80016dc <HAL_ADC_ConfigChannel+0x474>)
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	e023      	b.n	800171e <HAL_ADC_ConfigChannel+0x4b6>
 80016d6:	bf00      	nop
 80016d8:	83fff000 	.word	0x83fff000
 80016dc:	50000100 	.word	0x50000100
 80016e0:	50000300 	.word	0x50000300
 80016e4:	50000700 	.word	0x50000700
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001828 <HAL_ADC_ConfigChannel+0x5c0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d103      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x492>
 80016f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e011      	b.n	800171e <HAL_ADC_ConfigChannel+0x4b6>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a4b      	ldr	r2, [pc, #300]	@ (800182c <HAL_ADC_ConfigChannel+0x5c4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d102      	bne.n	800170a <HAL_ADC_ConfigChannel+0x4a2>
 8001704:	4b4a      	ldr	r3, [pc, #296]	@ (8001830 <HAL_ADC_ConfigChannel+0x5c8>)
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	e009      	b.n	800171e <HAL_ADC_ConfigChannel+0x4b6>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a48      	ldr	r2, [pc, #288]	@ (8001830 <HAL_ADC_ConfigChannel+0x5c8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d102      	bne.n	800171a <HAL_ADC_ConfigChannel+0x4b2>
 8001714:	4b45      	ldr	r3, [pc, #276]	@ (800182c <HAL_ADC_ConfigChannel+0x5c4>)
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e001      	b.n	800171e <HAL_ADC_ConfigChannel+0x4b6>
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 0303 	and.w	r3, r3, #3
 8001728:	2b01      	cmp	r3, #1
 800172a:	d108      	bne.n	800173e <HAL_ADC_ConfigChannel+0x4d6>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_ADC_ConfigChannel+0x4d6>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_ADC_ConfigChannel+0x4d8>
 800173e:	2300      	movs	r3, #0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d150      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001744:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001746:	2b00      	cmp	r3, #0
 8001748:	d010      	beq.n	800176c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d107      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x4fe>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d101      	bne.n	8001766 <HAL_ADC_ConfigChannel+0x4fe>
 8001762:	2301      	movs	r3, #1
 8001764:	e000      	b.n	8001768 <HAL_ADC_ConfigChannel+0x500>
 8001766:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001768:	2b00      	cmp	r3, #0
 800176a:	d13c      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b10      	cmp	r3, #16
 8001772:	d11d      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x548>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800177c:	d118      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800177e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001788:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178a:	4b2a      	ldr	r3, [pc, #168]	@ (8001834 <HAL_ADC_ConfigChannel+0x5cc>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2a      	ldr	r2, [pc, #168]	@ (8001838 <HAL_ADC_ConfigChannel+0x5d0>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	0c9a      	lsrs	r2, r3, #18
 8001796:	4613      	mov	r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a0:	e002      	b.n	80017a8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f9      	bne.n	80017a2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ae:	e02e      	b.n	800180e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b11      	cmp	r3, #17
 80017b6:	d10b      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x568>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017c0:	d106      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80017ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017cc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017ce:	e01e      	b.n	800180e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b12      	cmp	r3, #18
 80017d6:	d11a      	bne.n	800180e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017e4:	e013      	b.n	800180e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f043 0220 	orr.w	r2, r3, #32
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017f8:	e00a      	b.n	8001810 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f043 0220 	orr.w	r2, r3, #32
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800180c:	e000      	b.n	8001810 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800180e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001818:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800181c:	4618      	mov	r0, r3
 800181e:	376c      	adds	r7, #108	@ 0x6c
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	50000100 	.word	0x50000100
 800182c:	50000400 	.word	0x50000400
 8001830:	50000500 	.word	0x50000500
 8001834:	20000000 	.word	0x20000000
 8001838:	431bde83 	.word	0x431bde83

0800183c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800183c:	b480      	push	{r7}
 800183e:	b099      	sub	sp, #100	@ 0x64
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001854:	d102      	bne.n	800185c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001856:	4b6d      	ldr	r3, [pc, #436]	@ (8001a0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	e01a      	b.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6a      	ldr	r2, [pc, #424]	@ (8001a0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d103      	bne.n	800186e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001866:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	e011      	b.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a67      	ldr	r2, [pc, #412]	@ (8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d102      	bne.n	800187e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001878:	4b66      	ldr	r3, [pc, #408]	@ (8001a14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	e009      	b.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a64      	ldr	r2, [pc, #400]	@ (8001a14 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d102      	bne.n	800188e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001888:	4b61      	ldr	r3, [pc, #388]	@ (8001a10 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	e001      	b.n	8001892 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0b0      	b.n	80019fe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e0a9      	b.n	80019fe <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 808d 	bne.w	80019dc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f040 8086 	bne.w	80019dc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018d8:	d004      	beq.n	80018e4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a4b      	ldr	r2, [pc, #300]	@ (8001a0c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d101      	bne.n	80018e8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80018e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a18 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80018e6:	e000      	b.n	80018ea <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80018e8:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80018ea:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d040      	beq.n	8001976 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001906:	035b      	lsls	r3, r3, #13
 8001908:	430b      	orrs	r3, r1
 800190a:	431a      	orrs	r2, r3
 800190c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800190e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d108      	bne.n	8001930 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001930:	2300      	movs	r3, #0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d15c      	bne.n	80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001952:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001954:	2b00      	cmp	r3, #0
 8001956:	d14b      	bne.n	80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001960:	f023 030f 	bic.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	6811      	ldr	r1, [r2, #0]
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	6892      	ldr	r2, [r2, #8]
 800196c:	430a      	orrs	r2, r1
 800196e:	431a      	orrs	r2, r3
 8001970:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001972:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001974:	e03c      	b.n	80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001976:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800197e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001980:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d108      	bne.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80019a2:	2300      	movs	r3, #0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d123      	bne.n	80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d107      	bne.n	80019c4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80019c4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d112      	bne.n	80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80019ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80019d2:	f023 030f 	bic.w	r3, r3, #15
 80019d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80019d8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019da:	e009      	b.n	80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f043 0220 	orr.w	r2, r3, #32
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80019ee:	e000      	b.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019f0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80019fe:	4618      	mov	r0, r3
 8001a00:	3764      	adds	r7, #100	@ 0x64
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	50000100 	.word	0x50000100
 8001a10:	50000400 	.word	0x50000400
 8001a14:	50000500 	.word	0x50000500
 8001a18:	50000300 	.word	0x50000300
 8001a1c:	50000700 	.word	0x50000700

08001a20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d108      	bne.n	8001a4c <ADC_Enable+0x2c>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <ADC_Enable+0x2c>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <ADC_Enable+0x2e>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d143      	bne.n	8001ada <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <ADC_Enable+0xc4>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00d      	beq.n	8001a7c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e02f      	b.n	8001adc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a8c:	f7fe ffda 	bl	8000a44 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a92:	e01b      	b.n	8001acc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a94:	f7fe ffd6 	bl	8000a44 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d914      	bls.n	8001acc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d00d      	beq.n	8001acc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab4:	f043 0210 	orr.w	r2, r3, #16
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac0:	f043 0201 	orr.w	r2, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e007      	b.n	8001adc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d1dc      	bne.n	8001a94 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	8000003f 	.word	0x8000003f

08001ae8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d108      	bne.n	8001b14 <ADC_Disable+0x2c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <ADC_Disable+0x2c>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <ADC_Disable+0x2e>
 8001b14:	2300      	movs	r3, #0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d047      	beq.n	8001baa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 030d 	and.w	r3, r3, #13
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10f      	bne.n	8001b48 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f042 0202 	orr.w	r2, r2, #2
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b40:	f7fe ff80 	bl	8000a44 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b46:	e029      	b.n	8001b9c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	f043 0210 	orr.w	r2, r3, #16
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b58:	f043 0201 	orr.w	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e023      	b.n	8001bac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b64:	f7fe ff6e 	bl	8000a44 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d914      	bls.n	8001b9c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d10d      	bne.n	8001b9c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	f043 0210 	orr.w	r2, r3, #16
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b90:	f043 0201 	orr.w	r2, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e007      	b.n	8001bac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d0dc      	beq.n	8001b64 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cf8:	f7ff ff8e 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff47 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff5c 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff8e 	bl	8001c6c <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5d 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ffb0 	bl	8001cd4 <SysTick_Config>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8e:	e154      	b.n	800203a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8146 	beq.w	8002034 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_GPIO_Init+0x40>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d130      	bne.n	8001e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df6:	2201      	movs	r2, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0201 	and.w	r2, r3, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d017      	beq.n	8001e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	6939      	ldr	r1, [r7, #16]
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80a0 	beq.w	8002034 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4b58      	ldr	r3, [pc, #352]	@ (8002058 <HAL_GPIO_Init+0x2d8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a57      	ldr	r2, [pc, #348]	@ (8002058 <HAL_GPIO_Init+0x2d8>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b55      	ldr	r3, [pc, #340]	@ (8002058 <HAL_GPIO_Init+0x2d8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f0c:	4a53      	ldr	r2, [pc, #332]	@ (800205c <HAL_GPIO_Init+0x2dc>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f36:	d019      	beq.n	8001f6c <HAL_GPIO_Init+0x1ec>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a49      	ldr	r2, [pc, #292]	@ (8002060 <HAL_GPIO_Init+0x2e0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_GPIO_Init+0x1e8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a48      	ldr	r2, [pc, #288]	@ (8002064 <HAL_GPIO_Init+0x2e4>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1e4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a47      	ldr	r2, [pc, #284]	@ (8002068 <HAL_GPIO_Init+0x2e8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1e0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a46      	ldr	r2, [pc, #280]	@ (800206c <HAL_GPIO_Init+0x2ec>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1dc>
 8001f58:	2304      	movs	r3, #4
 8001f5a:	e008      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f5c:	2305      	movs	r3, #5
 8001f5e:	e006      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f60:	2303      	movs	r3, #3
 8001f62:	e004      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	f002 0203 	and.w	r2, r2, #3
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	4093      	lsls	r3, r2
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f7e:	4937      	ldr	r1, [pc, #220]	@ (800205c <HAL_GPIO_Init+0x2dc>)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8c:	4b38      	ldr	r3, [pc, #224]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fda:	4a25      	ldr	r2, [pc, #148]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe0:	4b23      	ldr	r3, [pc, #140]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002004:	4a1a      	ldr	r2, [pc, #104]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200a:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800202e:	4a10      	ldr	r2, [pc, #64]	@ (8002070 <HAL_GPIO_Init+0x2f0>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	f47f aea3 	bne.w	8001d90 <HAL_GPIO_Init+0x10>
  }
}
 800204a:	bf00      	nop
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40021000 	.word	0x40021000
 800205c:	40010000 	.word	0x40010000
 8002060:	48000400 	.word	0x48000400
 8002064:	48000800 	.word	0x48000800
 8002068:	48000c00 	.word	0x48000c00
 800206c:	48001000 	.word	0x48001000
 8002070:	40010400 	.word	0x40010400

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002090:	e002      	b.n	8002098 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e081      	b.n	80021ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fb2a 	bl	8000724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	@ 0x24
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002104:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	e006      	b.n	800212c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800212a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d104      	bne.n	800213e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800213c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800214c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002150:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002160:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691a      	ldr	r2, [r3, #16]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69d9      	ldr	r1, [r3, #28]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1a      	ldr	r2, [r3, #32]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d138      	bne.n	800224a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e032      	b.n	800224c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2224      	movs	r2, #36	@ 0x24
 80021f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 0201 	bic.w	r2, r2, #1
 8002204:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002214:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6819      	ldr	r1, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800224a:	2302      	movs	r3, #2
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	d139      	bne.n	80022e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002278:	2302      	movs	r3, #2
 800227a:	e033      	b.n	80022e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	@ 0x24
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
  }
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f2:	b08b      	sub	sp, #44	@ 0x2c
 80022f4:	af06      	add	r7, sp, #24
 80022f6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0c4      	b.n	800248c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7fe fa8a 	bl	8000830 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2203      	movs	r2, #3
 8002320:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f001 fd32 	bl	8003d92 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e040      	b.n	80023b6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	3301      	adds	r3, #1
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800235e:	7bfb      	ldrb	r3, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	1c5a      	adds	r2, r3, #1
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	3303      	adds	r3, #3
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3338      	adds	r3, #56	@ 0x38
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	440b      	add	r3, r1
 8002396:	333c      	adds	r3, #60	@ 0x3c
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3340      	adds	r3, #64	@ 0x40
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3301      	adds	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3b9      	bcc.n	8002334 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e044      	b.n	8002450 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	429a      	cmp	r2, r3
 8002458:	d3b5      	bcc.n	80023c6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	687e      	ldr	r6, [r7, #4]
 8002462:	466d      	mov	r5, sp
 8002464:	f106 0410 	add.w	r4, r6, #16
 8002468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800246a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	602b      	str	r3, [r5, #0]
 8002470:	1d33      	adds	r3, r6, #4
 8002472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002474:	6838      	ldr	r0, [r7, #0]
 8002476:	f001 fca7 	bl	8003dc8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800249a:	af00      	add	r7, sp, #0
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f001 b823 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 817d 	beq.w	80027ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024d0:	4bbc      	ldr	r3, [pc, #752]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d00c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024dc:	4bb9      	ldr	r3, [pc, #740]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d15c      	bne.n	80025a2 <HAL_RCC_OscConfig+0x10e>
 80024e8:	4bb6      	ldr	r3, [pc, #728]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024f4:	d155      	bne.n	80025a2 <HAL_RCC_OscConfig+0x10e>
 80024f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024fa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800250a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	d102      	bne.n	8002528 <HAL_RCC_OscConfig+0x94>
 8002522:	4ba8      	ldr	r3, [pc, #672]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	e015      	b.n	8002554 <HAL_RCC_OscConfig+0xc0>
 8002528:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800252c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800253c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002540:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002544:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002550:	4b9c      	ldr	r3, [pc, #624]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002558:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800255c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002560:	fa92 f2a2 	rbit	r2, r2
 8002564:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002568:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800256c:	fab2 f282 	clz	r2, r2
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	f042 0220 	orr.w	r2, r2, #32
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	f002 021f 	and.w	r2, r2, #31
 800257c:	2101      	movs	r1, #1
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 811f 	beq.w	80027c8 <HAL_RCC_OscConfig+0x334>
 800258a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f040 8116 	bne.w	80027c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	f000 bfaf 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x12e>
 80025b4:	4b83      	ldr	r3, [pc, #524]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a82      	ldr	r2, [pc, #520]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	e036      	b.n	8002630 <HAL_RCC_OscConfig+0x19c>
 80025c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x158>
 80025d2:	4b7c      	ldr	r3, [pc, #496]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7b      	ldr	r2, [pc, #492]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80025d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b79      	ldr	r3, [pc, #484]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a78      	ldr	r2, [pc, #480]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80025e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e021      	b.n	8002630 <HAL_RCC_OscConfig+0x19c>
 80025ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x184>
 80025fe:	4b71      	ldr	r3, [pc, #452]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a70      	ldr	r2, [pc, #448]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b6e      	ldr	r3, [pc, #440]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6d      	ldr	r2, [pc, #436]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0x19c>
 8002618:	4b6a      	ldr	r3, [pc, #424]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a69      	ldr	r2, [pc, #420]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b67      	ldr	r3, [pc, #412]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a66      	ldr	r2, [pc, #408]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800262e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002630:	4b64      	ldr	r3, [pc, #400]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	f023 020f 	bic.w	r2, r3, #15
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	495f      	ldr	r1, [pc, #380]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 8002646:	4313      	orrs	r3, r2
 8002648:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d059      	beq.n	800270e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe f9f3 	bl	8000a44 <HAL_GetTick>
 800265e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	e00a      	b.n	800267a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe f9ee 	bl	8000a44 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b64      	cmp	r3, #100	@ 0x64
 8002672:	d902      	bls.n	800267a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	f000 bf43 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>
 800267a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800267e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800268e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d102      	bne.n	80026ac <HAL_RCC_OscConfig+0x218>
 80026a6:	4b47      	ldr	r3, [pc, #284]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	e015      	b.n	80026d8 <HAL_RCC_OscConfig+0x244>
 80026ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026b0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80026c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80026c4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80026c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80026d4:	4b3b      	ldr	r3, [pc, #236]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026dc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80026e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80026e4:	fa92 f2a2 	rbit	r2, r2
 80026e8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80026ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80026f0:	fab2 f282 	clz	r2, r2
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f042 0220 	orr.w	r2, r2, #32
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	f002 021f 	and.w	r2, r2, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f202 	lsl.w	r2, r1, r2
 8002706:	4013      	ands	r3, r2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0ab      	beq.n	8002664 <HAL_RCC_OscConfig+0x1d0>
 800270c:	e05d      	b.n	80027ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe f999 	bl	8000a44 <HAL_GetTick>
 8002712:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002718:	f7fe f994 	bl	8000a44 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	@ 0x64
 8002726:	d902      	bls.n	800272e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	f000 bee9 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>
 800272e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002732:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002736:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002742:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002746:	fab3 f383 	clz	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d102      	bne.n	8002760 <HAL_RCC_OscConfig+0x2cc>
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e015      	b.n	800278c <HAL_RCC_OscConfig+0x2f8>
 8002760:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002764:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002774:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002778:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800277c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002788:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_RCC_OscConfig+0x330>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002790:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002794:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002798:	fa92 f2a2 	rbit	r2, r2
 800279c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80027a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80027a4:	fab2 f282 	clz	r2, r2
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	f042 0220 	orr.w	r2, r2, #32
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	f002 021f 	and.w	r2, r2, #31
 80027b4:	2101      	movs	r1, #1
 80027b6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1ab      	bne.n	8002718 <HAL_RCC_OscConfig+0x284>
 80027c0:	e003      	b.n	80027ca <HAL_RCC_OscConfig+0x336>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 817d 	beq.w	8002ada <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027e0:	4ba6      	ldr	r3, [pc, #664]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 030c 	and.w	r3, r3, #12
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00b      	beq.n	8002804 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027ec:	4ba3      	ldr	r3, [pc, #652]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d172      	bne.n	80028de <HAL_RCC_OscConfig+0x44a>
 80027f8:	4ba0      	ldr	r3, [pc, #640]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d16c      	bne.n	80028de <HAL_RCC_OscConfig+0x44a>
 8002804:	2302      	movs	r3, #2
 8002806:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800280e:	fa93 f3a3 	rbit	r3, r3
 8002812:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002816:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	095b      	lsrs	r3, r3, #5
 8002822:	b2db      	uxtb	r3, r3
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b01      	cmp	r3, #1
 800282c:	d102      	bne.n	8002834 <HAL_RCC_OscConfig+0x3a0>
 800282e:	4b93      	ldr	r3, [pc, #588]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	e013      	b.n	800285c <HAL_RCC_OscConfig+0x3c8>
 8002834:	2302      	movs	r3, #2
 8002836:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002846:	2302      	movs	r3, #2
 8002848:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800284c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002858:	4b88      	ldr	r3, [pc, #544]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 800285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285c:	2202      	movs	r2, #2
 800285e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002862:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002866:	fa92 f2a2 	rbit	r2, r2
 800286a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800286e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002872:	fab2 f282 	clz	r2, r2
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	f042 0220 	orr.w	r2, r2, #32
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	f002 021f 	and.w	r2, r2, #31
 8002882:	2101      	movs	r1, #1
 8002884:	fa01 f202 	lsl.w	r2, r1, r2
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCC_OscConfig+0x410>
 800288e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002892:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	f000 be2e 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a4:	4b75      	ldr	r3, [pc, #468]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	21f8      	movs	r1, #248	@ 0xf8
 80028ba:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80028c2:	fa91 f1a1 	rbit	r1, r1
 80028c6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80028ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80028ce:	fab1 f181 	clz	r1, r1
 80028d2:	b2c9      	uxtb	r1, r1
 80028d4:	408b      	lsls	r3, r1
 80028d6:	4969      	ldr	r1, [pc, #420]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028dc:	e0fd      	b.n	8002ada <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8088 	beq.w	8002a00 <HAL_RCC_OscConfig+0x56c>
 80028f0:	2301      	movs	r3, #1
 80028f2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002902:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002910:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	461a      	mov	r2, r3
 8002918:	2301      	movs	r3, #1
 800291a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe f892 	bl	8000a44 <HAL_GetTick>
 8002920:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe f88d 	bl	8000a44 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d902      	bls.n	800293c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	f000 bde2 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>
 800293c:	2302      	movs	r3, #2
 800293e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002942:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800294e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_RCC_OscConfig+0x4d8>
 8002966:	4b45      	ldr	r3, [pc, #276]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e013      	b.n	8002994 <HAL_RCC_OscConfig+0x500>
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800297e:	2302      	movs	r3, #2
 8002980:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002984:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002990:	4b3a      	ldr	r3, [pc, #232]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	2202      	movs	r2, #2
 8002996:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800299a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800299e:	fa92 f2a2 	rbit	r2, r2
 80029a2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80029a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0af      	beq.n	8002926 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	21f8      	movs	r1, #248	@ 0xf8
 80029dc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80029e4:	fa91 f1a1 	rbit	r1, r1
 80029e8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80029ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80029f0:	fab1 f181 	clz	r1, r1
 80029f4:	b2c9      	uxtb	r1, r1
 80029f6:	408b      	lsls	r3, r1
 80029f8:	4920      	ldr	r1, [pc, #128]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
 80029fe:	e06c      	b.n	8002ada <HAL_RCC_OscConfig+0x646>
 8002a00:	2301      	movs	r3, #1
 8002a02:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a0a:	fa93 f3a3 	rbit	r3, r3
 8002a0e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a12:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a20:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	461a      	mov	r2, r3
 8002a28:	2300      	movs	r3, #0
 8002a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f80a 	bl	8000a44 <HAL_GetTick>
 8002a30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a36:	f7fe f805 	bl	8000a44 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d902      	bls.n	8002a4c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	f000 bd5a 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d104      	bne.n	8002a80 <HAL_RCC_OscConfig+0x5ec>
 8002a76:	4b01      	ldr	r3, [pc, #4]	@ (8002a7c <HAL_RCC_OscConfig+0x5e8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	e015      	b.n	8002aa8 <HAL_RCC_OscConfig+0x614>
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	2302      	movs	r3, #2
 8002a82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a92:	2302      	movs	r3, #2
 8002a94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a98:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002aa4:	4bc8      	ldr	r3, [pc, #800]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002aae:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002ab2:	fa92 f2a2 	rbit	r2, r2
 8002ab6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002aba:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f042 0220 	orr.w	r2, r2, #32
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f002 021f 	and.w	r2, r2, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1ad      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ada:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ade:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8110 	beq.w	8002d10 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d079      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x760>
 8002b00:	2301      	movs	r3, #1
 8002b02:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4bab      	ldr	r3, [pc, #684]	@ (8002dcc <HAL_RCC_OscConfig+0x938>)
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	461a      	mov	r2, r3
 8002b26:	2301      	movs	r3, #1
 8002b28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2a:	f7fd ff8b 	bl	8000a44 <HAL_GetTick>
 8002b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fd ff86 	bl	8000a44 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d902      	bls.n	8002b4a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	f000 bcdb 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b60:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b64:	2202      	movs	r2, #2
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b6c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	fa93 f2a3 	rbit	r2, r3
 8002b76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b88:	2202      	movs	r2, #2
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	fa93 f2a3 	rbit	r2, r3
 8002b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002ba2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ba4:	4b88      	ldr	r3, [pc, #544]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	6019      	str	r1, [r3, #0]
 8002bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	fa93 f1a3 	rbit	r1, r3
 8002bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bca:	6019      	str	r1, [r3, #0]
  return result;
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0a0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x6a0>
 8002bf2:	e08d      	b.n	8002d10 <HAL_RCC_OscConfig+0x87c>
 8002bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c04:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fa93 f2a3 	rbit	r2, r3
 8002c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c12:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c16:	601a      	str	r2, [r3, #0]
  return result;
 8002c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c20:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	fab3 f383 	clz	r3, r3
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b68      	ldr	r3, [pc, #416]	@ (8002dcc <HAL_RCC_OscConfig+0x938>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	461a      	mov	r2, r3
 8002c32:	2300      	movs	r3, #0
 8002c34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c36:	f7fd ff05 	bl	8000a44 <HAL_GetTick>
 8002c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c40:	f7fd ff00 	bl	8000a44 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d902      	bls.n	8002c56 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	f000 bc55 	b.w	8003500 <HAL_RCC_OscConfig+0x106c>
 8002c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c5a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c5e:	2202      	movs	r2, #2
 8002c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c66:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	fa93 f2a3 	rbit	r2, r3
 8002c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c74:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c82:	2202      	movs	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c8a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	fa93 f2a3 	rbit	r2, r3
 8002c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f2a3 	rbit	r2, r3
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002cc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc2:	4b41      	ldr	r3, [pc, #260]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002cce:	2102      	movs	r1, #2
 8002cd0:	6019      	str	r1, [r3, #0]
 8002cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f1a3 	rbit	r1, r3
 8002ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce8:	6019      	str	r1, [r3, #0]
  return result;
 8002cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d197      	bne.n	8002c40 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 81a1 	beq.w	8003068 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2c:	4b26      	ldr	r3, [pc, #152]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d116      	bne.n	8002d66 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4a22      	ldr	r2, [pc, #136]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	61d3      	str	r3, [r2, #28]
 8002d44:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d50:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d5a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d5e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d66:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <HAL_RCC_OscConfig+0x93c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d11a      	bne.n	8002da8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d72:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_RCC_OscConfig+0x93c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <HAL_RCC_OscConfig+0x93c>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7e:	f7fd fe61 	bl	8000a44 <HAL_GetTick>
 8002d82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d86:	e009      	b.n	8002d9c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d88:	f7fd fe5c 	bl	8000a44 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b64      	cmp	r3, #100	@ 0x64
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e3b1      	b.n	8003500 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <HAL_RCC_OscConfig+0x93c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0ef      	beq.n	8002d88 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x940>
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a02      	ldr	r2, [pc, #8]	@ (8002dc8 <HAL_RCC_OscConfig+0x934>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e03c      	b.n	8002e40 <HAL_RCC_OscConfig+0x9ac>
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	10908120 	.word	0x10908120
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <HAL_RCC_OscConfig+0x96a>
 8002de4:	4bc1      	ldr	r3, [pc, #772]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4ac0      	ldr	r2, [pc, #768]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6213      	str	r3, [r2, #32]
 8002df0:	4bbe      	ldr	r3, [pc, #760]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4abd      	ldr	r2, [pc, #756]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6213      	str	r3, [r2, #32]
 8002dfc:	e020      	b.n	8002e40 <HAL_RCC_OscConfig+0x9ac>
 8002dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b05      	cmp	r3, #5
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x994>
 8002e0e:	4bb7      	ldr	r3, [pc, #732]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	4ab6      	ldr	r2, [pc, #728]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002e14:	f043 0304 	orr.w	r3, r3, #4
 8002e18:	6213      	str	r3, [r2, #32]
 8002e1a:	4bb4      	ldr	r3, [pc, #720]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4ab3      	ldr	r2, [pc, #716]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	6213      	str	r3, [r2, #32]
 8002e26:	e00b      	b.n	8002e40 <HAL_RCC_OscConfig+0x9ac>
 8002e28:	4bb0      	ldr	r3, [pc, #704]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	4aaf      	ldr	r2, [pc, #700]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002e2e:	f023 0301 	bic.w	r3, r3, #1
 8002e32:	6213      	str	r3, [r2, #32]
 8002e34:	4bad      	ldr	r3, [pc, #692]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	4aac      	ldr	r2, [pc, #688]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002e3a:	f023 0304 	bic.w	r3, r3, #4
 8002e3e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8081 	beq.w	8002f54 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fd fdf7 	bl	8000a44 <HAL_GetTick>
 8002e56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	e00b      	b.n	8002e74 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e5c:	f7fd fdf2 	bl	8000a44 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e345      	b.n	8003500 <HAL_RCC_OscConfig+0x106c>
 8002e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e78:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	fa93 f2a3 	rbit	r2, r3
 8002e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e92:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e9c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fa93 f2a3 	rbit	r2, r3
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002eba:	601a      	str	r2, [r3, #0]
  return result;
 8002ebc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002ec4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	095b      	lsrs	r3, r3, #5
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d102      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xa4c>
 8002eda:	4b84      	ldr	r3, [pc, #528]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	e013      	b.n	8002f08 <HAL_RCC_OscConfig+0xa74>
 8002ee0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efe:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	4b79      	ldr	r3, [pc, #484]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f0c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f10:	2102      	movs	r1, #2
 8002f12:	6011      	str	r1, [r2, #0]
 8002f14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f18:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	fa92 f1a2 	rbit	r1, r2
 8002f22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f26:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f2a:	6011      	str	r1, [r2, #0]
  return result;
 8002f2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f30:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	fab2 f282 	clz	r2, r2
 8002f3a:	b2d2      	uxtb	r2, r2
 8002f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f002 021f 	and.w	r2, r2, #31
 8002f46:	2101      	movs	r1, #1
 8002f48:	fa01 f202 	lsl.w	r2, r1, r2
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d084      	beq.n	8002e5c <HAL_RCC_OscConfig+0x9c8>
 8002f52:	e07f      	b.n	8003054 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f54:	f7fd fd76 	bl	8000a44 <HAL_GetTick>
 8002f58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5c:	e00b      	b.n	8002f76 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fd fd71 	bl	8000a44 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e2c4      	b.n	8003500 <HAL_RCC_OscConfig+0x106c>
 8002f76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f7a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002f7e:	2202      	movs	r2, #2
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f86:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	fa93 f2a3 	rbit	r2, r3
 8002f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f94:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002faa:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	fa93 f2a3 	rbit	r2, r3
 8002fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fbc:	601a      	str	r2, [r3, #0]
  return result;
 8002fbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fc2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002fc6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	fab3 f383 	clz	r3, r3
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f043 0302 	orr.w	r3, r3, #2
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d102      	bne.n	8002fe2 <HAL_RCC_OscConfig+0xb4e>
 8002fdc:	4b43      	ldr	r3, [pc, #268]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	e013      	b.n	800300a <HAL_RCC_OscConfig+0xb76>
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003000:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	4b39      	ldr	r3, [pc, #228]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800300e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003012:	2102      	movs	r1, #2
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800301a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	fa92 f1a2 	rbit	r1, r2
 8003024:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003028:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800302c:	6011      	str	r1, [r2, #0]
  return result;
 800302e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003032:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	fab2 f282 	clz	r2, r2
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	f002 021f 	and.w	r2, r2, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f202 	lsl.w	r2, r1, r2
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d184      	bne.n	8002f5e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003054:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800305c:	4b23      	ldr	r3, [pc, #140]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	4a22      	ldr	r2, [pc, #136]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 8003062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003066:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8242 	beq.w	80034fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ec <HAL_RCC_OscConfig+0xc58>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 030c 	and.w	r3, r3, #12
 8003082:	2b08      	cmp	r3, #8
 8003084:	f000 8213 	beq.w	80034ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800308c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	2b02      	cmp	r3, #2
 8003096:	f040 8162 	bne.w	800335e <HAL_RCC_OscConfig+0xeca>
 800309a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030a2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ac:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	fa93 f2a3 	rbit	r2, r3
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030be:	601a      	str	r2, [r3, #0]
  return result;
 80030c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	461a      	mov	r2, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fd fcb0 	bl	8000a44 <HAL_GetTick>
 80030e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e8:	e00c      	b.n	8003104 <HAL_RCC_OscConfig+0xc70>
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fd fca8 	bl	8000a44 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e1fd      	b.n	8003500 <HAL_RCC_OscConfig+0x106c>
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800310c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003116:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	fa93 f2a3 	rbit	r2, r3
 8003120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003124:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003128:	601a      	str	r2, [r3, #0]
  return result;
 800312a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003132:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d102      	bne.n	800314e <HAL_RCC_OscConfig+0xcba>
 8003148:	4bb0      	ldr	r3, [pc, #704]	@ (800340c <HAL_RCC_OscConfig+0xf78>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	e027      	b.n	800319e <HAL_RCC_OscConfig+0xd0a>
 800314e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003152:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003156:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800315a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003160:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003178:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800317c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003186:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	4b9c      	ldr	r3, [pc, #624]	@ (800340c <HAL_RCC_OscConfig+0xf78>)
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031a6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031aa:	6011      	str	r1, [r2, #0]
 80031ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031b0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	fa92 f1a2 	rbit	r1, r2
 80031ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031be:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031c2:	6011      	str	r1, [r2, #0]
  return result;
 80031c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031c8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	fab2 f282 	clz	r2, r2
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f042 0220 	orr.w	r2, r2, #32
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f002 021f 	and.w	r2, r2, #31
 80031de:	2101      	movs	r1, #1
 80031e0:	fa01 f202 	lsl.w	r2, r1, r2
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d182      	bne.n	80030f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031ea:	4b88      	ldr	r3, [pc, #544]	@ (800340c <HAL_RCC_OscConfig+0xf78>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80031fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003202:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	430b      	orrs	r3, r1
 800320c:	497f      	ldr	r1, [pc, #508]	@ (800340c <HAL_RCC_OscConfig+0xf78>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
 8003212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003216:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800321a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800321e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003224:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	fa93 f2a3 	rbit	r2, r3
 800322e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003232:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003236:	601a      	str	r2, [r3, #0]
  return result;
 8003238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003240:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800324c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	461a      	mov	r2, r3
 8003254:	2301      	movs	r3, #1
 8003256:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003258:	f7fd fbf4 	bl	8000a44 <HAL_GetTick>
 800325c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003260:	e009      	b.n	8003276 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003262:	f7fd fbef 	bl	8000a44 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e144      	b.n	8003500 <HAL_RCC_OscConfig+0x106c>
 8003276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800327e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003288:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	fa93 f2a3 	rbit	r2, r3
 8003292:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003296:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800329a:	601a      	str	r2, [r3, #0]
  return result;
 800329c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	095b      	lsrs	r3, r3, #5
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d102      	bne.n	80032c0 <HAL_RCC_OscConfig+0xe2c>
 80032ba:	4b54      	ldr	r3, [pc, #336]	@ (800340c <HAL_RCC_OscConfig+0xf78>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	e027      	b.n	8003310 <HAL_RCC_OscConfig+0xe7c>
 80032c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ea:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	fa93 f2a3 	rbit	r2, r3
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <HAL_RCC_OscConfig+0xf78>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003314:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003318:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800331c:	6011      	str	r1, [r2, #0]
 800331e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003322:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	fa92 f1a2 	rbit	r1, r2
 800332c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003330:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003334:	6011      	str	r1, [r2, #0]
  return result;
 8003336:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800333a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	fab2 f282 	clz	r2, r2
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	f002 021f 	and.w	r2, r2, #31
 8003350:	2101      	movs	r1, #1
 8003352:	fa01 f202 	lsl.w	r2, r1, r2
 8003356:	4013      	ands	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d082      	beq.n	8003262 <HAL_RCC_OscConfig+0xdce>
 800335c:	e0cf      	b.n	80034fe <HAL_RCC_OscConfig+0x106a>
 800335e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003362:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003366:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800336a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003370:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	fa93 f2a3 	rbit	r2, r3
 800337a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800337e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003382:	601a      	str	r2, [r3, #0]
  return result;
 8003384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003388:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800338c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	fab3 f383 	clz	r3, r3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003398:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	461a      	mov	r2, r3
 80033a0:	2300      	movs	r3, #0
 80033a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fd fb4e 	bl	8000a44 <HAL_GetTick>
 80033a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ac:	e009      	b.n	80033c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fd fb49 	bl	8000a44 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e09e      	b.n	8003500 <HAL_RCC_OscConfig+0x106c>
 80033c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033e6:	601a      	str	r2, [r3, #0]
  return result;
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d104      	bne.n	8003410 <HAL_RCC_OscConfig+0xf7c>
 8003406:	4b01      	ldr	r3, [pc, #4]	@ (800340c <HAL_RCC_OscConfig+0xf78>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	e029      	b.n	8003460 <HAL_RCC_OscConfig+0xfcc>
 800340c:	40021000 	.word	0x40021000
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003418:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800341c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003422:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f2a3 	rbit	r2, r3
 800342c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003430:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800343e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003448:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	fa93 f2a3 	rbit	r2, r3
 8003452:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003456:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	4b2b      	ldr	r3, [pc, #172]	@ (800350c <HAL_RCC_OscConfig+0x1078>)
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003464:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003468:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800346c:	6011      	str	r1, [r2, #0]
 800346e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003472:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	fa92 f1a2 	rbit	r1, r2
 800347c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003480:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003484:	6011      	str	r1, [r2, #0]
  return result;
 8003486:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800348a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	f042 0220 	orr.w	r2, r2, #32
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	f002 021f 	and.w	r2, r2, #31
 80034a0:	2101      	movs	r1, #1
 80034a2:	fa01 f202 	lsl.w	r2, r1, r2
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d180      	bne.n	80033ae <HAL_RCC_OscConfig+0xf1a>
 80034ac:	e027      	b.n	80034fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e01e      	b.n	8003500 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034c2:	4b12      	ldr	r3, [pc, #72]	@ (800350c <HAL_RCC_OscConfig+0x1078>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034ce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d10b      	bne.n	80034fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80034e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000

08003510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b09e      	sub	sp, #120	@ 0x78
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e162      	b.n	80037ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b90      	ldr	r3, [pc, #576]	@ (800376c <HAL_RCC_ClockConfig+0x25c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d910      	bls.n	8003558 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b8d      	ldr	r3, [pc, #564]	@ (800376c <HAL_RCC_ClockConfig+0x25c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0207 	bic.w	r2, r3, #7
 800353e:	498b      	ldr	r1, [pc, #556]	@ (800376c <HAL_RCC_ClockConfig+0x25c>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b89      	ldr	r3, [pc, #548]	@ (800376c <HAL_RCC_ClockConfig+0x25c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e14a      	b.n	80037ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003564:	4b82      	ldr	r3, [pc, #520]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	497f      	ldr	r1, [pc, #508]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 80dc 	beq.w	800373c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d13c      	bne.n	8003606 <HAL_RCC_ClockConfig+0xf6>
 800358c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003590:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003594:	fa93 f3a3 	rbit	r3, r3
 8003598:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800359a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d102      	bne.n	80035b6 <HAL_RCC_ClockConfig+0xa6>
 80035b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	e00f      	b.n	80035d6 <HAL_RCC_ClockConfig+0xc6>
 80035b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80035c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035d2:	4b67      	ldr	r3, [pc, #412]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035de:	fa92 f2a2 	rbit	r2, r2
 80035e2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80035e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0220 	orr.w	r2, r2, #32
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d17b      	bne.n	80036fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e0f3      	b.n	80037ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d13c      	bne.n	8003688 <HAL_RCC_ClockConfig+0x178>
 800360e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003612:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800361c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b01      	cmp	r3, #1
 8003630:	d102      	bne.n	8003638 <HAL_RCC_ClockConfig+0x128>
 8003632:	4b4f      	ldr	r3, [pc, #316]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	e00f      	b.n	8003658 <HAL_RCC_ClockConfig+0x148>
 8003638:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800363c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	647b      	str	r3, [r7, #68]	@ 0x44
 8003646:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800364a:	643b      	str	r3, [r7, #64]	@ 0x40
 800364c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003654:	4b46      	ldr	r3, [pc, #280]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 8003656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003658:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800365c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800365e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003660:	fa92 f2a2 	rbit	r2, r2
 8003664:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003666:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003668:	fab2 f282 	clz	r2, r2
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	f042 0220 	orr.w	r2, r2, #32
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f002 021f 	and.w	r2, r2, #31
 8003678:	2101      	movs	r1, #1
 800367a:	fa01 f202 	lsl.w	r2, r1, r2
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d13a      	bne.n	80036fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e0b2      	b.n	80037ee <HAL_RCC_ClockConfig+0x2de>
 8003688:	2302      	movs	r3, #2
 800368a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	fab3 f383 	clz	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d102      	bne.n	80036b0 <HAL_RCC_ClockConfig+0x1a0>
 80036aa:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	e00d      	b.n	80036cc <HAL_RCC_ClockConfig+0x1bc>
 80036b0:	2302      	movs	r3, #2
 80036b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80036bc:	2302      	movs	r3, #2
 80036be:	623b      	str	r3, [r7, #32]
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	61fb      	str	r3, [r7, #28]
 80036c8:	4b29      	ldr	r3, [pc, #164]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 80036ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036cc:	2202      	movs	r2, #2
 80036ce:	61ba      	str	r2, [r7, #24]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	fa92 f2a2 	rbit	r2, r2
 80036d6:	617a      	str	r2, [r7, #20]
  return result;
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	fab2 f282 	clz	r2, r2
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f202 	lsl.w	r2, r1, r2
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e079      	b.n	80037ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f023 0203 	bic.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	491a      	ldr	r1, [pc, #104]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800370c:	f7fd f99a 	bl	8000a44 <HAL_GetTick>
 8003710:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	e00a      	b.n	800372a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003714:	f7fd f996 	bl	8000a44 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e061      	b.n	80037ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	4b11      	ldr	r3, [pc, #68]	@ (8003770 <HAL_RCC_ClockConfig+0x260>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f003 020c 	and.w	r2, r3, #12
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	429a      	cmp	r2, r3
 800373a:	d1eb      	bne.n	8003714 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800373c:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <HAL_RCC_ClockConfig+0x25c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d214      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b08      	ldr	r3, [pc, #32]	@ (800376c <HAL_RCC_ClockConfig+0x25c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 0207 	bic.w	r2, r3, #7
 8003752:	4906      	ldr	r1, [pc, #24]	@ (800376c <HAL_RCC_ClockConfig+0x25c>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b04      	ldr	r3, [pc, #16]	@ (800376c <HAL_RCC_ClockConfig+0x25c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d005      	beq.n	8003774 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e040      	b.n	80037ee <HAL_RCC_ClockConfig+0x2de>
 800376c:	40022000 	.word	0x40022000
 8003770:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003780:	4b1d      	ldr	r3, [pc, #116]	@ (80037f8 <HAL_RCC_ClockConfig+0x2e8>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	491a      	ldr	r1, [pc, #104]	@ (80037f8 <HAL_RCC_ClockConfig+0x2e8>)
 800378e:	4313      	orrs	r3, r2
 8003790:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379e:	4b16      	ldr	r3, [pc, #88]	@ (80037f8 <HAL_RCC_ClockConfig+0x2e8>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4912      	ldr	r1, [pc, #72]	@ (80037f8 <HAL_RCC_ClockConfig+0x2e8>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037b2:	f000 f829 	bl	8003808 <HAL_RCC_GetSysClockFreq>
 80037b6:	4601      	mov	r1, r0
 80037b8:	4b0f      	ldr	r3, [pc, #60]	@ (80037f8 <HAL_RCC_ClockConfig+0x2e8>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037c0:	22f0      	movs	r2, #240	@ 0xf0
 80037c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	fa92 f2a2 	rbit	r2, r2
 80037ca:	60fa      	str	r2, [r7, #12]
  return result;
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	fab2 f282 	clz	r2, r2
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	40d3      	lsrs	r3, r2
 80037d6:	4a09      	ldr	r2, [pc, #36]	@ (80037fc <HAL_RCC_ClockConfig+0x2ec>)
 80037d8:	5cd3      	ldrb	r3, [r2, r3]
 80037da:	fa21 f303 	lsr.w	r3, r1, r3
 80037de:	4a08      	ldr	r2, [pc, #32]	@ (8003800 <HAL_RCC_ClockConfig+0x2f0>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80037e2:	4b08      	ldr	r3, [pc, #32]	@ (8003804 <HAL_RCC_ClockConfig+0x2f4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd f8e8 	bl	80009bc <HAL_InitTick>
  
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3778      	adds	r7, #120	@ 0x78
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000
 80037fc:	08003e7c 	.word	0x08003e7c
 8003800:	20000000 	.word	0x20000000
 8003804:	20000004 	.word	0x20000004

08003808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003808:	b480      	push	{r7}
 800380a:	b08b      	sub	sp, #44	@ 0x2c
 800380c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
 800381a:	2300      	movs	r3, #0
 800381c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003822:	4b29      	ldr	r3, [pc, #164]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 030c 	and.w	r3, r3, #12
 800382e:	2b04      	cmp	r3, #4
 8003830:	d002      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x30>
 8003832:	2b08      	cmp	r3, #8
 8003834:	d003      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x36>
 8003836:	e03c      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003838:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800383a:	623b      	str	r3, [r7, #32]
      break;
 800383c:	e03c      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003844:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003848:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	fa92 f2a2 	rbit	r2, r2
 8003850:	607a      	str	r2, [r7, #4]
  return result;
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	fab2 f282 	clz	r2, r2
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	40d3      	lsrs	r3, r2
 800385c:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800385e:	5cd3      	ldrb	r3, [r2, r3]
 8003860:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003862:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	220f      	movs	r2, #15
 800386c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	fa92 f2a2 	rbit	r2, r2
 8003874:	60fa      	str	r2, [r7, #12]
  return result;
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	fab2 f282 	clz	r2, r2
 800387c:	b2d2      	uxtb	r2, r2
 800387e:	40d3      	lsrs	r3, r2
 8003880:	4a14      	ldr	r2, [pc, #80]	@ (80038d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003882:	5cd3      	ldrb	r3, [r2, r3]
 8003884:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d008      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003890:	4a0e      	ldr	r2, [pc, #56]	@ (80038cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	fbb2 f2f3 	udiv	r2, r2, r3
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a0:	e004      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4a0c      	ldr	r2, [pc, #48]	@ (80038d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	623b      	str	r3, [r7, #32]
      break;
 80038b0:	e002      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80038b4:	623b      	str	r3, [r7, #32]
      break;
 80038b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b8:	6a3b      	ldr	r3, [r7, #32]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	372c      	adds	r7, #44	@ 0x2c
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000
 80038cc:	007a1200 	.word	0x007a1200
 80038d0:	08003e8c 	.word	0x08003e8c
 80038d4:	08003e9c 	.word	0x08003e9c
 80038d8:	003d0900 	.word	0x003d0900

080038dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b092      	sub	sp, #72	@ 0x48
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038e4:	2300      	movs	r3, #0
 80038e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 80d4 	beq.w	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003900:	4b4e      	ldr	r3, [pc, #312]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10e      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	4a4a      	ldr	r2, [pc, #296]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003916:	61d3      	str	r3, [r2, #28]
 8003918:	4b48      	ldr	r3, [pc, #288]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800392a:	4b45      	ldr	r3, [pc, #276]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d118      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003936:	4b42      	ldr	r3, [pc, #264]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a41      	ldr	r2, [pc, #260]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003940:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003942:	f7fd f87f 	bl	8000a44 <HAL_GetTick>
 8003946:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003948:	e008      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394a:	f7fd f87b 	bl	8000a44 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b64      	cmp	r3, #100	@ 0x64
 8003956:	d901      	bls.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e169      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395c:	4b38      	ldr	r3, [pc, #224]	@ (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003968:	4b34      	ldr	r3, [pc, #208]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003970:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 8084 	beq.w	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003982:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003984:	429a      	cmp	r2, r3
 8003986:	d07c      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003988:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003992:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003996:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	fa93 f3a3 	rbit	r3, r3
 800399e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80039a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039a2:	fab3 f383 	clz	r3, r3
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b26      	ldr	r3, [pc, #152]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039ac:	4413      	add	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	461a      	mov	r2, r3
 80039b2:	2301      	movs	r3, #1
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80039c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c6:	fab3 f383 	clz	r3, r3
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	461a      	mov	r2, r3
 80039d6:	2300      	movs	r3, #0
 80039d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039da:	4a18      	ldr	r2, [pc, #96]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04b      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ea:	f7fd f82b 	bl	8000a44 <HAL_GetTick>
 80039ee:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f0:	e00a      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f2:	f7fd f827 	bl	8000a44 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e113      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a14:	2302      	movs	r3, #2
 8003a16:	623b      	str	r3, [r7, #32]
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	fa93 f3a3 	rbit	r3, r3
 8003a1e:	61fb      	str	r3, [r7, #28]
  return result;
 8003a20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a22:	fab3 f383 	clz	r3, r3
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f043 0302 	orr.w	r3, r3, #2
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d108      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a36:	4b01      	ldr	r3, [pc, #4]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	e00d      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40007000 	.word	0x40007000
 8003a44:	10908100 	.word	0x10908100
 8003a48:	2302      	movs	r3, #2
 8003a4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	4b78      	ldr	r3, [pc, #480]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	2202      	movs	r2, #2
 8003a5a:	613a      	str	r2, [r7, #16]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	fa92 f2a2 	rbit	r2, r2
 8003a62:	60fa      	str	r2, [r7, #12]
  return result;
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	fab2 f282 	clz	r2, r2
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	f002 021f 	and.w	r2, r2, #31
 8003a76:	2101      	movs	r1, #1
 8003a78:	fa01 f202 	lsl.w	r2, r1, r2
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0b7      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a82:	4b6d      	ldr	r3, [pc, #436]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	496a      	ldr	r1, [pc, #424]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9c:	4b66      	ldr	r3, [pc, #408]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	4a65      	ldr	r2, [pc, #404]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ab4:	4b60      	ldr	r3, [pc, #384]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab8:	f023 0203 	bic.w	r2, r3, #3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	495d      	ldr	r1, [pc, #372]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d008      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad2:	4b59      	ldr	r3, [pc, #356]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	4956      	ldr	r1, [pc, #344]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003af0:	4b51      	ldr	r3, [pc, #324]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	494e      	ldr	r1, [pc, #312]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	f023 0210 	bic.w	r2, r3, #16
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	4947      	ldr	r1, [pc, #284]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b2c:	4b42      	ldr	r3, [pc, #264]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	493f      	ldr	r1, [pc, #252]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d008      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	f023 0220 	bic.w	r2, r3, #32
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4938      	ldr	r1, [pc, #224]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b68:	4b33      	ldr	r3, [pc, #204]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	4930      	ldr	r1, [pc, #192]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b86:	4b2c      	ldr	r3, [pc, #176]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	4929      	ldr	r1, [pc, #164]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ba4:	4b24      	ldr	r3, [pc, #144]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	4921      	ldr	r1, [pc, #132]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	491a      	ldr	r1, [pc, #104]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003be0:	4b15      	ldr	r3, [pc, #84]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bec:	4912      	ldr	r1, [pc, #72]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d008      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c02:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	490b      	ldr	r1, [pc, #44]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c28:	4903      	ldr	r1, [pc, #12]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3748      	adds	r7, #72	@ 0x48
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e09d      	b.n	8003d8a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d108      	bne.n	8003c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c5e:	d009      	beq.n	8003c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	61da      	str	r2, [r3, #28]
 8003c66:	e005      	b.n	8003c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fc fd8c 	bl	80007ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003caa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cb4:	d902      	bls.n	8003cbc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	e002      	b.n	8003cc2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003cbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003cca:	d007      	beq.n	8003cdc <HAL_SPI_Init+0xa0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d14:	431a      	orrs	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1e:	ea42 0103 	orr.w	r1, r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d26:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	0c1b      	lsrs	r3, r3, #16
 8003d38:	f003 0204 	and.w	r2, r3, #4
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d58:	ea42 0103 	orr.w	r1, r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d9a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003d9e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	4013      	ands	r3, r2
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003dc8:	b084      	sub	sp, #16
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	f107 0014 	add.w	r0, r7, #20
 8003dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	b004      	add	sp, #16
 8003e08:	4770      	bx	lr

08003e0a <memset>:
 8003e0a:	4402      	add	r2, r0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d100      	bne.n	8003e14 <memset+0xa>
 8003e12:	4770      	bx	lr
 8003e14:	f803 1b01 	strb.w	r1, [r3], #1
 8003e18:	e7f9      	b.n	8003e0e <memset+0x4>
	...

08003e1c <__libc_init_array>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e54 <__libc_init_array+0x38>)
 8003e20:	4c0d      	ldr	r4, [pc, #52]	@ (8003e58 <__libc_init_array+0x3c>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	2600      	movs	r6, #0
 8003e28:	42a6      	cmp	r6, r4
 8003e2a:	d109      	bne.n	8003e40 <__libc_init_array+0x24>
 8003e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e5c <__libc_init_array+0x40>)
 8003e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e60 <__libc_init_array+0x44>)
 8003e30:	f000 f818 	bl	8003e64 <_init>
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	2600      	movs	r6, #0
 8003e3a:	42a6      	cmp	r6, r4
 8003e3c:	d105      	bne.n	8003e4a <__libc_init_array+0x2e>
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e44:	4798      	blx	r3
 8003e46:	3601      	adds	r6, #1
 8003e48:	e7ee      	b.n	8003e28 <__libc_init_array+0xc>
 8003e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4e:	4798      	blx	r3
 8003e50:	3601      	adds	r6, #1
 8003e52:	e7f2      	b.n	8003e3a <__libc_init_array+0x1e>
 8003e54:	08003eac 	.word	0x08003eac
 8003e58:	08003eac 	.word	0x08003eac
 8003e5c:	08003eac 	.word	0x08003eac
 8003e60:	08003eb0 	.word	0x08003eb0

08003e64 <_init>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr

08003e70 <_fini>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr
