
POT_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ccc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003e54  08003e54  00004e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e84  08003e84  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e84  08003e84  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e84  08003e84  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e84  08003e84  00004e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e88  08003e88  00004e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003e8c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000418  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e942  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f3  00000000  00000000  0001397e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00015a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009b8  00000000  00000000  00016710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d8ed  00000000  00000000  000170c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112e0  00000000  00000000  000349b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3cee  00000000  00000000  00045c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9983  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000348c  00000000  00000000  000f99c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000fce54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e3c 	.word	0x08003e3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003e3c 	.word	0x08003e3c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fbcc 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f820 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f992 	bl	80004fc <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f8f0 	bl	80003bc <MX_I2C1_Init>
  MX_SPI1_Init();
 80001dc:	f000 f92e 	bl	800043c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001e0:	f000 f96a 	bl	80004b8 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80001e4:	f000 f87a 	bl	80002dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80001e8:	4808      	ldr	r0, [pc, #32]	@ (800020c <main+0x44>)
 80001ea:	f000 fe03 	bl	8000df4 <HAL_ADC_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_ADC_PollForConversion(&hadc1,1000);
 80001ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80001f2:	4806      	ldr	r0, [pc, #24]	@ (800020c <main+0x44>)
 80001f4:	f000 ff14 	bl	8001020 <HAL_ADC_PollForConversion>
	  	readValue = HAL_ADC_GetValue(&hadc1);
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <main+0x44>)
 80001fa:	f001 f813 	bl	8001224 <HAL_ADC_GetValue>
 80001fe:	4603      	mov	r3, r0
 8000200:	b29a      	uxth	r2, r3
 8000202:	4b03      	ldr	r3, [pc, #12]	@ (8000210 <main+0x48>)
 8000204:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8000206:	bf00      	nop
 8000208:	e7f1      	b.n	80001ee <main+0x26>
 800020a:	bf00      	nop
 800020c:	20000028 	.word	0x20000028
 8000210:	2000041c 	.word	0x2000041c

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b09e      	sub	sp, #120	@ 0x78
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800021e:	2228      	movs	r2, #40	@ 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fddd 	bl	8003de2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	223c      	movs	r2, #60	@ 0x3c
 800023c:	2100      	movs	r1, #0
 800023e:	4618      	mov	r0, r3
 8000240:	f003 fdcf 	bl	8003de2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000244:	2303      	movs	r3, #3
 8000246:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000248:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800024c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000252:	2301      	movs	r3, #1
 8000254:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000262:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000264:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000268:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800026e:	4618      	mov	r0, r3
 8000270:	f002 f8fc 	bl	800246c <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800027a:	f000 f9bd 	bl	80005f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000282:	2302      	movs	r3, #2
 8000284:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800028e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000294:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000298:	2101      	movs	r1, #1
 800029a:	4618      	mov	r0, r3
 800029c:	f003 f924 	bl	80034e8 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a6:	f000 f9a7 	bl	80005f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80002aa:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <SystemClock_Config+0xc4>)
 80002ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80002ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002b2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	4618      	mov	r0, r3
 80002c2:	f003 faf7 	bl	80038b4 <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80002cc:	f000 f994 	bl	80005f8 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3778      	adds	r7, #120	@ 0x78
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	000200a0 	.word	0x000200a0

080002dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08a      	sub	sp, #40	@ 0x28
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002e2:	f107 031c 	add.w	r3, r7, #28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fe:	4b2e      	ldr	r3, [pc, #184]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000300:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000308:	2200      	movs	r2, #0
 800030a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800030c:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000312:	4b29      	ldr	r3, [pc, #164]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000318:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800031a:	2201      	movs	r2, #1
 800031c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b26      	ldr	r3, [pc, #152]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000320:	2200      	movs	r2, #0
 8000322:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000326:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000328:	2200      	movs	r2, #0
 800032a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800032c:	4b22      	ldr	r3, [pc, #136]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800032e:	2201      	movs	r2, #1
 8000330:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000332:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000338:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800033a:	2201      	movs	r2, #1
 800033c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800033e:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000340:	2200      	movs	r2, #0
 8000342:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000346:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000348:	2204      	movs	r2, #4
 800034a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800034c:	4b1a      	ldr	r3, [pc, #104]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800034e:	2200      	movs	r2, #0
 8000350:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000352:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000354:	2200      	movs	r2, #0
 8000356:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000358:	4817      	ldr	r0, [pc, #92]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 800035a:	f000 fb6b 	bl	8000a34 <HAL_ADC_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000364:	f000 f948 	bl	80005f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4619      	mov	r1, r3
 8000372:	4811      	ldr	r0, [pc, #68]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 8000374:	f001 fa4e 	bl	8001814 <HAL_ADCEx_MultiModeConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800037e:	f000 f93b 	bl	80005f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000382:	2309      	movs	r3, #9
 8000384:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000386:	2301      	movs	r3, #1
 8000388:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800038a:	2301      	movs	r3, #1
 800038c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800038e:	2300      	movs	r3, #0
 8000390:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000392:	2300      	movs	r3, #0
 8000394:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	4619      	mov	r1, r3
 800039e:	4806      	ldr	r0, [pc, #24]	@ (80003b8 <MX_ADC1_Init+0xdc>)
 80003a0:	f000 ff4e 	bl	8001240 <HAL_ADC_ConfigChannel>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80003aa:	f000 f925 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	3728      	adds	r7, #40	@ 0x28
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000028 	.word	0x20000028

080003bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000434 <MX_I2C1_Init+0x78>)
 80003c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000438 <MX_I2C1_Init+0x7c>)
 80003ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003cc:	4b18      	ldr	r3, [pc, #96]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d2:	4b17      	ldr	r3, [pc, #92]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d8:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003de:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ea:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f6:	480e      	ldr	r0, [pc, #56]	@ (8000430 <MX_I2C1_Init+0x74>)
 80003f8:	f001 fe40 	bl	800207c <HAL_I2C_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000402:	f000 f8f9 	bl	80005f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000406:	2100      	movs	r1, #0
 8000408:	4809      	ldr	r0, [pc, #36]	@ (8000430 <MX_I2C1_Init+0x74>)
 800040a:	f001 fec6 	bl	800219a <HAL_I2CEx_ConfigAnalogFilter>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000414:	f000 f8f0 	bl	80005f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000418:	2100      	movs	r1, #0
 800041a:	4805      	ldr	r0, [pc, #20]	@ (8000430 <MX_I2C1_Init+0x74>)
 800041c:	f001 ff08 	bl	8002230 <HAL_I2CEx_ConfigDigitalFilter>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000426:	f000 f8e7 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000078 	.word	0x20000078
 8000434:	40005400 	.word	0x40005400
 8000438:	2000090e 	.word	0x2000090e

0800043c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000440:	4b1b      	ldr	r3, [pc, #108]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	@ (80004b4 <MX_SPI1_Init+0x78>)
 8000444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000446:	4b1a      	ldr	r3, [pc, #104]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800044c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800044e:	4b18      	ldr	r3, [pc, #96]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000454:	4b16      	ldr	r3, [pc, #88]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000456:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800045a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <MX_SPI1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000462:	4b13      	ldr	r3, [pc, #76]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <MX_SPI1_Init+0x74>)
 800046a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800046e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000472:	2208      	movs	r2, #8
 8000474:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000476:	4b0e      	ldr	r3, [pc, #56]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <MX_SPI1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000482:	4b0b      	ldr	r3, [pc, #44]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <MX_SPI1_Init+0x74>)
 800048a:	2207      	movs	r2, #7
 800048c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800048e:	4b08      	ldr	r3, [pc, #32]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000490:	2200      	movs	r2, #0
 8000492:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <MX_SPI1_Init+0x74>)
 8000496:	2208      	movs	r2, #8
 8000498:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800049a:	4805      	ldr	r0, [pc, #20]	@ (80004b0 <MX_SPI1_Init+0x74>)
 800049c:	f003 fbba 	bl	8003c14 <HAL_SPI_Init>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004a6:	f000 f8a7 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200000cc 	.word	0x200000cc
 80004b4:	40013000 	.word	0x40013000

080004b8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004be:	4a0e      	ldr	r2, [pc, #56]	@ (80004f8 <MX_USB_PCD_Init+0x40>)
 80004c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004c4:	2208      	movs	r2, #8
 80004c6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004ca:	2202      	movs	r2, #2
 80004cc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004d0:	2202      	movs	r2, #2
 80004d2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <MX_USB_PCD_Init+0x3c>)
 80004e2:	f001 fef1 	bl	80022c8 <HAL_PCD_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80004ec:	f000 f884 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000130 	.word	0x20000130
 80004f8:	40005c00 	.word	0x40005c00

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08a      	sub	sp, #40	@ 0x28
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000512:	4b37      	ldr	r3, [pc, #220]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a36      	ldr	r2, [pc, #216]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000518:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800051c:	6153      	str	r3, [r2, #20]
 800051e:	4b34      	ldr	r3, [pc, #208]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b31      	ldr	r3, [pc, #196]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	4a30      	ldr	r2, [pc, #192]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000530:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000534:	6153      	str	r3, [r2, #20]
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a2a      	ldr	r2, [pc, #168]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000548:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a24      	ldr	r2, [pc, #144]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000564:	6153      	str	r3, [r2, #20]
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b1f      	ldr	r3, [pc, #124]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	4a1e      	ldr	r2, [pc, #120]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800057c:	6153      	str	r3, [r2, #20]
 800057e:	4b1c      	ldr	r3, [pc, #112]	@ (80005f0 <MX_GPIO_Init+0xf4>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800058a:	2200      	movs	r2, #0
 800058c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000590:	4818      	ldr	r0, [pc, #96]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 8000592:	f001 fd5b 	bl	800204c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000596:	2337      	movs	r3, #55	@ 0x37
 8000598:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800059a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	4812      	ldr	r0, [pc, #72]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 80005ac:	f001 fbd4 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80005b0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80005b4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	480a      	ldr	r0, [pc, #40]	@ (80005f4 <MX_GPIO_Init+0xf8>)
 80005ca:	f001 fbc5 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ce:	2301      	movs	r3, #1
 80005d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d2:	2300      	movs	r3, #0
 80005d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4619      	mov	r1, r3
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e4:	f001 fbb8 	bl	8001d58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e8:	bf00      	nop
 80005ea:	3728      	adds	r7, #40	@ 0x28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	48001000 	.word	0x48001000

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
}
 80005fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <Error_Handler+0x8>

08000604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060a:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <HAL_MspInit+0x44>)
 800060c:	699b      	ldr	r3, [r3, #24]
 800060e:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <HAL_MspInit+0x44>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	6193      	str	r3, [r2, #24]
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <HAL_MspInit+0x44>)
 8000618:	699b      	ldr	r3, [r3, #24]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <HAL_MspInit+0x44>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <HAL_MspInit+0x44>)
 8000628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <HAL_MspInit+0x44>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800063a:	2007      	movs	r0, #7
 800063c:	f001 fb58 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40021000 	.word	0x40021000

0800064c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800066c:	d13b      	bne.n	80006e6 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800066e:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a1f      	ldr	r2, [pc, #124]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a19      	ldr	r2, [pc, #100]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 800068c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a13      	ldr	r2, [pc, #76]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 80006a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <HAL_ADC_MspInit+0xa4>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN9
    PF2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006b6:	2308      	movs	r3, #8
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ba:	2303      	movs	r3, #3
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	480a      	ldr	r0, [pc, #40]	@ (80006f4 <HAL_ADC_MspInit+0xa8>)
 80006ca:	f001 fb45 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ce:	2304      	movs	r3, #4
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <HAL_ADC_MspInit+0xac>)
 80006e2:	f001 fb39 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	@ 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800
 80006f8:	48001400 	.word	0x48001400

080006fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08a      	sub	sp, #40	@ 0x28
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a17      	ldr	r2, [pc, #92]	@ (8000778 <HAL_I2C_MspInit+0x7c>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d127      	bne.n	800076e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b17      	ldr	r3, [pc, #92]	@ (800077c <HAL_I2C_MspInit+0x80>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a16      	ldr	r2, [pc, #88]	@ (800077c <HAL_I2C_MspInit+0x80>)
 8000724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b14      	ldr	r3, [pc, #80]	@ (800077c <HAL_I2C_MspInit+0x80>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000736:	23c0      	movs	r3, #192	@ 0xc0
 8000738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073a:	2312      	movs	r3, #18
 800073c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073e:	2301      	movs	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000742:	2303      	movs	r3, #3
 8000744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000746:	2304      	movs	r3, #4
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <HAL_I2C_MspInit+0x84>)
 8000752:	f001 fb01 	bl	8001d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_I2C_MspInit+0x80>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <HAL_I2C_MspInit+0x80>)
 800075c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_I2C_MspInit+0x80>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800076e:	bf00      	nop
 8000770:	3728      	adds	r7, #40	@ 0x28
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40005400 	.word	0x40005400
 800077c:	40021000 	.word	0x40021000
 8000780:	48000400 	.word	0x48000400

08000784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 0314 	add.w	r3, r7, #20
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a17      	ldr	r2, [pc, #92]	@ (8000800 <HAL_SPI_MspInit+0x7c>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d128      	bne.n	80007f8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <HAL_SPI_MspInit+0x80>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a16      	ldr	r2, [pc, #88]	@ (8000804 <HAL_SPI_MspInit+0x80>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <HAL_SPI_MspInit+0x80>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <HAL_SPI_MspInit+0x80>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <HAL_SPI_MspInit+0x80>)
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c8:	6153      	str	r3, [r2, #20]
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <HAL_SPI_MspInit+0x80>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007d6:	23e0      	movs	r3, #224	@ 0xe0
 80007d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e6:	2305      	movs	r3, #5
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f4:	f001 fab0 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	@ 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40013000 	.word	0x40013000
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a18      	ldr	r2, [pc, #96]	@ (8000888 <HAL_PCD_MspInit+0x80>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d129      	bne.n	800087e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_PCD_MspInit+0x84>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <HAL_PCD_MspInit+0x84>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_PCD_MspInit+0x84>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000842:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000854:	230e      	movs	r3, #14
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f001 fa79 	bl	8001d58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <HAL_PCD_MspInit+0x84>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <HAL_PCD_MspInit+0x84>)
 800086c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_PCD_MspInit+0x84>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	@ 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40005c00 	.word	0x40005c00
 800088c:	40021000 	.word	0x40021000

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <NMI_Handler+0x4>

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <MemManage_Handler+0x4>

080008a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f885 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800094c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	@ (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f003 fa57 	bl	8003df4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000946:	f7ff fc3f 	bl	80001c8 <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800094c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000958:	08003e8c 	.word	0x08003e8c
  ldr r2, =_sbss
 800095c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000960:	20000424 	.word	0x20000424

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>
	...

08000968 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <HAL_Init+0x28>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <HAL_Init+0x28>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f001 f9b9 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fe3e 	bl	8000604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f9c3 	bl	8001d3e <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009d0:	f001 f999 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	@ (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_IncTick+0x20>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <HAL_IncTick+0x24>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_IncTick+0x24>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000420 	.word	0x20000420

08000a1c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <HAL_GetTick+0x14>)
 8000a22:	681b      	ldr	r3, [r3, #0]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000420 	.word	0x20000420

08000a34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09a      	sub	sp, #104	@ 0x68
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000a42:	2300      	movs	r3, #0
 8000a44:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d101      	bne.n	8000a54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e1c9      	b.n	8000de8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	691b      	ldr	r3, [r3, #16]
 8000a58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d176      	bne.n	8000b54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d152      	bne.n	8000b14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2200      	movs	r2, #0
 8000a72:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fddf 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d13b      	bne.n	8000b14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f001 f80f 	bl	8001ac0 <ADC_Disable>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d12f      	bne.n	8000b14 <HAL_ADC_Init+0xe0>
 8000ab4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d12b      	bne.n	8000b14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	f043 0202 	orr.w	r2, r3, #2
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	689a      	ldr	r2, [r3, #8]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000ade:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000aee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000af0:	4b86      	ldr	r3, [pc, #536]	@ (8000d0c <HAL_ADC_Init+0x2d8>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a86      	ldr	r2, [pc, #536]	@ (8000d10 <HAL_ADC_Init+0x2dc>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	0c9a      	lsrs	r2, r3, #18
 8000afc:	4613      	mov	r3, r2
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b06:	e002      	b.n	8000b0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f9      	bne.n	8000b08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d007      	beq.n	8000b32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b30:	d110      	bne.n	8000b54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b36:	f023 0312 	bic.w	r3, r3, #18
 8000b3a:	f043 0210 	orr.w	r2, r3, #16
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b46:	f043 0201 	orr.w	r2, r3, #1
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	f040 8136 	bne.w	8000dce <HAL_ADC_Init+0x39a>
 8000b62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8131 	bne.w	8000dce <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8129 	bne.w	8000dce <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000b84:	f043 0202 	orr.w	r2, r3, #2
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b94:	d004      	beq.n	8000ba0 <HAL_ADC_Init+0x16c>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a5e      	ldr	r2, [pc, #376]	@ (8000d14 <HAL_ADC_Init+0x2e0>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d101      	bne.n	8000ba4 <HAL_ADC_Init+0x170>
 8000ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8000d18 <HAL_ADC_Init+0x2e4>)
 8000ba2:	e000      	b.n	8000ba6 <HAL_ADC_Init+0x172>
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d1c <HAL_ADC_Init+0x2e8>)
 8000ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bb0:	d102      	bne.n	8000bb8 <HAL_ADC_Init+0x184>
 8000bb2:	4b58      	ldr	r3, [pc, #352]	@ (8000d14 <HAL_ADC_Init+0x2e0>)
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	e01a      	b.n	8000bee <HAL_ADC_Init+0x1ba>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a55      	ldr	r2, [pc, #340]	@ (8000d14 <HAL_ADC_Init+0x2e0>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d103      	bne.n	8000bca <HAL_ADC_Init+0x196>
 8000bc2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e011      	b.n	8000bee <HAL_ADC_Init+0x1ba>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a54      	ldr	r2, [pc, #336]	@ (8000d20 <HAL_ADC_Init+0x2ec>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d102      	bne.n	8000bda <HAL_ADC_Init+0x1a6>
 8000bd4:	4b53      	ldr	r3, [pc, #332]	@ (8000d24 <HAL_ADC_Init+0x2f0>)
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e009      	b.n	8000bee <HAL_ADC_Init+0x1ba>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a51      	ldr	r2, [pc, #324]	@ (8000d24 <HAL_ADC_Init+0x2f0>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d102      	bne.n	8000bea <HAL_ADC_Init+0x1b6>
 8000be4:	4b4e      	ldr	r3, [pc, #312]	@ (8000d20 <HAL_ADC_Init+0x2ec>)
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	e001      	b.n	8000bee <HAL_ADC_Init+0x1ba>
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d108      	bne.n	8000c0e <HAL_ADC_Init+0x1da>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d101      	bne.n	8000c0e <HAL_ADC_Init+0x1da>
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e000      	b.n	8000c10 <HAL_ADC_Init+0x1dc>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d11c      	bne.n	8000c4e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c14:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d010      	beq.n	8000c3c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d107      	bne.n	8000c36 <HAL_ADC_Init+0x202>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d101      	bne.n	8000c36 <HAL_ADC_Init+0x202>
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <HAL_ADC_Init+0x204>
 8000c36:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d108      	bne.n	8000c4e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000c4c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	7e5b      	ldrb	r3, [r3, #25]
 8000c52:	035b      	lsls	r3, r3, #13
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000c58:	2a01      	cmp	r2, #1
 8000c5a:	d002      	beq.n	8000c62 <HAL_ADC_Init+0x22e>
 8000c5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c60:	e000      	b.n	8000c64 <HAL_ADC_Init+0x230>
 8000c62:	2200      	movs	r2, #0
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c74:	4313      	orrs	r3, r2
 8000c76:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d11b      	bne.n	8000cba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7e5b      	ldrb	r3, [r3, #25]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d109      	bne.n	8000c9e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	045a      	lsls	r2, r3, #17
 8000c92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000c94:	4313      	orrs	r3, r2
 8000c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c9c:	e00d      	b.n	8000cba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000ca6:	f043 0220 	orr.w	r2, r3, #32
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	f043 0201 	orr.w	r2, r3, #1
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d03a      	beq.n	8000d38 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a16      	ldr	r2, [pc, #88]	@ (8000d20 <HAL_ADC_Init+0x2ec>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d004      	beq.n	8000cd6 <HAL_ADC_Init+0x2a2>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <HAL_ADC_Init+0x2f0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d128      	bne.n	8000d28 <HAL_ADC_Init+0x2f4>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cda:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8000cde:	d012      	beq.n	8000d06 <HAL_ADC_Init+0x2d2>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ce8:	d00a      	beq.n	8000d00 <HAL_ADC_Init+0x2cc>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cee:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8000cf2:	d002      	beq.n	8000cfa <HAL_ADC_Init+0x2c6>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf8:	e018      	b.n	8000d2c <HAL_ADC_Init+0x2f8>
 8000cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cfe:	e015      	b.n	8000d2c <HAL_ADC_Init+0x2f8>
 8000d00:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8000d04:	e012      	b.n	8000d2c <HAL_ADC_Init+0x2f8>
 8000d06:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000d0a:	e00f      	b.n	8000d2c <HAL_ADC_Init+0x2f8>
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	431bde83 	.word	0x431bde83
 8000d14:	50000100 	.word	0x50000100
 8000d18:	50000300 	.word	0x50000300
 8000d1c:	50000700 	.word	0x50000700
 8000d20:	50000400 	.word	0x50000400
 8000d24:	50000500 	.word	0x50000500
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000d30:	4313      	orrs	r3, r2
 8000d32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d34:	4313      	orrs	r3, r2
 8000d36:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	f003 030c 	and.w	r3, r3, #12
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d114      	bne.n	8000d70 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	6812      	ldr	r2, [r2, #0]
 8000d50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d54:	f023 0302 	bic.w	r3, r3, #2
 8000d58:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7e1b      	ldrb	r3, [r3, #24]
 8000d5e:	039a      	lsls	r2, r3, #14
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	4b1e      	ldr	r3, [pc, #120]	@ (8000df0 <HAL_ADC_Init+0x3bc>)
 8000d78:	4013      	ands	r3, r2
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	6812      	ldr	r2, [r2, #0]
 8000d7e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000d80:	430b      	orrs	r3, r1
 8000d82:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10c      	bne.n	8000da6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f023 010f 	bic.w	r1, r3, #15
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	430a      	orrs	r2, r1
 8000da2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000da4:	e007      	b.n	8000db6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f022 020f 	bic.w	r2, r2, #15
 8000db4:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f023 0303 	bic.w	r3, r3, #3
 8000dc4:	f043 0201 	orr.w	r2, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dcc:	e00a      	b.n	8000de4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f023 0312 	bic.w	r3, r3, #18
 8000dd6:	f043 0210 	orr.w	r2, r3, #16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000de4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3768      	adds	r7, #104	@ 0x68
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	fff0c007 	.word	0xfff0c007

08000df4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f040 80f9 	bne.w	8001002 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d101      	bne.n	8000e1e <HAL_ADC_Start+0x2a>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e0f4      	b.n	8001008 <HAL_ADC_Start+0x214>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2201      	movs	r2, #1
 8000e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f000 fde6 	bl	80019f8 <ADC_Enable>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f040 80e0 	bne.w	8000ff8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e54:	d004      	beq.n	8000e60 <HAL_ADC_Start+0x6c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a6d      	ldr	r2, [pc, #436]	@ (8001010 <HAL_ADC_Start+0x21c>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d106      	bne.n	8000e6e <HAL_ADC_Start+0x7a>
 8000e60:	4b6c      	ldr	r3, [pc, #432]	@ (8001014 <HAL_ADC_Start+0x220>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 031f 	and.w	r3, r3, #31
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d010      	beq.n	8000e8e <HAL_ADC_Start+0x9a>
 8000e6c:	e005      	b.n	8000e7a <HAL_ADC_Start+0x86>
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	@ (8001018 <HAL_ADC_Start+0x224>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 031f 	and.w	r3, r3, #31
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d009      	beq.n	8000e8e <HAL_ADC_Start+0x9a>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e82:	d004      	beq.n	8000e8e <HAL_ADC_Start+0x9a>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a64      	ldr	r2, [pc, #400]	@ (800101c <HAL_ADC_Start+0x228>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d115      	bne.n	8000eba <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d036      	beq.n	8000f16 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000eb0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000eb8:	e02d      	b.n	8000f16 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ece:	d004      	beq.n	8000eda <HAL_ADC_Start+0xe6>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a4e      	ldr	r2, [pc, #312]	@ (8001010 <HAL_ADC_Start+0x21c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d10a      	bne.n	8000ef0 <HAL_ADC_Start+0xfc>
 8000eda:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	bf14      	ite	ne
 8000ee8:	2301      	movne	r3, #1
 8000eea:	2300      	moveq	r3, #0
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	e008      	b.n	8000f02 <HAL_ADC_Start+0x10e>
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <HAL_ADC_Start+0x228>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bf14      	ite	ne
 8000efc:	2301      	movne	r3, #1
 8000efe:	2300      	moveq	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f22:	d106      	bne.n	8000f32 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f28:	f023 0206 	bic.w	r2, r3, #6
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f30:	e002      	b.n	8000f38 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	221c      	movs	r2, #28
 8000f46:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f50:	d004      	beq.n	8000f5c <HAL_ADC_Start+0x168>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a2e      	ldr	r2, [pc, #184]	@ (8001010 <HAL_ADC_Start+0x21c>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d106      	bne.n	8000f6a <HAL_ADC_Start+0x176>
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <HAL_ADC_Start+0x220>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d03e      	beq.n	8000fe6 <HAL_ADC_Start+0x1f2>
 8000f68:	e005      	b.n	8000f76 <HAL_ADC_Start+0x182>
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <HAL_ADC_Start+0x224>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 031f 	and.w	r3, r3, #31
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d037      	beq.n	8000fe6 <HAL_ADC_Start+0x1f2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f7e:	d004      	beq.n	8000f8a <HAL_ADC_Start+0x196>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a22      	ldr	r2, [pc, #136]	@ (8001010 <HAL_ADC_Start+0x21c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d106      	bne.n	8000f98 <HAL_ADC_Start+0x1a4>
 8000f8a:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <HAL_ADC_Start+0x220>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 031f 	and.w	r3, r3, #31
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d027      	beq.n	8000fe6 <HAL_ADC_Start+0x1f2>
 8000f96:	e005      	b.n	8000fa4 <HAL_ADC_Start+0x1b0>
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <HAL_ADC_Start+0x224>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	2b05      	cmp	r3, #5
 8000fa2:	d020      	beq.n	8000fe6 <HAL_ADC_Start+0x1f2>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fac:	d004      	beq.n	8000fb8 <HAL_ADC_Start+0x1c4>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <HAL_ADC_Start+0x21c>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d106      	bne.n	8000fc6 <HAL_ADC_Start+0x1d2>
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_ADC_Start+0x220>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	d010      	beq.n	8000fe6 <HAL_ADC_Start+0x1f2>
 8000fc4:	e005      	b.n	8000fd2 <HAL_ADC_Start+0x1de>
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <HAL_ADC_Start+0x224>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 031f 	and.w	r3, r3, #31
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	d009      	beq.n	8000fe6 <HAL_ADC_Start+0x1f2>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fda:	d004      	beq.n	8000fe6 <HAL_ADC_Start+0x1f2>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_ADC_Start+0x228>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d10f      	bne.n	8001006 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0204 	orr.w	r2, r2, #4
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	e006      	b.n	8001006 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001000:	e001      	b.n	8001006 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001002:	2302      	movs	r3, #2
 8001004:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	50000100 	.word	0x50000100
 8001014:	50000300 	.word	0x50000300
 8001018:	50000700 	.word	0x50000700
 800101c:	50000400 	.word	0x50000400

08001020 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	2b08      	cmp	r3, #8
 8001034:	d102      	bne.n	800103c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001036:	2308      	movs	r3, #8
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	e03a      	b.n	80010b2 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001044:	d004      	beq.n	8001050 <HAL_ADC_PollForConversion+0x30>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a72      	ldr	r2, [pc, #456]	@ (8001214 <HAL_ADC_PollForConversion+0x1f4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d101      	bne.n	8001054 <HAL_ADC_PollForConversion+0x34>
 8001050:	4b71      	ldr	r3, [pc, #452]	@ (8001218 <HAL_ADC_PollForConversion+0x1f8>)
 8001052:	e000      	b.n	8001056 <HAL_ADC_PollForConversion+0x36>
 8001054:	4b71      	ldr	r3, [pc, #452]	@ (800121c <HAL_ADC_PollForConversion+0x1fc>)
 8001056:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 031f 	and.w	r3, r3, #31
 8001060:	2b00      	cmp	r3, #0
 8001062:	d112      	bne.n	800108a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b01      	cmp	r3, #1
 8001070:	d11d      	bne.n	80010ae <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f043 0220 	orr.w	r2, r3, #32
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0bf      	b.n	800120a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00b      	beq.n	80010ae <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	f043 0220 	orr.w	r2, r3, #32
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0ad      	b.n	800120a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010ae:	230c      	movs	r3, #12
 80010b0:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_PollForConversion+0xa6>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a54      	ldr	r2, [pc, #336]	@ (8001214 <HAL_ADC_PollForConversion+0x1f4>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d106      	bne.n	80010d4 <HAL_ADC_PollForConversion+0xb4>
 80010c6:	4b54      	ldr	r3, [pc, #336]	@ (8001218 <HAL_ADC_PollForConversion+0x1f8>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d010      	beq.n	80010f4 <HAL_ADC_PollForConversion+0xd4>
 80010d2:	e005      	b.n	80010e0 <HAL_ADC_PollForConversion+0xc0>
 80010d4:	4b51      	ldr	r3, [pc, #324]	@ (800121c <HAL_ADC_PollForConversion+0x1fc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 031f 	and.w	r3, r3, #31
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d009      	beq.n	80010f4 <HAL_ADC_PollForConversion+0xd4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e8:	d004      	beq.n	80010f4 <HAL_ADC_PollForConversion+0xd4>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a4c      	ldr	r2, [pc, #304]	@ (8001220 <HAL_ADC_PollForConversion+0x200>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d104      	bne.n	80010fe <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	e00f      	b.n	800111e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001106:	d004      	beq.n	8001112 <HAL_ADC_PollForConversion+0xf2>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a41      	ldr	r2, [pc, #260]	@ (8001214 <HAL_ADC_PollForConversion+0x1f4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d102      	bne.n	8001118 <HAL_ADC_PollForConversion+0xf8>
 8001112:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001116:	e000      	b.n	800111a <HAL_ADC_PollForConversion+0xfa>
 8001118:	4b41      	ldr	r3, [pc, #260]	@ (8001220 <HAL_ADC_PollForConversion+0x200>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800111e:	f7ff fc7d 	bl	8000a1c <HAL_GetTick>
 8001122:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001124:	e021      	b.n	800116a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800112c:	d01d      	beq.n	800116a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <HAL_ADC_PollForConversion+0x124>
 8001134:	f7ff fc72 	bl	8000a1c <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d212      	bcs.n	800116a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10b      	bne.n	800116a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	f043 0204 	orr.w	r2, r3, #4
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e04f      	b.n	800120a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0d6      	beq.n	8001126 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800118e:	2b00      	cmp	r3, #0
 8001190:	d131      	bne.n	80011f6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001198:	2b00      	cmp	r3, #0
 800119a:	d12c      	bne.n	80011f6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d125      	bne.n	80011f6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d112      	bne.n	80011de <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d112      	bne.n	80011f6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	@ 0x40
 80011dc:	e00b      	b.n	80011f6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f043 0220 	orr.w	r2, r3, #32
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d103      	bne.n	8001208 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	50000100 	.word	0x50000100
 8001218:	50000300 	.word	0x50000300
 800121c:	50000700 	.word	0x50000700
 8001220:	50000400 	.word	0x50000400

08001224 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001240:	b480      	push	{r7}
 8001242:	b09b      	sub	sp, #108	@ 0x6c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x22>
 800125e:	2302      	movs	r3, #2
 8001260:	e2c8      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x5b4>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 82ac 	bne.w	80017d2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b04      	cmp	r3, #4
 8001280:	d81c      	bhi.n	80012bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	461a      	mov	r2, r3
 8001296:	231f      	movs	r3, #31
 8001298:	4093      	lsls	r3, r2
 800129a:	43db      	mvns	r3, r3
 800129c:	4019      	ands	r1, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa00 f203 	lsl.w	r2, r0, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80012ba:	e063      	b.n	8001384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b09      	cmp	r3, #9
 80012c2:	d81e      	bhi.n	8001302 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	3b1e      	subs	r3, #30
 80012d8:	221f      	movs	r2, #31
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	4019      	ands	r1, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3b1e      	subs	r3, #30
 80012f4:	fa00 f203 	lsl.w	r2, r0, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001300:	e040      	b.n	8001384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b0e      	cmp	r3, #14
 8001308:	d81e      	bhi.n	8001348 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685a      	ldr	r2, [r3, #4]
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	3b3c      	subs	r3, #60	@ 0x3c
 800131e:	221f      	movs	r2, #31
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	4019      	ands	r1, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	3b3c      	subs	r3, #60	@ 0x3c
 800133a:	fa00 f203 	lsl.w	r2, r0, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	639a      	str	r2, [r3, #56]	@ 0x38
 8001346:	e01d      	b.n	8001384 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	3b5a      	subs	r3, #90	@ 0x5a
 800135c:	221f      	movs	r2, #31
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	4019      	ands	r1, r3
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	6818      	ldr	r0, [r3, #0]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	3b5a      	subs	r3, #90	@ 0x5a
 8001378:	fa00 f203 	lsl.w	r2, r0, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	2b00      	cmp	r3, #0
 8001390:	f040 80e5 	bne.w	800155e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b09      	cmp	r3, #9
 800139a:	d91c      	bls.n	80013d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6999      	ldr	r1, [r3, #24]
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	3b1e      	subs	r3, #30
 80013ae:	2207      	movs	r2, #7
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	4019      	ands	r1, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	6898      	ldr	r0, [r3, #8]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	3b1e      	subs	r3, #30
 80013c8:	fa00 f203 	lsl.w	r2, r0, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	619a      	str	r2, [r3, #24]
 80013d4:	e019      	b.n	800140a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6959      	ldr	r1, [r3, #20]
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	2207      	movs	r2, #7
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	4019      	ands	r1, r3
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	6898      	ldr	r0, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4613      	mov	r3, r2
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	4413      	add	r3, r2
 80013fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	3b01      	subs	r3, #1
 8001428:	2b03      	cmp	r3, #3
 800142a:	d84f      	bhi.n	80014cc <HAL_ADC_ConfigChannel+0x28c>
 800142c:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <HAL_ADC_ConfigChannel+0x1f4>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	08001445 	.word	0x08001445
 8001438:	08001467 	.word	0x08001467
 800143c:	08001489 	.word	0x08001489
 8001440:	080014ab 	.word	0x080014ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800144a:	4b99      	ldr	r3, [pc, #612]	@ (80016b0 <HAL_ADC_ConfigChannel+0x470>)
 800144c:	4013      	ands	r3, r2
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	6812      	ldr	r2, [r2, #0]
 8001452:	0691      	lsls	r1, r2, #26
 8001454:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001456:	430a      	orrs	r2, r1
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001462:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001464:	e07b      	b.n	800155e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800146c:	4b90      	ldr	r3, [pc, #576]	@ (80016b0 <HAL_ADC_ConfigChannel+0x470>)
 800146e:	4013      	ands	r3, r2
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	0691      	lsls	r1, r2, #26
 8001476:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001478:	430a      	orrs	r2, r1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001484:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001486:	e06a      	b.n	800155e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800148e:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <HAL_ADC_ConfigChannel+0x470>)
 8001490:	4013      	ands	r3, r2
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	0691      	lsls	r1, r2, #26
 8001498:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800149a:	430a      	orrs	r2, r1
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014a6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014a8:	e059      	b.n	800155e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80014b0:	4b7f      	ldr	r3, [pc, #508]	@ (80016b0 <HAL_ADC_ConfigChannel+0x470>)
 80014b2:	4013      	ands	r3, r2
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	0691      	lsls	r1, r2, #26
 80014ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014bc:	430a      	orrs	r2, r1
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014c8:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014ca:	e048      	b.n	800155e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	069b      	lsls	r3, r3, #26
 80014dc:	429a      	cmp	r2, r3
 80014de:	d107      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80014ee:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80014f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	069b      	lsls	r3, r3, #26
 8001500:	429a      	cmp	r2, r3
 8001502:	d107      	bne.n	8001514 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001512:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800151a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	069b      	lsls	r3, r3, #26
 8001524:	429a      	cmp	r2, r3
 8001526:	d107      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001536:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800153e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	069b      	lsls	r3, r3, #26
 8001548:	429a      	cmp	r2, r3
 800154a:	d107      	bne.n	800155c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800155a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800155c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b01      	cmp	r3, #1
 800156a:	d108      	bne.n	800157e <HAL_ADC_ConfigChannel+0x33e>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b01      	cmp	r3, #1
 8001578:	d101      	bne.n	800157e <HAL_ADC_ConfigChannel+0x33e>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <HAL_ADC_ConfigChannel+0x340>
 800157e:	2300      	movs	r3, #0
 8001580:	2b00      	cmp	r3, #0
 8001582:	f040 8131 	bne.w	80017e8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d00f      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	400a      	ands	r2, r1
 80015a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80015ac:	e049      	b.n	8001642 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2201      	movs	r2, #1
 80015bc:	409a      	lsls	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d91c      	bls.n	800160a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6999      	ldr	r1, [r3, #24]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	3b1b      	subs	r3, #27
 80015e2:	2207      	movs	r2, #7
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4019      	ands	r1, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6898      	ldr	r0, [r3, #8]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	3b1b      	subs	r3, #27
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	619a      	str	r2, [r3, #24]
 8001608:	e01b      	b.n	8001642 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	6959      	ldr	r1, [r3, #20]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	2207      	movs	r2, #7
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	4019      	ands	r1, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	6898      	ldr	r0, [r3, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	4613      	mov	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4413      	add	r3, r2
 8001636:	fa00 f203 	lsl.w	r2, r0, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800164a:	d004      	beq.n	8001656 <HAL_ADC_ConfigChannel+0x416>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a18      	ldr	r2, [pc, #96]	@ (80016b4 <HAL_ADC_ConfigChannel+0x474>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d101      	bne.n	800165a <HAL_ADC_ConfigChannel+0x41a>
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_ADC_ConfigChannel+0x478>)
 8001658:	e000      	b.n	800165c <HAL_ADC_ConfigChannel+0x41c>
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <HAL_ADC_ConfigChannel+0x47c>)
 800165c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2b10      	cmp	r3, #16
 8001664:	d105      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001676:	2b11      	cmp	r3, #17
 8001678:	d105      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800167a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800168a:	2b12      	cmp	r3, #18
 800168c:	f040 80ac 	bne.w	80017e8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001690:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001698:	2b00      	cmp	r3, #0
 800169a:	f040 80a5 	bne.w	80017e8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016a6:	d10b      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x480>
 80016a8:	4b02      	ldr	r3, [pc, #8]	@ (80016b4 <HAL_ADC_ConfigChannel+0x474>)
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	e023      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x4b6>
 80016ae:	bf00      	nop
 80016b0:	83fff000 	.word	0x83fff000
 80016b4:	50000100 	.word	0x50000100
 80016b8:	50000300 	.word	0x50000300
 80016bc:	50000700 	.word	0x50000700
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001800 <HAL_ADC_ConfigChannel+0x5c0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d103      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x492>
 80016ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e011      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x4b6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001804 <HAL_ADC_ConfigChannel+0x5c4>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d102      	bne.n	80016e2 <HAL_ADC_ConfigChannel+0x4a2>
 80016dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001808 <HAL_ADC_ConfigChannel+0x5c8>)
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e009      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x4b6>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a48      	ldr	r2, [pc, #288]	@ (8001808 <HAL_ADC_ConfigChannel+0x5c8>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d102      	bne.n	80016f2 <HAL_ADC_ConfigChannel+0x4b2>
 80016ec:	4b45      	ldr	r3, [pc, #276]	@ (8001804 <HAL_ADC_ConfigChannel+0x5c4>)
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	e001      	b.n	80016f6 <HAL_ADC_ConfigChannel+0x4b6>
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d108      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x4d6>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x4d6>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <HAL_ADC_ConfigChannel+0x4d8>
 8001716:	2300      	movs	r3, #0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d150      	bne.n	80017be <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800171c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800171e:	2b00      	cmp	r3, #0
 8001720:	d010      	beq.n	8001744 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b01      	cmp	r3, #1
 800172c:	d107      	bne.n	800173e <HAL_ADC_ConfigChannel+0x4fe>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_ADC_ConfigChannel+0x4fe>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_ADC_ConfigChannel+0x500>
 800173e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001740:	2b00      	cmp	r3, #0
 8001742:	d13c      	bne.n	80017be <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d11d      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x548>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001754:	d118      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800175e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001760:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <HAL_ADC_ConfigChannel+0x5cc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2a      	ldr	r2, [pc, #168]	@ (8001810 <HAL_ADC_ConfigChannel+0x5d0>)
 8001768:	fba2 2303 	umull	r2, r3, r2, r3
 800176c:	0c9a      	lsrs	r2, r3, #18
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001778:	e002      	b.n	8001780 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3b01      	subs	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001786:	e02e      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b11      	cmp	r3, #17
 800178e:	d10b      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x568>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001798:	d106      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800179a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80017a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017a6:	e01e      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d11a      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017bc:	e013      	b.n	80017e6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	f043 0220 	orr.w	r2, r3, #32
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017d0:	e00a      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	f043 0220 	orr.w	r2, r3, #32
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017e4:	e000      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017e6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80017f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	376c      	adds	r7, #108	@ 0x6c
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	50000100 	.word	0x50000100
 8001804:	50000400 	.word	0x50000400
 8001808:	50000500 	.word	0x50000500
 800180c:	20000000 	.word	0x20000000
 8001810:	431bde83 	.word	0x431bde83

08001814 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001814:	b480      	push	{r7}
 8001816:	b099      	sub	sp, #100	@ 0x64
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800182c:	d102      	bne.n	8001834 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800182e:	4b6d      	ldr	r3, [pc, #436]	@ (80019e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	e01a      	b.n	800186a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a6a      	ldr	r2, [pc, #424]	@ (80019e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d103      	bne.n	8001846 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800183e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	e011      	b.n	800186a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a67      	ldr	r2, [pc, #412]	@ (80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d102      	bne.n	8001856 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001850:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	e009      	b.n	800186a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a64      	ldr	r2, [pc, #400]	@ (80019ec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d102      	bne.n	8001866 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001860:	4b61      	ldr	r3, [pc, #388]	@ (80019e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	e001      	b.n	800186a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0b0      	b.n	80019d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800187e:	2302      	movs	r3, #2
 8001880:	e0a9      	b.n	80019d6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	f040 808d 	bne.w	80019b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 8086 	bne.w	80019b4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018b0:	d004      	beq.n	80018bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a4b      	ldr	r2, [pc, #300]	@ (80019e4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d101      	bne.n	80018c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80018bc:	4b4c      	ldr	r3, [pc, #304]	@ (80019f0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80018be:	e000      	b.n	80018c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80018c0:	4b4c      	ldr	r3, [pc, #304]	@ (80019f4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80018c2:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d040      	beq.n	800194e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80018cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018de:	035b      	lsls	r3, r3, #13
 80018e0:	430b      	orrs	r3, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80018e6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d108      	bne.n	8001908 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001908:	2300      	movs	r3, #0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d15c      	bne.n	80019c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800192a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800192c:	2b00      	cmp	r3, #0
 800192e:	d14b      	bne.n	80019c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001938:	f023 030f 	bic.w	r3, r3, #15
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	6811      	ldr	r1, [r2, #0]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	6892      	ldr	r2, [r2, #8]
 8001944:	430a      	orrs	r2, r1
 8001946:	431a      	orrs	r2, r3
 8001948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800194a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800194c:	e03c      	b.n	80019c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800194e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001956:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001958:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d108      	bne.n	800197a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800197a:	2300      	movs	r3, #0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d123      	bne.n	80019c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d107      	bne.n	800199c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800199c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d112      	bne.n	80019c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80019a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80019aa:	f023 030f 	bic.w	r3, r3, #15
 80019ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80019b0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019b2:	e009      	b.n	80019c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80019c6:	e000      	b.n	80019ca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019c8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80019d6:	4618      	mov	r0, r3
 80019d8:	3764      	adds	r7, #100	@ 0x64
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	50000100 	.word	0x50000100
 80019e8:	50000400 	.word	0x50000400
 80019ec:	50000500 	.word	0x50000500
 80019f0:	50000300 	.word	0x50000300
 80019f4:	50000700 	.word	0x50000700

080019f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d108      	bne.n	8001a24 <ADC_Enable+0x2c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <ADC_Enable+0x2c>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <ADC_Enable+0x2e>
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d143      	bne.n	8001ab2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <ADC_Enable+0xc4>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00d      	beq.n	8001a54 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3c:	f043 0210 	orr.w	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e02f      	b.n	8001ab4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001a64:	f7fe ffda 	bl	8000a1c <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a6a:	e01b      	b.n	8001aa4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a6c:	f7fe ffd6 	bl	8000a1c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d914      	bls.n	8001aa4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d00d      	beq.n	8001aa4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f043 0210 	orr.w	r2, r3, #16
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e007      	b.n	8001ab4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d1dc      	bne.n	8001a6c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	8000003f 	.word	0x8000003f

08001ac0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <ADC_Disable+0x2c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <ADC_Disable+0x2c>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <ADC_Disable+0x2e>
 8001aec:	2300      	movs	r3, #0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d047      	beq.n	8001b82 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030d 	and.w	r3, r3, #13
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10f      	bne.n	8001b20 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0202 	orr.w	r2, r2, #2
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2203      	movs	r2, #3
 8001b16:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b18:	f7fe ff80 	bl	8000a1c <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b1e:	e029      	b.n	8001b74 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	f043 0210 	orr.w	r2, r3, #16
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b30:	f043 0201 	orr.w	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e023      	b.n	8001b84 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b3c:	f7fe ff6e 	bl	8000a1c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d914      	bls.n	8001b74 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d10d      	bne.n	8001b74 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	f043 0210 	orr.w	r2, r3, #16
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b68:	f043 0201 	orr.w	r2, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e007      	b.n	8001b84 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d0dc      	beq.n	8001b3c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bbe:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	60d3      	str	r3, [r2, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd8:	4b04      	ldr	r3, [pc, #16]	@ (8001bec <__NVIC_GetPriorityGrouping+0x18>)
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	f003 0307 	and.w	r3, r3, #7
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff47 	bl	8001b8c <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff5c 	bl	8001bd4 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffb0 	bl	8001cac <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d66:	e154      	b.n	8002012 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	4013      	ands	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8146 	beq.w	800200c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d005      	beq.n	8001d98 <HAL_GPIO_Init+0x40>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d130      	bne.n	8001dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dce:	2201      	movs	r2, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	f003 0201 	and.w	r2, r3, #1
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d017      	beq.n	8001e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d123      	bne.n	8001e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	08da      	lsrs	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3208      	adds	r2, #8
 8001e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	220f      	movs	r2, #15
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	08da      	lsrs	r2, r3, #3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3208      	adds	r2, #8
 8001e84:	6939      	ldr	r1, [r7, #16]
 8001e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0203 	and.w	r2, r3, #3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80a0 	beq.w	800200c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ecc:	4b58      	ldr	r3, [pc, #352]	@ (8002030 <HAL_GPIO_Init+0x2d8>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4a57      	ldr	r2, [pc, #348]	@ (8002030 <HAL_GPIO_Init+0x2d8>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6193      	str	r3, [r2, #24]
 8001ed8:	4b55      	ldr	r3, [pc, #340]	@ (8002030 <HAL_GPIO_Init+0x2d8>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee4:	4a53      	ldr	r2, [pc, #332]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f0e:	d019      	beq.n	8001f44 <HAL_GPIO_Init+0x1ec>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a49      	ldr	r2, [pc, #292]	@ (8002038 <HAL_GPIO_Init+0x2e0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_GPIO_Init+0x1e8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a48      	ldr	r2, [pc, #288]	@ (800203c <HAL_GPIO_Init+0x2e4>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d00d      	beq.n	8001f3c <HAL_GPIO_Init+0x1e4>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	4a47      	ldr	r2, [pc, #284]	@ (8002040 <HAL_GPIO_Init+0x2e8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d007      	beq.n	8001f38 <HAL_GPIO_Init+0x1e0>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a46      	ldr	r2, [pc, #280]	@ (8002044 <HAL_GPIO_Init+0x2ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_GPIO_Init+0x1dc>
 8001f30:	2304      	movs	r3, #4
 8001f32:	e008      	b.n	8001f46 <HAL_GPIO_Init+0x1ee>
 8001f34:	2305      	movs	r3, #5
 8001f36:	e006      	b.n	8001f46 <HAL_GPIO_Init+0x1ee>
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e004      	b.n	8001f46 <HAL_GPIO_Init+0x1ee>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e002      	b.n	8001f46 <HAL_GPIO_Init+0x1ee>
 8001f40:	2301      	movs	r3, #1
 8001f42:	e000      	b.n	8001f46 <HAL_GPIO_Init+0x1ee>
 8001f44:	2300      	movs	r3, #0
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	f002 0203 	and.w	r2, r2, #3
 8001f4c:	0092      	lsls	r2, r2, #2
 8001f4e:	4093      	lsls	r3, r2
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f56:	4937      	ldr	r1, [pc, #220]	@ (8002034 <HAL_GPIO_Init+0x2dc>)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f64:	4b38      	ldr	r3, [pc, #224]	@ (8002048 <HAL_GPIO_Init+0x2f0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f88:	4a2f      	ldr	r2, [pc, #188]	@ (8002048 <HAL_GPIO_Init+0x2f0>)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <HAL_GPIO_Init+0x2f0>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001fb2:	4a25      	ldr	r2, [pc, #148]	@ (8002048 <HAL_GPIO_Init+0x2f0>)
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fb8:	4b23      	ldr	r3, [pc, #140]	@ (8002048 <HAL_GPIO_Init+0x2f0>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002048 <HAL_GPIO_Init+0x2f0>)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe2:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_GPIO_Init+0x2f0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <HAL_GPIO_Init+0x2f0>)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	3301      	adds	r3, #1
 8002010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	f47f aea3 	bne.w	8001d68 <HAL_GPIO_Init+0x10>
  }
}
 8002022:	bf00      	nop
 8002024:	bf00      	nop
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000
 8002038:	48000400 	.word	0x48000400
 800203c:	48000800 	.word	0x48000800
 8002040:	48000c00 	.word	0x48000c00
 8002044:	48001000 	.word	0x48001000
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002068:	e002      	b.n	8002070 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e081      	b.n	8002192 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7fe fb2a 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2224      	movs	r2, #36	@ 0x24
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	e006      	b.n	8002104 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002102:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d104      	bne.n	8002116 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002114:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002128:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002138:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69d9      	ldr	r1, [r3, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b20      	cmp	r3, #32
 80021ae:	d138      	bne.n	8002222 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e032      	b.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2224      	movs	r2, #36	@ 0x24
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0201 	bic.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80021ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	e000      	b.n	8002224 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002222:	2302      	movs	r3, #2
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	d139      	bne.n	80022ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002250:	2302      	movs	r3, #2
 8002252:	e033      	b.n	80022bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	@ 0x24
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002282:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0201 	orr.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ca:	b08b      	sub	sp, #44	@ 0x2c
 80022cc:	af06      	add	r7, sp, #24
 80022ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0c4      	b.n	8002464 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 32a9 	ldrb.w	r3, [r3, #681]	@ 0x2a9
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7fe fa8a 	bl	8000808 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2203      	movs	r2, #3
 80022f8:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f001 fd32 	bl	8003d6a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	e040      	b.n	800238e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	440b      	add	r3, r1
 800231c:	3301      	adds	r3, #1
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	440b      	add	r3, r1
 8002332:	7bfa      	ldrb	r2, [r7, #15]
 8002334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3303      	adds	r3, #3
 8002348:	2200      	movs	r2, #0
 800234a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	440b      	add	r3, r1
 800235a:	3338      	adds	r3, #56	@ 0x38
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	440b      	add	r3, r1
 800236e:	333c      	adds	r3, #60	@ 0x3c
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3340      	adds	r3, #64	@ 0x40
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	3301      	adds	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d3b9      	bcc.n	800230c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e044      	b.n	8002428 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	440b      	add	r3, r1
 80023ac:	f203 1369 	addw	r3, r3, #361	@ 0x169
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	440b      	add	r3, r1
 80023d8:	f203 136b 	addw	r3, r3, #363	@ 0x16b
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	440b      	add	r3, r1
 8002404:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	3301      	adds	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d3b5      	bcc.n	800239e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	687e      	ldr	r6, [r7, #4]
 800243a:	466d      	mov	r5, sp
 800243c:	f106 0410 	add.w	r4, r6, #16
 8002440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	1d33      	adds	r3, r6, #4
 800244a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f001 fca7 	bl	8003da0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 22a9 	strb.w	r2, [r3, #681]	@ 0x2a9
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800246c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002472:	af00      	add	r7, sp, #0
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800247c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	f001 b823 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 817d 	beq.w	80027a2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024a8:	4bbc      	ldr	r3, [pc, #752]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d00c      	beq.n	80024ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024b4:	4bb9      	ldr	r3, [pc, #740]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 030c 	and.w	r3, r3, #12
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d15c      	bne.n	800257a <HAL_RCC_OscConfig+0x10e>
 80024c0:	4bb6      	ldr	r3, [pc, #728]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024cc:	d155      	bne.n	800257a <HAL_RCC_OscConfig+0x10e>
 80024ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024d2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80024da:	fa93 f3a3 	rbit	r3, r3
 80024de:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e6:	fab3 f383 	clz	r3, r3
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d102      	bne.n	8002500 <HAL_RCC_OscConfig+0x94>
 80024fa:	4ba8      	ldr	r3, [pc, #672]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e015      	b.n	800252c <HAL_RCC_OscConfig+0xc0>
 8002500:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002504:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002514:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002518:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800251c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002528:	4b9c      	ldr	r3, [pc, #624]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002530:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002534:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002538:	fa92 f2a2 	rbit	r2, r2
 800253c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002540:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002544:	fab2 f282 	clz	r2, r2
 8002548:	b2d2      	uxtb	r2, r2
 800254a:	f042 0220 	orr.w	r2, r2, #32
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	f002 021f 	and.w	r2, r2, #31
 8002554:	2101      	movs	r1, #1
 8002556:	fa01 f202 	lsl.w	r2, r1, r2
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 811f 	beq.w	80027a0 <HAL_RCC_OscConfig+0x334>
 8002562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002566:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 8116 	bne.w	80027a0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	f000 bfaf 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x12e>
 800258c:	4b83      	ldr	r3, [pc, #524]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a82      	ldr	r2, [pc, #520]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 8002592:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	e036      	b.n	8002608 <HAL_RCC_OscConfig+0x19c>
 800259a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x158>
 80025aa:	4b7c      	ldr	r3, [pc, #496]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a7b      	ldr	r2, [pc, #492]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	4b79      	ldr	r3, [pc, #484]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a78      	ldr	r2, [pc, #480]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	e021      	b.n	8002608 <HAL_RCC_OscConfig+0x19c>
 80025c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x184>
 80025d6:	4b71      	ldr	r3, [pc, #452]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a70      	ldr	r2, [pc, #448]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b6e      	ldr	r3, [pc, #440]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6d      	ldr	r2, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x19c>
 80025f0:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a69      	ldr	r2, [pc, #420]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b67      	ldr	r3, [pc, #412]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a66      	ldr	r2, [pc, #408]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 8002602:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002606:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002608:	4b64      	ldr	r3, [pc, #400]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	f023 020f 	bic.w	r2, r3, #15
 8002610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	495f      	ldr	r1, [pc, #380]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 800261e:	4313      	orrs	r3, r2
 8002620:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002622:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002626:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d059      	beq.n	80026e6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe f9f3 	bl	8000a1c <HAL_GetTick>
 8002636:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	e00a      	b.n	8002652 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800263c:	f7fe f9ee 	bl	8000a1c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b64      	cmp	r3, #100	@ 0x64
 800264a:	d902      	bls.n	8002652 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	f000 bf43 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002652:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002656:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002666:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0x218>
 800267e:	4b47      	ldr	r3, [pc, #284]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e015      	b.n	80026b0 <HAL_RCC_OscConfig+0x244>
 8002684:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002688:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002698:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800269c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80026a0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80026a4:	fa93 f3a3 	rbit	r3, r3
 80026a8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80026ac:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 80026ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80026b4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80026b8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80026bc:	fa92 f2a2 	rbit	r2, r2
 80026c0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80026c4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80026c8:	fab2 f282 	clz	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f042 0220 	orr.w	r2, r2, #32
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	f002 021f 	and.w	r2, r2, #31
 80026d8:	2101      	movs	r1, #1
 80026da:	fa01 f202 	lsl.w	r2, r1, r2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ab      	beq.n	800263c <HAL_RCC_OscConfig+0x1d0>
 80026e4:	e05d      	b.n	80027a2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7fe f999 	bl	8000a1c <HAL_GetTick>
 80026ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026f0:	f7fe f994 	bl	8000a1c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	@ 0x64
 80026fe:	d902      	bls.n	8002706 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	f000 bee9 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002706:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800270a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800271a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271e:	fab3 f383 	clz	r3, r3
 8002722:	b2db      	uxtb	r3, r3
 8002724:	095b      	lsrs	r3, r3, #5
 8002726:	b2db      	uxtb	r3, r3
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x2cc>
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	e015      	b.n	8002764 <HAL_RCC_OscConfig+0x2f8>
 8002738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800273c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800274c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002750:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002754:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002758:	fa93 f3a3 	rbit	r3, r3
 800275c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002760:	4b0e      	ldr	r3, [pc, #56]	@ (800279c <HAL_RCC_OscConfig+0x330>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002768:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800276c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002770:	fa92 f2a2 	rbit	r2, r2
 8002774:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002778:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f042 0220 	orr.w	r2, r2, #32
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	f002 021f 	and.w	r2, r2, #31
 800278c:	2101      	movs	r1, #1
 800278e:	fa01 f202 	lsl.w	r2, r1, r2
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ab      	bne.n	80026f0 <HAL_RCC_OscConfig+0x284>
 8002798:	e003      	b.n	80027a2 <HAL_RCC_OscConfig+0x336>
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 817d 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80027b8:	4ba6      	ldr	r3, [pc, #664]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00b      	beq.n	80027dc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80027c4:	4ba3      	ldr	r3, [pc, #652]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b08      	cmp	r3, #8
 80027ce:	d172      	bne.n	80028b6 <HAL_RCC_OscConfig+0x44a>
 80027d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d16c      	bne.n	80028b6 <HAL_RCC_OscConfig+0x44a>
 80027dc:	2302      	movs	r3, #2
 80027de:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80027ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	095b      	lsrs	r3, r3, #5
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_RCC_OscConfig+0x3a0>
 8002806:	4b93      	ldr	r3, [pc, #588]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	e013      	b.n	8002834 <HAL_RCC_OscConfig+0x3c8>
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800281e:	2302      	movs	r3, #2
 8002820:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002824:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002830:	4b88      	ldr	r3, [pc, #544]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	2202      	movs	r2, #2
 8002836:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800283a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800283e:	fa92 f2a2 	rbit	r2, r2
 8002842:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002846:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800284a:	fab2 f282 	clz	r2, r2
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	f042 0220 	orr.w	r2, r2, #32
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	f002 021f 	and.w	r2, r2, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f202 	lsl.w	r2, r1, r2
 8002860:	4013      	ands	r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCC_OscConfig+0x410>
 8002866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800286a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d002      	beq.n	800287c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f000 be2e 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	4b75      	ldr	r3, [pc, #468]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002884:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002888:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	21f8      	movs	r1, #248	@ 0xf8
 8002892:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800289a:	fa91 f1a1 	rbit	r1, r1
 800289e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80028a2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80028a6:	fab1 f181 	clz	r1, r1
 80028aa:	b2c9      	uxtb	r1, r1
 80028ac:	408b      	lsls	r3, r1
 80028ae:	4969      	ldr	r1, [pc, #420]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028b4:	e0fd      	b.n	8002ab2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8088 	beq.w	80029d8 <HAL_RCC_OscConfig+0x56c>
 80028c8:	2301      	movs	r3, #1
 80028ca:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80028da:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	461a      	mov	r2, r3
 80028f0:	2301      	movs	r3, #1
 80028f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe f892 	bl	8000a1c <HAL_GetTick>
 80028f8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028fe:	f7fe f88d 	bl	8000a1c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	f000 bde2 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002914:	2302      	movs	r3, #2
 8002916:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002926:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x4d8>
 800293e:	4b45      	ldr	r3, [pc, #276]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e013      	b.n	800296c <HAL_RCC_OscConfig+0x500>
 8002944:	2302      	movs	r3, #2
 8002946:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002956:	2302      	movs	r3, #2
 8002958:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800295c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002960:	fa93 f3a3 	rbit	r3, r3
 8002964:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002968:	4b3a      	ldr	r3, [pc, #232]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 800296a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296c:	2202      	movs	r2, #2
 800296e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002972:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002976:	fa92 f2a2 	rbit	r2, r2
 800297a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800297e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002982:	fab2 f282 	clz	r2, r2
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	f042 0220 	orr.w	r2, r2, #32
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	f002 021f 	and.w	r2, r2, #31
 8002992:	2101      	movs	r1, #1
 8002994:	fa01 f202 	lsl.w	r2, r1, r2
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0af      	beq.n	80028fe <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	21f8      	movs	r1, #248	@ 0xf8
 80029b4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80029bc:	fa91 f1a1 	rbit	r1, r1
 80029c0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80029c4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80029c8:	fab1 f181 	clz	r1, r1
 80029cc:	b2c9      	uxtb	r1, r1
 80029ce:	408b      	lsls	r3, r1
 80029d0:	4920      	ldr	r1, [pc, #128]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
 80029d6:	e06c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x646>
 80029d8:	2301      	movs	r3, #1
 80029da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80029ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	fab3 f383 	clz	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	461a      	mov	r2, r3
 8002a00:	2300      	movs	r3, #0
 8002a02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fe f80a 	bl	8000a1c <HAL_GetTick>
 8002a08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0c:	e00a      	b.n	8002a24 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0e:	f7fe f805 	bl	8000a1c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d902      	bls.n	8002a24 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	f000 bd5a 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002a24:	2302      	movs	r3, #2
 8002a26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	095b      	lsrs	r3, r3, #5
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d104      	bne.n	8002a58 <HAL_RCC_OscConfig+0x5ec>
 8002a4e:	4b01      	ldr	r3, [pc, #4]	@ (8002a54 <HAL_RCC_OscConfig+0x5e8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	e015      	b.n	8002a80 <HAL_RCC_OscConfig+0x614>
 8002a54:	40021000 	.word	0x40021000
 8002a58:	2302      	movs	r3, #2
 8002a5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a7c:	4bc8      	ldr	r3, [pc, #800]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	2202      	movs	r2, #2
 8002a82:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002a86:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002a8a:	fa92 f2a2 	rbit	r2, r2
 8002a8e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002a92:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002a96:	fab2 f282 	clz	r2, r2
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	f042 0220 	orr.w	r2, r2, #32
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f002 021f 	and.w	r2, r2, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ad      	bne.n	8002a0e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ab6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8110 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002acc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d079      	beq.n	8002bcc <HAL_RCC_OscConfig+0x760>
 8002ad8:	2301      	movs	r3, #1
 8002ada:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ae2:	fa93 f3a3 	rbit	r3, r3
 8002ae6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	4bab      	ldr	r3, [pc, #684]	@ (8002da4 <HAL_RCC_OscConfig+0x938>)
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	461a      	mov	r2, r3
 8002afe:	2301      	movs	r3, #1
 8002b00:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fd ff8b 	bl	8000a1c <HAL_GetTick>
 8002b06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0c:	f7fd ff86 	bl	8000a1c <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d902      	bls.n	8002b22 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f000 bcdb 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002b22:	2302      	movs	r3, #2
 8002b24:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b2c:	fa93 f3a3 	rbit	r3, r3
 8002b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b38:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b44:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	fa93 f2a3 	rbit	r2, r3
 8002b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b60:	2202      	movs	r2, #2
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002b7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7c:	4b88      	ldr	r3, [pc, #544]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002b7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b84:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b88:	2102      	movs	r1, #2
 8002b8a:	6019      	str	r1, [r3, #0]
 8002b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b90:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	fa93 f1a3 	rbit	r1, r3
 8002b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b9e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002ba2:	6019      	str	r1, [r3, #0]
  return result;
 8002ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	fab3 f383 	clz	r3, r3
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0a0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x6a0>
 8002bca:	e08d      	b.n	8002ce8 <HAL_RCC_OscConfig+0x87c>
 8002bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	fa93 f2a3 	rbit	r2, r3
 8002be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bea:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002bee:	601a      	str	r2, [r3, #0]
  return result;
 8002bf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002bf8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b68      	ldr	r3, [pc, #416]	@ (8002da4 <HAL_RCC_OscConfig+0x938>)
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c0e:	f7fd ff05 	bl	8000a1c <HAL_GetTick>
 8002c12:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fd ff00 	bl	8000a1c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d902      	bls.n	8002c2e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f000 bc55 	b.w	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c36:	2202      	movs	r2, #2
 8002c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c3e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	fa93 f2a3 	rbit	r2, r3
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c56:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c62:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	fa93 f2a3 	rbit	r2, r3
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c7a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002c7e:	2202      	movs	r2, #2
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	fa93 f2a3 	rbit	r2, r3
 8002c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c94:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c98:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9a:	4b41      	ldr	r3, [pc, #260]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ca2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	6019      	str	r1, [r3, #0]
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	fa93 f1a3 	rbit	r1, r3
 8002cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cbc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc0:	6019      	str	r1, [r3, #0]
  return result;
 8002cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2101      	movs	r1, #1
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d197      	bne.n	8002c18 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 81a1 	beq.w	8003040 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d04:	4b26      	ldr	r3, [pc, #152]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d116      	bne.n	8002d3e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d10:	4b23      	ldr	r3, [pc, #140]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4a22      	ldr	r2, [pc, #136]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d1a:	61d3      	str	r3, [r2, #28]
 8002d1c:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d28:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d32:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002d36:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <HAL_RCC_OscConfig+0x93c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11a      	bne.n	8002d80 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d4a:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <HAL_RCC_OscConfig+0x93c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a16      	ldr	r2, [pc, #88]	@ (8002da8 <HAL_RCC_OscConfig+0x93c>)
 8002d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d54:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d56:	f7fd fe61 	bl	8000a1c <HAL_GetTick>
 8002d5a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d5e:	e009      	b.n	8002d74 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d60:	f7fd fe5c 	bl	8000a1c <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b64      	cmp	r3, #100	@ 0x64
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e3b1      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <HAL_RCC_OscConfig+0x93c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0ef      	beq.n	8002d60 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d10d      	bne.n	8002dac <HAL_RCC_OscConfig+0x940>
 8002d90:	4b03      	ldr	r3, [pc, #12]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	4a02      	ldr	r2, [pc, #8]	@ (8002da0 <HAL_RCC_OscConfig+0x934>)
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	6213      	str	r3, [r2, #32]
 8002d9c:	e03c      	b.n	8002e18 <HAL_RCC_OscConfig+0x9ac>
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	10908120 	.word	0x10908120
 8002da8:	40007000 	.word	0x40007000
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10c      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x96a>
 8002dbc:	4bc1      	ldr	r3, [pc, #772]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	4ac0      	ldr	r2, [pc, #768]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6213      	str	r3, [r2, #32]
 8002dc8:	4bbe      	ldr	r3, [pc, #760]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4abd      	ldr	r2, [pc, #756]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dce:	f023 0304 	bic.w	r3, r3, #4
 8002dd2:	6213      	str	r3, [r2, #32]
 8002dd4:	e020      	b.n	8002e18 <HAL_RCC_OscConfig+0x9ac>
 8002dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0x994>
 8002de6:	4bb7      	ldr	r3, [pc, #732]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	4ab6      	ldr	r2, [pc, #728]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002dec:	f043 0304 	orr.w	r3, r3, #4
 8002df0:	6213      	str	r3, [r2, #32]
 8002df2:	4bb4      	ldr	r3, [pc, #720]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	4ab3      	ldr	r2, [pc, #716]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6213      	str	r3, [r2, #32]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0x9ac>
 8002e00:	4bb0      	ldr	r3, [pc, #704]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4aaf      	ldr	r2, [pc, #700]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	4bad      	ldr	r3, [pc, #692]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4aac      	ldr	r2, [pc, #688]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002e12:	f023 0304 	bic.w	r3, r3, #4
 8002e16:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 8081 	beq.w	8002f2c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2a:	f7fd fdf7 	bl	8000a1c <HAL_GetTick>
 8002e2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e32:	e00b      	b.n	8002e4c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fd fdf2 	bl	8000a1c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e345      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002e4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e50:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e54:	2202      	movs	r2, #2
 8002e56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	fa93 f2a3 	rbit	r2, r3
 8002e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002e78:	2202      	movs	r2, #2
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e80:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	fa93 f2a3 	rbit	r2, r3
 8002e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002e92:	601a      	str	r2, [r3, #0]
  return result;
 8002e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e98:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002e9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e9e:	fab3 f383 	clz	r3, r3
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	095b      	lsrs	r3, r3, #5
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d102      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xa4c>
 8002eb2:	4b84      	ldr	r3, [pc, #528]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	e013      	b.n	8002ee0 <HAL_RCC_OscConfig+0xa74>
 8002eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ebc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fa93 f2a3 	rbit	r2, r3
 8002ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	4b79      	ldr	r3, [pc, #484]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ee4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ee8:	2102      	movs	r1, #2
 8002eea:	6011      	str	r1, [r2, #0]
 8002eec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ef0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	fa92 f1a2 	rbit	r1, r2
 8002efa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002efe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f02:	6011      	str	r1, [r2, #0]
  return result;
 8002f04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f08:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	fab2 f282 	clz	r2, r2
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	f002 021f 	and.w	r2, r2, #31
 8002f1e:	2101      	movs	r1, #1
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	4013      	ands	r3, r2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d084      	beq.n	8002e34 <HAL_RCC_OscConfig+0x9c8>
 8002f2a:	e07f      	b.n	800302c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fd fd76 	bl	8000a1c <HAL_GetTick>
 8002f30:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd fd71 	bl	8000a1c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e2c4      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 8002f4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f52:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002f56:	2202      	movs	r2, #2
 8002f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f5e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f6c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f76:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f82:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f90:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002f94:	601a      	str	r2, [r3, #0]
  return result;
 8002f96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002f9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0302 	orr.w	r3, r3, #2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_OscConfig+0xb4e>
 8002fb4:	4b43      	ldr	r3, [pc, #268]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	e013      	b.n	8002fe2 <HAL_RCC_OscConfig+0xb76>
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	fa93 f2a3 	rbit	r2, r3
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	4b39      	ldr	r3, [pc, #228]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002fe6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002fea:	2102      	movs	r1, #2
 8002fec:	6011      	str	r1, [r2, #0]
 8002fee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ff2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	fa92 f1a2 	rbit	r1, r2
 8002ffc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003000:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003004:	6011      	str	r1, [r2, #0]
  return result;
 8003006:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800300a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d184      	bne.n	8002f36 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800302c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b23      	ldr	r3, [pc, #140]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003044:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8242 	beq.w	80034d6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003052:	4b1c      	ldr	r3, [pc, #112]	@ (80030c4 <HAL_RCC_OscConfig+0xc58>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f003 030c 	and.w	r3, r3, #12
 800305a:	2b08      	cmp	r3, #8
 800305c:	f000 8213 	beq.w	8003486 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003064:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	2b02      	cmp	r3, #2
 800306e:	f040 8162 	bne.w	8003336 <HAL_RCC_OscConfig+0xeca>
 8003072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003076:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800307a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800307e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003084:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003092:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003096:	601a      	str	r2, [r3, #0]
  return result;
 8003098:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800309c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80030a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80030ac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	461a      	mov	r2, r3
 80030b4:	2300      	movs	r3, #0
 80030b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b8:	f7fd fcb0 	bl	8000a1c <HAL_GetTick>
 80030bc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c0:	e00c      	b.n	80030dc <HAL_RCC_OscConfig+0xc70>
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fd fca8 	bl	8000a1c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1fd      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 80030dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030e0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80030e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	fa93 f2a3 	rbit	r2, r3
 80030f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003100:	601a      	str	r2, [r3, #0]
  return result;
 8003102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003106:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800310a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d102      	bne.n	8003126 <HAL_RCC_OscConfig+0xcba>
 8003120:	4bb0      	ldr	r3, [pc, #704]	@ (80033e4 <HAL_RCC_OscConfig+0xf78>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	e027      	b.n	8003176 <HAL_RCC_OscConfig+0xd0a>
 8003126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800312e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003132:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003138:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	fa93 f2a3 	rbit	r2, r3
 8003142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003146:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003154:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	4b9c      	ldr	r3, [pc, #624]	@ (80033e4 <HAL_RCC_OscConfig+0xf78>)
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800317a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800317e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003182:	6011      	str	r1, [r2, #0]
 8003184:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003188:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800318c:	6812      	ldr	r2, [r2, #0]
 800318e:	fa92 f1a2 	rbit	r1, r2
 8003192:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003196:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800319a:	6011      	str	r1, [r2, #0]
  return result;
 800319c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031a0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	fab2 f282 	clz	r2, r2
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f042 0220 	orr.w	r2, r2, #32
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f002 021f 	and.w	r2, r2, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f202 	lsl.w	r2, r1, r2
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d182      	bne.n	80030c8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c2:	4b88      	ldr	r3, [pc, #544]	@ (80033e4 <HAL_RCC_OscConfig+0xf78>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80031d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	430b      	orrs	r3, r1
 80031e4:	497f      	ldr	r1, [pc, #508]	@ (80033e4 <HAL_RCC_OscConfig+0xf78>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
 80031ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ee:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80031f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80031f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031fc:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	fa93 f2a3 	rbit	r2, r3
 8003206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800320a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800320e:	601a      	str	r2, [r3, #0]
  return result;
 8003210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003214:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003218:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003224:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	461a      	mov	r2, r3
 800322c:	2301      	movs	r3, #1
 800322e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fd fbf4 	bl	8000a1c <HAL_GetTick>
 8003234:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003238:	e009      	b.n	800324e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fd fbef 	bl	8000a1c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e144      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 800324e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003252:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003256:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800325a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003260:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	fa93 f2a3 	rbit	r2, r3
 800326a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800326e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003272:	601a      	str	r2, [r3, #0]
  return result;
 8003274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003278:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800327c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_RCC_OscConfig+0xe2c>
 8003292:	4b54      	ldr	r3, [pc, #336]	@ (80033e4 <HAL_RCC_OscConfig+0xf78>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e027      	b.n	80032e8 <HAL_RCC_OscConfig+0xe7c>
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032aa:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	fa93 f2a3 	rbit	r2, r3
 80032da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032de:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	4b3f      	ldr	r3, [pc, #252]	@ (80033e4 <HAL_RCC_OscConfig+0xf78>)
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032ec:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80032f0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032fa:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	fa92 f1a2 	rbit	r1, r2
 8003304:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003308:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800330c:	6011      	str	r1, [r2, #0]
  return result;
 800330e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003312:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	fab2 f282 	clz	r2, r2
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	f042 0220 	orr.w	r2, r2, #32
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	f002 021f 	and.w	r2, r2, #31
 8003328:	2101      	movs	r1, #1
 800332a:	fa01 f202 	lsl.w	r2, r1, r2
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d082      	beq.n	800323a <HAL_RCC_OscConfig+0xdce>
 8003334:	e0cf      	b.n	80034d6 <HAL_RCC_OscConfig+0x106a>
 8003336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800333e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003348:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	fa93 f2a3 	rbit	r2, r3
 8003352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003356:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800335a:	601a      	str	r2, [r3, #0]
  return result;
 800335c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003360:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003364:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003370:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	461a      	mov	r2, r3
 8003378:	2300      	movs	r3, #0
 800337a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fd fb4e 	bl	8000a1c <HAL_GetTick>
 8003380:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003384:	e009      	b.n	800339a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003386:	f7fd fb49 	bl	8000a1c <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e09e      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
 800339a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	fa93 f2a3 	rbit	r2, r3
 80033b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ba:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033be:	601a      	str	r2, [r3, #0]
  return result;
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80033c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d104      	bne.n	80033e8 <HAL_RCC_OscConfig+0xf7c>
 80033de:	4b01      	ldr	r3, [pc, #4]	@ (80033e4 <HAL_RCC_OscConfig+0xf78>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	e029      	b.n	8003438 <HAL_RCC_OscConfig+0xfcc>
 80033e4:	40021000 	.word	0x40021000
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80033f0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80033f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003408:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003416:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f2a3 	rbit	r2, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <HAL_RCC_OscConfig+0x1078>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800343c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003440:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003444:	6011      	str	r1, [r2, #0]
 8003446:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800344a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	fa92 f1a2 	rbit	r1, r2
 8003454:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003458:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800345c:	6011      	str	r1, [r2, #0]
  return result;
 800345e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003462:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	fab2 f282 	clz	r2, r2
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	f042 0220 	orr.w	r2, r2, #32
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	f002 021f 	and.w	r2, r2, #31
 8003478:	2101      	movs	r1, #1
 800347a:	fa01 f202 	lsl.w	r2, r1, r2
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d180      	bne.n	8003386 <HAL_RCC_OscConfig+0xf1a>
 8003484:	e027      	b.n	80034d6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e01e      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800349a:	4b12      	ldr	r3, [pc, #72]	@ (80034e4 <HAL_RCC_OscConfig+0x1078>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034a6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80034ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034be:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000

080034e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b09e      	sub	sp, #120	@ 0x78
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e162      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b90      	ldr	r3, [pc, #576]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d910      	bls.n	8003530 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b8d      	ldr	r3, [pc, #564]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 0207 	bic.w	r2, r3, #7
 8003516:	498b      	ldr	r1, [pc, #556]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b89      	ldr	r3, [pc, #548]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e14a      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b82      	ldr	r3, [pc, #520]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	497f      	ldr	r1, [pc, #508]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80dc 	beq.w	8003714 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d13c      	bne.n	80035de <HAL_RCC_ClockConfig+0xf6>
 8003564:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003568:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800356c:	fa93 f3a3 	rbit	r3, r3
 8003570:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003574:	fab3 f383 	clz	r3, r3
 8003578:	b2db      	uxtb	r3, r3
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	b2db      	uxtb	r3, r3
 800357e:	f043 0301 	orr.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b01      	cmp	r3, #1
 8003586:	d102      	bne.n	800358e <HAL_RCC_ClockConfig+0xa6>
 8003588:	4b6f      	ldr	r3, [pc, #444]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	e00f      	b.n	80035ae <HAL_RCC_ClockConfig+0xc6>
 800358e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003592:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	667b      	str	r3, [r7, #100]	@ 0x64
 800359c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80035a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035aa:	4b67      	ldr	r3, [pc, #412]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80035b6:	fa92 f2a2 	rbit	r2, r2
 80035ba:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80035bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80035be:	fab2 f282 	clz	r2, r2
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	f042 0220 	orr.w	r2, r2, #32
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	f002 021f 	and.w	r2, r2, #31
 80035ce:	2101      	movs	r1, #1
 80035d0:	fa01 f202 	lsl.w	r2, r1, r2
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d17b      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0f3      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d13c      	bne.n	8003660 <HAL_RCC_ClockConfig+0x178>
 80035e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80035ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d102      	bne.n	8003610 <HAL_RCC_ClockConfig+0x128>
 800360a:	4b4f      	ldr	r3, [pc, #316]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	e00f      	b.n	8003630 <HAL_RCC_ClockConfig+0x148>
 8003610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003614:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	647b      	str	r3, [r7, #68]	@ 0x44
 800361e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003622:	643b      	str	r3, [r7, #64]	@ 0x40
 8003624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003626:	fa93 f3a3 	rbit	r3, r3
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800362c:	4b46      	ldr	r3, [pc, #280]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003634:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003636:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003638:	fa92 f2a2 	rbit	r2, r2
 800363c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800363e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003640:	fab2 f282 	clz	r2, r2
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	f042 0220 	orr.w	r2, r2, #32
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f002 021f 	and.w	r2, r2, #31
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d13a      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b2      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
 8003660:	2302      	movs	r3, #2
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	fab3 f383 	clz	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	b2db      	uxtb	r3, r3
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	d102      	bne.n	8003688 <HAL_RCC_ClockConfig+0x1a0>
 8003682:	4b31      	ldr	r3, [pc, #196]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	e00d      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1bc>
 8003688:	2302      	movs	r3, #2
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	fa93 f3a3 	rbit	r3, r3
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
 8003694:	2302      	movs	r3, #2
 8003696:	623b      	str	r3, [r7, #32]
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	4b29      	ldr	r3, [pc, #164]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	2202      	movs	r2, #2
 80036a6:	61ba      	str	r2, [r7, #24]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	fa92 f2a2 	rbit	r2, r2
 80036ae:	617a      	str	r2, [r7, #20]
  return result;
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	fab2 f282 	clz	r2, r2
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	f042 0220 	orr.w	r2, r2, #32
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	f002 021f 	and.w	r2, r2, #31
 80036c2:	2101      	movs	r1, #1
 80036c4:	fa01 f202 	lsl.w	r2, r1, r2
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e079      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	491a      	ldr	r1, [pc, #104]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fd f99a 	bl	8000a1c <HAL_GetTick>
 80036e8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fd f996 	bl	8000a1c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e061      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <HAL_RCC_ClockConfig+0x260>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d214      	bcs.n	800374c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 0207 	bic.w	r2, r3, #7
 800372a:	4906      	ldr	r1, [pc, #24]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b04      	ldr	r3, [pc, #16]	@ (8003744 <HAL_RCC_ClockConfig+0x25c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e040      	b.n	80037c6 <HAL_RCC_ClockConfig+0x2de>
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b1d      	ldr	r3, [pc, #116]	@ (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	491a      	ldr	r1, [pc, #104]	@ (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003776:	4b16      	ldr	r3, [pc, #88]	@ (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4912      	ldr	r1, [pc, #72]	@ (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800378a:	f000 f829 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 800378e:	4601      	mov	r1, r0
 8003790:	4b0f      	ldr	r3, [pc, #60]	@ (80037d0 <HAL_RCC_ClockConfig+0x2e8>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003798:	22f0      	movs	r2, #240	@ 0xf0
 800379a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	fa92 f2a2 	rbit	r2, r2
 80037a2:	60fa      	str	r2, [r7, #12]
  return result;
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	fab2 f282 	clz	r2, r2
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	40d3      	lsrs	r3, r2
 80037ae:	4a09      	ldr	r2, [pc, #36]	@ (80037d4 <HAL_RCC_ClockConfig+0x2ec>)
 80037b0:	5cd3      	ldrb	r3, [r2, r3]
 80037b2:	fa21 f303 	lsr.w	r3, r1, r3
 80037b6:	4a08      	ldr	r2, [pc, #32]	@ (80037d8 <HAL_RCC_ClockConfig+0x2f0>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80037ba:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <HAL_RCC_ClockConfig+0x2f4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd f8e8 	bl	8000994 <HAL_InitTick>
  
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3778      	adds	r7, #120	@ 0x78
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	08003e54 	.word	0x08003e54
 80037d8:	20000000 	.word	0x20000000
 80037dc:	20000004 	.word	0x20000004

080037e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b08b      	sub	sp, #44	@ 0x2c
 80037e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	2300      	movs	r3, #0
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80037fa:	4b29      	ldr	r3, [pc, #164]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b04      	cmp	r3, #4
 8003808:	d002      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0x30>
 800380a:	2b08      	cmp	r3, #8
 800380c:	d003      	beq.n	8003816 <HAL_RCC_GetSysClockFreq+0x36>
 800380e:	e03c      	b.n	800388a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003810:	4b24      	ldr	r3, [pc, #144]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003812:	623b      	str	r3, [r7, #32]
      break;
 8003814:	e03c      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800381c:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003820:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	fa92 f2a2 	rbit	r2, r2
 8003828:	607a      	str	r2, [r7, #4]
  return result;
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	fab2 f282 	clz	r2, r2
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	40d3      	lsrs	r3, r2
 8003834:	4a1c      	ldr	r2, [pc, #112]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800383a:	4b19      	ldr	r3, [pc, #100]	@ (80038a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800383c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	220f      	movs	r2, #15
 8003844:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	fa92 f2a2 	rbit	r2, r2
 800384c:	60fa      	str	r2, [r7, #12]
  return result;
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	fab2 f282 	clz	r2, r2
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	40d3      	lsrs	r3, r2
 8003858:	4a14      	ldr	r2, [pc, #80]	@ (80038ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003868:	4a0e      	ldr	r2, [pc, #56]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
 8003878:	e004      	b.n	8003884 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4a0c      	ldr	r2, [pc, #48]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	623b      	str	r3, [r7, #32]
      break;
 8003888:	e002      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800388a:	4b06      	ldr	r3, [pc, #24]	@ (80038a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800388c:	623b      	str	r3, [r7, #32]
      break;
 800388e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003890:	6a3b      	ldr	r3, [r7, #32]
}
 8003892:	4618      	mov	r0, r3
 8003894:	372c      	adds	r7, #44	@ 0x2c
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	007a1200 	.word	0x007a1200
 80038a8:	08003e64 	.word	0x08003e64
 80038ac:	08003e74 	.word	0x08003e74
 80038b0:	003d0900 	.word	0x003d0900

080038b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b092      	sub	sp, #72	@ 0x48
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80038c4:	2300      	movs	r3, #0
 80038c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80d4 	beq.w	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10e      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	61d3      	str	r3, [r2, #28]
 80038f0:	4b48      	ldr	r3, [pc, #288]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003902:	4b45      	ldr	r3, [pc, #276]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390a:	2b00      	cmp	r3, #0
 800390c:	d118      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800390e:	4b42      	ldr	r3, [pc, #264]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a41      	ldr	r2, [pc, #260]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003918:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391a:	f7fd f87f 	bl	8000a1c <HAL_GetTick>
 800391e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003920:	e008      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003922:	f7fd f87b 	bl	8000a1c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b64      	cmp	r3, #100	@ 0x64
 800392e:	d901      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e169      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003934:	4b38      	ldr	r3, [pc, #224]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003940:	4b34      	ldr	r3, [pc, #208]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003948:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800394a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 8084 	beq.w	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800395c:	429a      	cmp	r2, r3
 800395e:	d07c      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003960:	4b2c      	ldr	r3, [pc, #176]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003968:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800396a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800396e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	4b26      	ldr	r3, [pc, #152]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	461a      	mov	r2, r3
 800398a:	2301      	movs	r3, #1
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003992:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800399c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	461a      	mov	r2, r3
 80039ae:	2300      	movs	r3, #0
 80039b0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039b2:	4a18      	ldr	r2, [pc, #96]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04b      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fd f82b 	bl	8000a1c <HAL_GetTick>
 80039c6:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c8:	e00a      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ca:	f7fd f827 	bl	8000a1c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039d8:	4293      	cmp	r3, r2
 80039da:	d901      	bls.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e113      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80039e0:	2302      	movs	r3, #2
 80039e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ec:	2302      	movs	r3, #2
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	61fb      	str	r3, [r7, #28]
  return result;
 80039f8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d108      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003a0e:	4b01      	ldr	r3, [pc, #4]	@ (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	e00d      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	10908100 	.word	0x10908100
 8003a20:	2302      	movs	r3, #2
 8003a22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	fa93 f3a3 	rbit	r3, r3
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	4b78      	ldr	r3, [pc, #480]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	2202      	movs	r2, #2
 8003a32:	613a      	str	r2, [r7, #16]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	fa92 f2a2 	rbit	r2, r2
 8003a3a:	60fa      	str	r2, [r7, #12]
  return result;
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	fab2 f282 	clz	r2, r2
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	f002 021f 	and.w	r2, r2, #31
 8003a4e:	2101      	movs	r1, #1
 8003a50:	fa01 f202 	lsl.w	r2, r1, r2
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0b7      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	496a      	ldr	r1, [pc, #424]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a6c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d105      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a74:	4b66      	ldr	r3, [pc, #408]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	4a65      	ldr	r2, [pc, #404]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a8c:	4b60      	ldr	r3, [pc, #384]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a90:	f023 0203 	bic.w	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	495d      	ldr	r1, [pc, #372]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aaa:	4b59      	ldr	r3, [pc, #356]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	4956      	ldr	r1, [pc, #344]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ac8:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	494e      	ldr	r1, [pc, #312]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	f023 0210 	bic.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	4947      	ldr	r1, [pc, #284]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003b04:	4b42      	ldr	r3, [pc, #264]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	493f      	ldr	r1, [pc, #252]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b22:	4b3b      	ldr	r3, [pc, #236]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b26:	f023 0220 	bic.w	r2, r3, #32
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	4938      	ldr	r1, [pc, #224]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b40:	4b33      	ldr	r3, [pc, #204]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	4930      	ldr	r1, [pc, #192]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0310 	and.w	r3, r3, #16
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	4929      	ldr	r1, [pc, #164]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b7c:	4b24      	ldr	r3, [pc, #144]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b88:	4921      	ldr	r1, [pc, #132]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d008      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9e:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba6:	491a      	ldr	r1, [pc, #104]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003bb8:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	4912      	ldr	r1, [pc, #72]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	490b      	ldr	r1, [pc, #44]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d008      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c00:	4903      	ldr	r1, [pc, #12]	@ (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3748      	adds	r7, #72	@ 0x48
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021000 	.word	0x40021000

08003c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e09d      	b.n	8003d62 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d108      	bne.n	8003c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c36:	d009      	beq.n	8003c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	61da      	str	r2, [r3, #28]
 8003c3e:	e005      	b.n	8003c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d106      	bne.n	8003c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7fc fd8c 	bl	8000784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c8c:	d902      	bls.n	8003c94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
 8003c92:	e002      	b.n	8003c9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003ca2:	d007      	beq.n	8003cb4 <HAL_SPI_Init+0xa0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cac:	d002      	beq.n	8003cb4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf6:	ea42 0103 	orr.w	r1, r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	0c1b      	lsrs	r3, r3, #16
 8003d10:	f003 0204 	and.w	r2, r3, #4
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003d30:	ea42 0103 	orr.w	r1, r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	69da      	ldr	r2, [r3, #28]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d72:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003d76:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	4013      	ands	r3, r2
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003da0:	b084      	sub	sp, #16
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	f107 0014 	add.w	r0, r7, #20
 8003dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	b004      	add	sp, #16
 8003de0:	4770      	bx	lr

08003de2 <memset>:
 8003de2:	4402      	add	r2, r0
 8003de4:	4603      	mov	r3, r0
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d100      	bne.n	8003dec <memset+0xa>
 8003dea:	4770      	bx	lr
 8003dec:	f803 1b01 	strb.w	r1, [r3], #1
 8003df0:	e7f9      	b.n	8003de6 <memset+0x4>
	...

08003df4 <__libc_init_array>:
 8003df4:	b570      	push	{r4, r5, r6, lr}
 8003df6:	4d0d      	ldr	r5, [pc, #52]	@ (8003e2c <__libc_init_array+0x38>)
 8003df8:	4c0d      	ldr	r4, [pc, #52]	@ (8003e30 <__libc_init_array+0x3c>)
 8003dfa:	1b64      	subs	r4, r4, r5
 8003dfc:	10a4      	asrs	r4, r4, #2
 8003dfe:	2600      	movs	r6, #0
 8003e00:	42a6      	cmp	r6, r4
 8003e02:	d109      	bne.n	8003e18 <__libc_init_array+0x24>
 8003e04:	4d0b      	ldr	r5, [pc, #44]	@ (8003e34 <__libc_init_array+0x40>)
 8003e06:	4c0c      	ldr	r4, [pc, #48]	@ (8003e38 <__libc_init_array+0x44>)
 8003e08:	f000 f818 	bl	8003e3c <_init>
 8003e0c:	1b64      	subs	r4, r4, r5
 8003e0e:	10a4      	asrs	r4, r4, #2
 8003e10:	2600      	movs	r6, #0
 8003e12:	42a6      	cmp	r6, r4
 8003e14:	d105      	bne.n	8003e22 <__libc_init_array+0x2e>
 8003e16:	bd70      	pop	{r4, r5, r6, pc}
 8003e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e1c:	4798      	blx	r3
 8003e1e:	3601      	adds	r6, #1
 8003e20:	e7ee      	b.n	8003e00 <__libc_init_array+0xc>
 8003e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e26:	4798      	blx	r3
 8003e28:	3601      	adds	r6, #1
 8003e2a:	e7f2      	b.n	8003e12 <__libc_init_array+0x1e>
 8003e2c:	08003e84 	.word	0x08003e84
 8003e30:	08003e84 	.word	0x08003e84
 8003e34:	08003e84 	.word	0x08003e84
 8003e38:	08003e88 	.word	0x08003e88

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
